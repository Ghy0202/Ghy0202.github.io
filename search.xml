<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>蓝桥杯第十二届模拟</title>
      <link href="/2022/03/28/lan-qiao-bei-di-shi-er-jie/"/>
      <url>/2022/03/28/lan-qiao-bei-di-shi-er-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识点总结"><a href="#1-知识点总结" class="headerlink" title="1. 知识点总结"></a>1. 知识点总结</h1><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2. 分题题解"></a>2. 分题题解</h1><h2 id="2-1-砝码称重"><a href="#2-1-砝码称重" class="headerlink" title="2.1 砝码称重"></a>2.1 砝码称重</h2><p>dp的题目，但是一开始没有思路，用的是DFS超时了~</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>w<span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sum<span class="token operator">+=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//复制前一组状态 </span><span class="token comment">//for(int j=1;j&lt;=sum;j++)&#123;</span><span class="token comment">//dp[i][j]=dp[i-1][j];</span><span class="token comment">//&#125;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//当前砝码重量一定可以计算出来</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>sum<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">abs</span><span class="token punctuation">(</span>j<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>sum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥第十一届模拟</title>
      <link href="/2022/03/23/lan-qiao-di-shi-yi-jie-mo-ni/"/>
      <url>/2022/03/23/lan-qiao-di-shi-yi-jie-mo-ni/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识点总结"><a href="#1-知识点总结" class="headerlink" title="1.知识点总结"></a>1.知识点总结</h1><table><thead><tr><th>题目</th><th>难度</th><th>知识点</th></tr></thead><tbody><tr><td>子串分值</td><td>🐸🐸</td><td>（栈）+推理逻辑</td></tr><tr><td>回文日期</td><td>🐸</td><td>不难，但是翻车了，注意日期的判别~</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2. 分题题解"></a>2. 分题题解</h1><h2 id="2-1-子串分值"><a href="#2-1-子串分值" class="headerlink" title="2.1 子串分值"></a>2.1 子串分值</h2><blockquote><p>卡时间的题目</p></blockquote><p>60分题解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>string str<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">vis</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>str<span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fill</span><span class="token punctuation">(</span>vis<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vis<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//遍历s(i,j)</span>vis<span class="token punctuation">[</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ans<span class="token operator">+=</span>sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回头看的话，其实总体在找规律，题目中已经给提示了昂~</p><ul><li>第一遍逆序遍历字符串，用栈nex保存每一个字符如：<code>a</code>对应的下一个字符<code>a</code>的位置，同时初始化pre数组，记录每一个位置i上的字母<code>a</code>的前一个位置-1</li><li>接下来顺序遍历字符串，记录a到上一个a之间字母个数和a到下一个字母a的字母个数，二者相乘，即为该位置字符a包含在了几个合法的字串中，更新sum与对应的nex\pre数组</li><li>输出答案</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string str<span class="token punctuation">;</span><span class="token keyword">int</span> pre<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span><span class="token function">nex</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>str<span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//初始化，得到每一个数字的pre和next </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> id<span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">;</span>nex<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> id<span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">;</span><span class="token keyword">int</span> before_num<span class="token operator">=</span>i<span class="token operator">-</span>pre<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> next_num<span class="token punctuation">;</span><span class="token keyword">int</span> next_id<span class="token operator">=</span>len<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>nex<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>nex<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>next_id<span class="token operator">=</span>nex<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nex<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>next_num<span class="token operator">=</span>next_id<span class="token operator">-</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>next_num<span class="token operator">=</span>len<span class="token operator">-</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//列出可能性，更新next,pre</span>sum<span class="token operator">+=</span>before_num<span class="token operator">*</span>next_num<span class="token punctuation">;</span><span class="token comment">//printf("%c pre=%d next=%d all=%d\n",str[i],pre[id],next_id,before_num*next_num); </span>pre<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-回文日期"><a href="#2-2-回文日期" class="headerlink" title="2.2 回文日期"></a>2.2 回文日期</h2><blockquote><p>蓝桥练习平台不支持to_string和stoi</p></blockquote><p>第一版：可以过样例但是oj报错</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">getTurn</span><span class="token punctuation">(</span>string date<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>string target<span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前面缺0</span>string ans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token operator">-</span>target<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">+=</span><span class="token string">"0"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> ans<span class="token operator">+=</span>target<span class="token punctuation">;</span>string anss<span class="token operator">=</span>ans<span class="token punctuation">;</span><span class="token function">reverse</span><span class="token punctuation">(</span>anss<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>anss<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token operator">+=</span>anss<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">isok</span><span class="token punctuation">(</span>string abab<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>abab<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>abab<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>abab<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>abab<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">getValue</span><span class="token punctuation">(</span>string date<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isok</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string target<span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前面缺0</span>string ans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token operator">-</span>target<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">+=</span><span class="token string">"0"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> ans<span class="token operator">+=</span>target<span class="token punctuation">;</span>string anss<span class="token operator">=</span>ans<span class="token punctuation">;</span><span class="token function">reverse</span><span class="token punctuation">(</span>anss<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>anss<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token operator">+=</span>anss<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>string date<span class="token punctuation">;</span>cin<span class="token operator">>></span>date<span class="token punctuation">;</span><span class="token function">getTurn</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getValue</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>第二版90分，主要是发现还需要额外判断回文数是否合法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> rm<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>string date<span class="token punctuation">;</span><span class="token comment">//转换函数</span><span class="token keyword">int</span> <span class="token function">str2num</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">*=</span><span class="token number">10</span><span class="token punctuation">;</span>ans<span class="token operator">+=</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> string <span class="token function">num2str</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string ans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token char">'0'</span><span class="token operator">+</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//补上前缀零</span>string zero<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>zero<span class="token operator">+=</span><span class="token char">'0'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token function">reverse</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token operator">=</span>zero<span class="token operator">+</span>ans<span class="token punctuation">;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//判断闰年</span><span class="token keyword">bool</span> <span class="token function">isR</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//是一个合法日期</span><span class="token keyword">bool</span> <span class="token function">isDate</span><span class="token punctuation">(</span>string year<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> month<span class="token operator">=</span><span class="token punctuation">(</span>year<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token punctuation">(</span>year<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>month<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>month<span class="token operator">></span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> day<span class="token operator">=</span><span class="token punctuation">(</span>year<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token punctuation">(</span>year<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isR</span><span class="token punctuation">(</span><span class="token function">str2num</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>day<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>day<span class="token operator">></span>rm<span class="token punctuation">[</span>month<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>day<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>day<span class="token operator">></span>m<span class="token punctuation">[</span>month<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span>string date<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string cur<span class="token operator">=</span>date<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token function">str2num</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDate</span><span class="token punctuation">(</span><span class="token function">num2str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string fo<span class="token operator">=</span><span class="token function">num2str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>fo<span class="token punctuation">;</span><span class="token function">reverse</span><span class="token punctuation">(</span>fo<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fo<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>fo<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">isok</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">getNextSpecial</span><span class="token punctuation">(</span>string date<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string cur<span class="token operator">=</span>date<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token function">str2num</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isok</span><span class="token punctuation">(</span><span class="token function">num2str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token operator">!</span><span class="token function">isDate</span><span class="token punctuation">(</span><span class="token function">num2str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string fo<span class="token operator">=</span><span class="token function">num2str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>fo<span class="token punctuation">;</span><span class="token function">reverse</span><span class="token punctuation">(</span>fo<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fo<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>fo<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>date<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>date<span class="token operator">==</span><span class="token string">"89991231"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"90011009\n"</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"90900909\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">getNext</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getNextSpecial</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>发现别人的方法比我自己的简单不少……</p></blockquote><p>根据输入ABCD叠加生成回文</p><p>根据输入AB生成下一个ABABBABA</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> mon<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">reverse_num</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">*=</span><span class="token number">10</span><span class="token punctuation">;</span>ans<span class="token operator">+=</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>num<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> ymd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//检查日期是否合法</span><span class="token keyword">if</span><span class="token punctuation">(</span>ymd<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span>  <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> d<span class="token operator">=</span>ymd<span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span>ymd<span class="token operator">/=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token operator">=</span>ymd<span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">return</span>  m<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>m<span class="token operator">&lt;=</span><span class="token number">12</span><span class="token operator">&amp;&amp;</span>d<span class="token operator">&lt;=</span>mon<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造回文日期</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9999</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">10000</span><span class="token operator">+</span><span class="token function">reverse_num</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%08d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//构造ABABBABA</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">1000000</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">99</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> BA<span class="token operator">=</span><span class="token function">reverse_num</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">1000000</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">10000</span><span class="token operator">+</span>BA<span class="token operator">*</span><span class="token number">100</span><span class="token operator">+</span>BA<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%08d"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-成绩分析"><a href="#2-3-成绩分析" class="headerlink" title="2.3 成绩分析"></a>2.3 成绩分析</h2><blockquote><p>基础题……不贴了哈😁</p></blockquote><h2 id="2-4-荒岛探测"><a href="#2-4-荒岛探测" class="headerlink" title="2.4 荒岛探测"></a>2.4 荒岛探测</h2><blockquote><p>几何问题——没有思路😅</p></blockquote><h2 id="2-5-字串排序"><a href="#2-5-字串排序" class="headerlink" title="2.5 字串排序"></a>2.5 字串排序</h2><blockquote><p>暴力DFS，结果当然是……60，超时</p><p>分析可知，如果字符串不允许重复，那么冒泡次序是字符串长度len的公式：<code>(len+1)*len/2</code></p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>string ans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">int</span> level<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">great</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">&lt;</span>ans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">findPos</span><span class="token punctuation">(</span>string str<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//找到最后一个是c的位置 </span><span class="token keyword">int</span> pos<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>pos<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>pos<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">!=</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>string str<span class="token punctuation">,</span><span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//cout&lt;&lt;str&lt;&lt;" "&lt;&lt;cnt&lt;&lt;endl;</span><span class="token keyword">int</span> len<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">></span>level<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span><span class="token string">""</span><span class="token operator">||</span><span class="token function">great</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span>str<span class="token punctuation">;</span>level<span class="token operator">=</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">></span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//level=ans.length();</span><span class="token keyword">return</span>  <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//两种选择：头部扩展或者新的字母</span><span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token function">findPos</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>len<span class="token punctuation">,</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> nc<span class="token operator">=</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>nc<span class="token operator">+</span>str<span class="token punctuation">,</span>cnt<span class="token operator">+</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">dfs</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>str<span class="token punctuation">,</span>cnt<span class="token operator">+</span>len<span class="token operator">-</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>直觉告诉我用dp~参考<a href="https://blog.csdn.net/qq_43619717/article/details/112595685">第十一届蓝桥杯——字串排序（DP）_Dripping.的博客-CSDN博客_字串排序</a></p></li></ul><h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥第十届省赛模拟</title>
      <link href="/2022/03/22/lan-qiao-di-shi-jie-sheng-sai-mo-ni/"/>
      <url>/2022/03/22/lan-qiao-di-shi-jie-sheng-sai-mo-ni/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识点总结"><a href="#1-知识点总结" class="headerlink" title="1. 知识点总结"></a>1. 知识点总结</h1><table><thead><tr><th>题目</th><th>难度</th><th>知识点</th><th>备注</th></tr></thead><tbody><tr><td>完全二叉树</td><td>🐸</td><td>数组</td><td>100</td></tr><tr><td>外卖优先级</td><td>🐸（🐸）</td><td>数组</td><td>60</td></tr><tr><td>修改数组</td><td>🐸🐸</td><td>数组</td><td></td></tr><tr><td>糖果</td><td>🐸🐸🐸</td><td>DP+状态压缩</td><td>30</td></tr><tr><td>组合数问题</td><td>🐸🐸🐸</td><td><mark>数位DP+卢卡斯定理</mark></td><td>0 未解决</td></tr></tbody></table><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2. 分题题解"></a>2. 分题题解</h1><h2 id="2-2-外卖优先级"><a href="#2-2-外卖优先级" class="headerlink" title="2.2 外卖优先级"></a>2.2 外卖优先级</h2><blockquote><p>基础题，<strong>细心</strong>，用pre_add_time存储上次订单时间，注意先对所有订单排个序~</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">,</span>T<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Order</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> ts<span class="token punctuation">;</span><span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Order<span class="token operator">></span>orders<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>pre_add_time<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span>isin<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>state<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Order a<span class="token punctuation">,</span>Order b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>ts<span class="token operator">!=</span>b<span class="token punctuation">.</span>ts<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>ts<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>ts<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>id<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">getAns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> outdate<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>T<span class="token operator">-</span>pre_add_time<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-=</span>outdate<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//printf("id=%d score=%d \n",i,state[i]);</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>orders<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>pre_add_time<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>isin<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>state<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fill</span><span class="token punctuation">(</span>pre_add_time<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pre_add_time<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fill</span><span class="token punctuation">(</span>isin<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>isin<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fill</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>state<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>orders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ts<span class="token punctuation">,</span><span class="token operator">&amp;</span>orders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>orders<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>orders<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> ts<span class="token operator">=</span>orders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ts<span class="token punctuation">;</span><span class="token keyword">int</span> id<span class="token operator">=</span>orders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">//如果超时 </span><span class="token keyword">if</span><span class="token punctuation">(</span>ts<span class="token operator">></span>T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> outdate<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>ts<span class="token operator">-</span>pre_add_time<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pre_add_time<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span>ts<span class="token punctuation">;</span>state<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>state<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">-</span>outdate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isin<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>isin<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>state<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isin<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>state<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>isin<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//printf("ts=%d id=%d score=%d\n",ts,id,state[id]); </span><span class="token punctuation">&#125;</span><span class="token function">getAns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-修改数组"><a href="#2-3-修改数组" class="headerlink" title="2.3 修改数组"></a>2.3 修改数组</h2><blockquote><p>一道其实不是很难的题😶:</p><p>有一个测试点不对，题目错了</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1000055</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>vis<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>vis<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fill</span><span class="token punctuation">(</span>vis<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vis<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> value<span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>value<span class="token operator">+=</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vis<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-糖果"><a href="#2-4-糖果" class="headerlink" title="2.4 糖果"></a>2.4 糖果</h2><p>这句话基本决定了用二进制表示某一种糖是否买了</p><blockquote><p>评测用例规模与约定</p><p>　　对于 30% 的评测用例，1 ≤ N ≤ 20 。<br>　　对于所有评测样例，1 ≤ N ≤ 100，1 ≤ M ≤ 20，1 ≤ K ≤ 20，1 ≤ Ti ≤ M。</p></blockquote><p>其实想到了用二进制去表示，但是写法只能过30%的样例</p><ul><li>30%</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">></span>v<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">;</span> <span class="token keyword">int</span> ans<span class="token operator">=</span>INT_MAX<span class="token punctuation">;</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span>vis<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">></span>pak<span class="token punctuation">;</span>ll target<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//选几包，或的结果为全1 </span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> pre<span class="token punctuation">,</span><span class="token keyword">bool</span> buy<span class="token punctuation">,</span>ll cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">>=</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//越界 </span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>buy<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cur<span class="token operator">|=</span>pak<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>pre<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//cout&lt;&lt;"当前"&lt;&lt;bitset&lt;20>(cur)&lt;&lt;" "&lt;&lt;cur&lt;&lt;endl;</span><span class="token comment">//判断是否符合条件 </span><span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cout&lt;&lt;"pre:"&lt;&lt;pre&lt;&lt;endl;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">dfs</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>pre<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>pre<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//试探下一个</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//n包糖果 m种口味 k颗一包</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>pak<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>vis<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>target<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>target<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//cout&lt;&lt;bitset&lt;20>(target)&lt;&lt;" "&lt;&lt;target&lt;&lt;endl;</span><span class="token comment">//cout&lt;&lt;endl;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//转化成糖果</span>ll suger<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>suger<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>suger<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//cout&lt;&lt;bitset&lt;20>(suger)&lt;&lt;endl;</span>pak<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>suger<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//选最小袋数的，是的|的结果为m</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>正确的状态压缩写法</li></ul><p>用<code>1&lt;&lt;M</code>的二进制写法来表示某种糖果是否买到了，<code>|</code>的用法请关注</p><p>主要的状态转移方程为<code>dp[j|pak[i]]=min(dp[j|pak[i]],dp[j]+1); </code>现在加上这个状态，或者之前有买到了,</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">,</span>K<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>pak<span class="token punctuation">;</span><span class="token keyword">int</span> target<span class="token punctuation">;</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">,</span><span class="token operator">&amp;</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span>pak<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>\dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>INT_MAX<span class="token punctuation">;</span><span class="token comment">//每个状态至少需要买的糖 </span><span class="token punctuation">&#125;</span>target<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>M<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> candy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>K<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>candy<span class="token operator">|=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>temp<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>pak<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>candy<span class="token punctuation">;</span>dp<span class="token punctuation">[</span>candy<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//枚举每一袋</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>target<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//枚举每一种状态</span><span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//没有买过这个状态 </span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>j<span class="token operator">|</span>pak<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token operator">|</span>pak<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//现在加上这个状态，或者之前有买到了 </span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token operator">==</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-组合数问题"><a href="#2-5-组合数问题" class="headerlink" title="2.5 组合数问题"></a>2.5 组合数问题</h2><blockquote><p>数位DP+卢卡斯定理</p></blockquote><p>【<a href="https://blog.csdn.net/xuxiaobo1234/article/details/108096786">参考答案</a>】</p><h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥模拟1——第九届</title>
      <link href="/2022/03/17/lan-qiao-mo-ni-1-di-jiu-jie/"/>
      <url>/2022/03/17/lan-qiao-mo-ni-1-di-jiu-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识总结"><a href="#1-知识总结" class="headerlink" title="1. 知识总结"></a>1. 知识总结</h1><p>由于疫情被困在宿舍，为了稍微积极一点所以决定打卡这件小事🧐……</p><table><thead><tr><th>题号</th><th>难度</th><th>知识点</th></tr></thead><tbody><tr><td>航班时间</td><td>🐸</td><td>数学+字符串处理</td></tr><tr><td>三体攻击</td><td>🐸🐸🐸</td><td>三维差分<mark>记录满分题解，但暂时没有理解三维差分为什么差分数组那样处理</mark></td></tr><tr><td>全球变暖</td><td>🐸</td><td>DFS</td></tr><tr><td>倍数问题</td><td>🐸🐸</td><td></td></tr><tr><td>结账问题</td><td>🐸🐸</td><td>贪心+精度</td></tr></tbody></table><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2. 分题题解"></a>2. 分题题解</h1><h2 id="2-1-航班时间"><a href="#2-1-航班时间" class="headerlink" title="2.1 航班时间"></a>2.1 航班时间</h2><p>【题目链接】</p><blockquote><p>简单题，string字符串处理会减少工作量嗷~</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Timing</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> h<span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>string str<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Count</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> len<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Timing st<span class="token punctuation">,</span>ed<span class="token punctuation">;</span><span class="token keyword">int</span> add<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">sscanf</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"%d:%d:%d %d:%d:%d (+%d)"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>st<span class="token punctuation">.</span>h<span class="token punctuation">,</span><span class="token operator">&amp;</span>st<span class="token punctuation">.</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>st<span class="token punctuation">.</span>s<span class="token punctuation">,</span><span class="token operator">&amp;</span>ed<span class="token punctuation">.</span>h<span class="token punctuation">,</span><span class="token operator">&amp;</span>ed<span class="token punctuation">.</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>ed<span class="token punctuation">.</span>s<span class="token punctuation">,</span><span class="token operator">&amp;</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">sscanf</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"%d:%d:%d %d:%d:%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>st<span class="token punctuation">.</span>h<span class="token punctuation">,</span><span class="token operator">&amp;</span>st<span class="token punctuation">.</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>st<span class="token punctuation">.</span>s<span class="token punctuation">,</span><span class="token operator">&amp;</span>ed<span class="token punctuation">.</span>h<span class="token punctuation">,</span><span class="token operator">&amp;</span>ed<span class="token punctuation">.</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>ed<span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> s<span class="token operator">=</span>st<span class="token punctuation">.</span>h<span class="token operator">*</span><span class="token number">3600</span><span class="token operator">+</span>st<span class="token punctuation">.</span>m<span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span>st<span class="token punctuation">.</span>s<span class="token punctuation">;</span><span class="token keyword">int</span> e<span class="token operator">=</span>add<span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">3600</span><span class="token operator">+</span>ed<span class="token punctuation">.</span>h<span class="token operator">*</span><span class="token number">3600</span><span class="token operator">+</span>ed<span class="token punctuation">.</span>m<span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span>ed<span class="token punctuation">.</span>s<span class="token punctuation">;</span><span class="token keyword">return</span> e<span class="token operator">-</span>s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> h<span class="token operator">=</span>t<span class="token operator">/</span><span class="token number">3600</span><span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token operator">=</span>t<span class="token operator">%</span><span class="token number">60</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token number">3600</span><span class="token operator">*</span><span class="token punctuation">(</span>t<span class="token operator">/</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d:%02d:%02d\n"</span><span class="token punctuation">,</span>h<span class="token punctuation">,</span>m<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> go<span class="token operator">=</span><span class="token function">Count</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> back<span class="token operator">=</span><span class="token function">Count</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> kill<span class="token operator">=</span><span class="token punctuation">(</span>go<span class="token operator">-</span>back<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">Print</span><span class="token punctuation">(</span>go<span class="token operator">-</span>kill<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-三体攻击"><a href="#2-2-三体攻击" class="headerlink" title="2.2 三体攻击"></a>2.2 三体攻击</h2><p>【题目链接】</p><blockquote><p>卡时间以及空间复杂度，暴力可以骗到一点点分；</p><p>正确解法是</p></blockquote><ul><li>暴力：一开始脑子抽了用id从[lat,lbt,lct]-&gt;[rat,rbt,rct]遍历id只有16分，后来发现框出来的立方体对应的一维id并不是连续的😅，改过之后66分</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token comment">//用的是差分的解法 </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span><span class="token number">1000009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span>  lat<span class="token punctuation">,</span>rat<span class="token punctuation">,</span>lbt<span class="token punctuation">,</span>rbt<span class="token punctuation">,</span>lct<span class="token punctuation">,</span>rct<span class="token punctuation">,</span>ht<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>A<span class="token punctuation">,</span><span class="token operator">&amp;</span>B<span class="token punctuation">,</span><span class="token operator">&amp;</span>C<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>A<span class="token operator">*</span>B<span class="token operator">*</span>C<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>lat<span class="token punctuation">,</span><span class="token operator">&amp;</span>rat<span class="token punctuation">,</span><span class="token operator">&amp;</span>lbt<span class="token punctuation">,</span><span class="token operator">&amp;</span>rbt<span class="token punctuation">,</span><span class="token operator">&amp;</span>lct<span class="token punctuation">,</span><span class="token operator">&amp;</span>rct<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ht<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span>lat<span class="token punctuation">;</span>a<span class="token operator">&lt;=</span>rat<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token operator">=</span>lbt<span class="token punctuation">;</span>b<span class="token operator">&lt;=</span>rbt<span class="token punctuation">;</span>b<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token operator">=</span>lct<span class="token punctuation">;</span>c<span class="token operator">&lt;=</span>rct<span class="token punctuation">;</span>c<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> id<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>B<span class="token operator">+</span><span class="token punctuation">(</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>C<span class="token operator">+</span>c<span class="token punctuation">;</span>d<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">-=</span>ht<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>差分数组</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span> <span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//存储舰队生命值</span><span class="token keyword">int</span> D<span class="token punctuation">[</span> <span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//三维差分数组（压维）；同时也用来计算每个点的攻击值</span><span class="token keyword">int</span> lat<span class="token punctuation">[</span> <span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rat<span class="token punctuation">[</span> <span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//存储攻击</span><span class="token keyword">int</span> lbt<span class="token punctuation">[</span> <span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rbt<span class="token punctuation">[</span> <span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> lct<span class="token punctuation">[</span> <span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rct<span class="token punctuation">[</span> <span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ht<span class="token punctuation">[</span> <span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">num</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//小技巧：压维，把三维坐标[i][j][k]转为一维的((i-1)*B+(j-1))*C+(k-1)+1</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>A <span class="token operator">||</span> j<span class="token operator">></span>B <span class="token operator">||</span> k<span class="token operator">></span>C<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>B<span class="token operator">+</span><span class="token punctuation">(</span>j <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>C<span class="token operator">+</span><span class="token punctuation">(</span>k <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">boolcheck</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//检查经过x次攻击后是否有战舰爆炸</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//三维差分数组：三维有8个区间端点</span>D<span class="token punctuation">[</span><span class="token function">num</span><span class="token punctuation">(</span>lat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> lbt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> lct<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>D<span class="token punctuation">[</span><span class="token function">num</span><span class="token punctuation">(</span>rat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>lbt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> lct<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-=</span> ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>D<span class="token punctuation">[</span><span class="token function">num</span><span class="token punctuation">(</span>lat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rbt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>lct<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-=</span> ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>D<span class="token punctuation">[</span><span class="token function">num</span><span class="token punctuation">(</span>lat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> lbt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rct<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-=</span> ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>D<span class="token punctuation">[</span><span class="token function">num</span><span class="token punctuation">(</span>rat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>rbt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>lct<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>D<span class="token punctuation">[</span><span class="token function">num</span><span class="token punctuation">(</span>lat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rbt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>rct<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>D<span class="token punctuation">[</span><span class="token function">num</span><span class="token punctuation">(</span>rat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>lbt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rct<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>D<span class="token punctuation">[</span><span class="token function">num</span><span class="token punctuation">(</span>rat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>rbt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>rct<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-=</span> ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>A<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>B<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> k<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>C<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>D<span class="token punctuation">[</span><span class="token function">num</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> D<span class="token punctuation">[</span><span class="token function">num</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//用差分数组计算出每个点的攻击值</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>A<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> k<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>C<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>B<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>D<span class="token punctuation">[</span><span class="token function">num</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> D<span class="token punctuation">[</span><span class="token function">num</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>B<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> k<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>C<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>A<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>D<span class="token punctuation">[</span><span class="token function">num</span><span class="token punctuation">(</span>i<span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> D<span class="token punctuation">[</span><span class="token function">num</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//攻击值大于生命值</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> main<span class="token punctuation">&#123;</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> <span class="token operator">&amp;</span>B<span class="token punctuation">,</span> <span class="token operator">&amp;</span>C<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>n<span class="token operator">=</span>A<span class="token operator">*</span>B<span class="token operator">*</span>C<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d%d%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>lat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>rat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>lbt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>rbt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>lct<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>rct<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intL<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>R<span class="token operator">=</span>m<span class="token punctuation">;</span> <span class="token comment">//经典的二分写法</span><span class="token keyword">while</span><span class="token punctuation">(</span>L<span class="token operator">&lt;</span>R<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//对m进行二分，找到临界值</span>intmid<span class="token operator">=</span><span class="token punctuation">(</span>L<span class="token operator">+</span>R<span class="token punctuation">)</span><span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> R<span class="token operator">=</span>mid<span class="token punctuation">;</span>elseL<span class="token operator">=</span>mid<span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%d\n"</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印临界值</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-全球变暖"><a href="#2-3-全球变暖" class="headerlink" title="2.3 全球变暖"></a>2.3 全球变暖</h2><p>【题目链接】</p><blockquote><p>简单题，但是要细心，不可以粗暴的两次求连通图个数相减，因为全球变暖还会导致一些岛屿变多😅</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">;</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//1 陆地 0 海洋 -1 陆地变成海洋</span><span class="token keyword">char</span> temp<span class="token punctuation">;</span> <span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//上下左右</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">bool</span> <span class="token function">nearSea</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> nx<span class="token operator">=</span>x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ny<span class="token operator">=</span>y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//找到所有1组成的连通块</span><span class="token comment">//返回是否有不靠海洋的 </span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">></span>n<span class="token operator">||</span>y<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">||</span>y<span class="token operator">></span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//越界 </span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> area<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">nearSea</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>area<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>area<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> nx<span class="token operator">=</span>x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ny<span class="token operator">=</span>y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>mp<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>area<span class="token operator">+=</span><span class="token function">dfs</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">return</span> area<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//有多少岛屿会完全淹没 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>temp<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span><span class="token char">'#'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//全球变暖：查看是否都是nearSea </span><span class="token keyword">int</span> has<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>has<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>has<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-倍数问题"><a href="#2-4-倍数问题" class="headerlink" title="2.4 倍数问题"></a>2.4 倍数问题</h2><blockquote><p>容易超时，思路主要是用%k的余数去存储数字，实际上只需要v[mod].size()从大到小排前三的即可</p><p>思路来源于k远远小于n的大小，所以遍历数组的时候考虑以k为度量的</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span>v<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>num<span class="token punctuation">;</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">[</span>temp<span class="token operator">%</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> resa<span class="token punctuation">,</span>resb<span class="token punctuation">,</span>resc<span class="token punctuation">;</span><span class="token comment">//遍历k会简单一些 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>a<span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token operator">&amp;&amp;</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>b<span class="token operator">=</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>b<span class="token operator">=</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//c的余数是算好的</span>resc<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">%</span>k<span class="token punctuation">)</span><span class="token operator">%</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span>v<span class="token punctuation">[</span>resc<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token operator">&amp;&amp;</span>resc<span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>c<span class="token operator">=</span>v<span class="token punctuation">[</span>resc<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">==</span>resc<span class="token operator">||</span>j<span class="token operator">==</span>resc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>c<span class="token operator">=</span>v<span class="token punctuation">[</span>resc<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>c<span class="token operator">=</span>v<span class="token punctuation">[</span>resc<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//printf("(%d %d %d)\n",a,b,c);</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*4 31 2 3 4*/</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-结账问题"><a href="#2-4-结账问题" class="headerlink" title="2.4 结账问题"></a>2.4 结账问题</h2><blockquote><p>思路就是贪心，首先将每个人的钱包的数值按照从小到大排序，大于均值则扣除均值，反之则减去钱包值并更新剩下的人应该平坦的均值😜</p><p>然鹅思路出来提交只有10/100，没错，这题卡精度，<code>int</code>基本可以说是完全不够用……</p></blockquote><p><code>total</code>，<code>s</code>这些变量用<code>long long</code>，浮点数直接判断大小的话会导致精度不够，所以尽量用大一点的值，避免使用小值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>ll s<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">></span>a<span class="token punctuation">;</span><span class="token keyword">double</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ll total<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>total<span class="token operator">=</span>s<span class="token punctuation">;</span><span class="token keyword">double</span> avg<span class="token operator">=</span>s<span class="token operator">/</span><span class="token keyword">double</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>=</span>avg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//每个人都付得清</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0.0000"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//另外处理</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">&lt;</span>total<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">+=</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>avg<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>avg<span class="token punctuation">)</span><span class="token punctuation">;</span>total<span class="token operator">-=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//差钱 </span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> cur_avg<span class="token operator">=</span>total<span class="token operator">/</span><span class="token keyword">double</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>sum<span class="token operator">+=</span><span class="token punctuation">(</span>cur_avg<span class="token operator">-</span>avg<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>cur_avg<span class="token operator">-</span>avg<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.4f"</span><span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span>sum<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*5 2333666 666 666 666 66610 302 1 4 7 4 8 3 6 4 7*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h1><ol><li>三体攻击【<a href="https://www.sohu.com/a/451190120_453160">三维差分</a>】</li><li>三体攻击【<a href="https://blog.csdn.net/Archerrrrr/article/details/115353425">格式ok的代码</a>】</li></ol><h1 id="4-加餐练习"><a href="#4-加餐练习" class="headerlink" title="4. 加餐练习"></a>4. 加餐练习</h1><h2 id="4-1-二维简单差分"><a href="#4-1-二维简单差分" class="headerlink" title="4.1 二维简单差分"></a>4.1 二维简单差分</h2><p>【<a href="https://www.luogu.com.cn/problem/P3717#submit">题目链接</a>】</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//差分求解</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">5002</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5002</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>r<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">-</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token function">min</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>y<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> delta<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">(</span>r<span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>y<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> lx<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">-</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> rx<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>x<span class="token operator">+</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>lx<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>rx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//前缀和</span><span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++康复训练01</title>
      <link href="/2022/03/15/c-kang-fu-xun-lian-01/"/>
      <url>/2022/03/15/c-kang-fu-xun-lian-01/</url>
      
        <content type="html"><![CDATA[<h1 id="CCF-2020-4"><a href="#CCF-2020-4" class="headerlink" title="CCF-2020-4"></a>CCF-2020-4</h1><h2 id="1-题型总结"><a href="#1-题型总结" class="headerlink" title="1. 题型总结"></a>1. 题型总结</h2><h2 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2. 分题题解"></a>2. 分题题解</h2><h2 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP论文阅读第二弹——BERT_LFC</title>
      <link href="/2022/02/28/nlp-lun-wen-yue-du-di-er-dan-bert-ada/"/>
      <url>/2022/02/28/nlp-lun-wen-yue-du-di-er-dan-bert-ada/</url>
      
        <content type="html"><![CDATA[<p>本次依然是论文阅读+代码复现~</p><p>正好熟悉一下相关的实验coding</p><p>阅读【paper】【code】</p><p>复现工作【my_code】</p><h1 id="1-Abstract"><a href="#1-Abstract" class="headerlink" title="1. Abstract"></a>1. Abstract</h1><h1 id="2-Introduction"><a href="#2-Introduction" class="headerlink" title="2. Introduction"></a>2. Introduction</h1><h1 id="3-model"><a href="#3-model" class="headerlink" title="3. model"></a>3. model</h1><p>BERT-LFC框架：</p><p><img src=".%5Cpic%5Cimage-20220228141314612.png" alt="image-20220228141314612"></p><h1 id="4-Experiment"><a href="#4-Experiment" class="headerlink" title="4. Experiment"></a>4. Experiment</h1><h1 id="5-Result"><a href="#5-Result" class="headerlink" title="5. Result"></a>5. Result</h1><h1 id="6-Reference"><a href="#6-Reference" class="headerlink" title="6.Reference"></a>6.Reference</h1><p>碎碎念：</p><blockquote><p>老实说开学之后莫名其妙焦虑嗷嗷嗷，内耗打咩！</p><p>回到学校还是很开心哒~尤其是最近的教室，空调超足！！！</p></blockquote><blockquote><p>话又说回来因为这学期的课程安排比较松，所以最近在看的是上学期一直没怎么深入了解的Bert在ABSC领域的应用🤪,希望三月除了课设不要有奇奇怪怪的事情🧩</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 科研训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模式识别笔记</title>
      <link href="/2022/02/28/mo-shi-shi-bie-bi-ji/"/>
      <url>/2022/02/28/mo-shi-shi-bie-bi-ji/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CCF-CSP-2021-09模拟</title>
      <link href="/2022/02/27/ccf-csp-2021-09-mo-ni/"/>
      <url>/2022/02/27/ccf-csp-2021-09-mo-ni/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识点总结"><a href="#1-知识点总结" class="headerlink" title="1. 知识点总结"></a>1. 知识点总结</h1><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2. 分题题解"></a>2. 分题题解</h1><h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h3><h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><h3 id="2-3-脉冲神经网络"><a href="#2-3-脉冲神经网络" class="headerlink" title="2.3 脉冲神经网络"></a>2.3 脉冲神经网络</h3><h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h1><ol start="3"><li><a href="https://blog.csdn.net/weixin_51554954/article/details/120603459">脉冲神经网络66分题解</a></li><li><a href="https://blog.csdn.net/m0_46223441/article/details/120599553?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-9.pc_relevant_aa&spm=1001.2101.3001.4242.6&utm_relevant_index=12">全部题解</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯第五届模拟</title>
      <link href="/2022/02/25/lan-qiao-bei-di-wu-jie-mo-ni/"/>
      <url>/2022/02/25/lan-qiao-bei-di-wu-jie-mo-ni/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识点总结"><a href="#1-知识点总结" class="headerlink" title="1. 知识点总结"></a>1. 知识点总结</h1><blockquote><p>第五届蓝桥给我的感觉就是总体上会基本的数据结构和算法就可以过几乎全部的样例（但是满分不一定，比较有难度，需要各种优化的思想~菜菜子落泪😥😥😥）</p></blockquote><table><thead><tr><th>题目</th><th>难度</th><th>知识点</th></tr></thead><tbody><tr><td>蚂蚁感冒</td><td>🐸</td><td>数组（外加一丢丢想象力😋）</td></tr><tr><td>波动数列</td><td>🐸（🐸🐸）</td><td>DP（必须DP，否则暴力归0）</td></tr><tr><td>地宫取宝</td><td>🐸（🐸🐸）</td><td>DFS/DP</td></tr><tr><td>斐波那契</td><td>🐸（🐸）</td><td>DP</td></tr><tr><td>兰顿蚂蚁</td><td>🐸</td><td>数组</td></tr></tbody></table><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2. 分题题解"></a>2. 分题题解</h1><h2 id="2-1-蚂蚁感冒"><a href="#2-1-蚂蚁感冒" class="headerlink" title="2.1 蚂蚁感冒"></a>2.1 蚂蚁感冒</h2><blockquote><p>主要是将动态的问题想象为静态的问题——两只蚂蚁相撞可以看作两只蚂蚁互相从对方的身体穿过，这样问题就大大简化了</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>ants<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">/*5-10 8 -20 12 2535 -2 8*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> none<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>ants<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> sign<span class="token operator">=</span>none<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ants<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//向左 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>ants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">-</span>ants<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>sign<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>sign<span class="token punctuation">,</span>ants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到向右的最大的 </span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sign<span class="token operator">!=</span>none<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>sign<span class="token operator">&lt;</span><span class="token operator">-</span>ants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//向右</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token operator">-</span>ants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>ants<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>sign<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>sign<span class="token punctuation">,</span>ants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到向左最小的 </span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sign<span class="token operator">!=</span>none<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token operator">-</span>sign<span class="token operator">></span>ants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-地宫取宝"><a href="#2-2-地宫取宝" class="headerlink" title="2.2 地宫取宝"></a>2.2 地宫取宝</h2><blockquote><p>直接用DFS会被判为超时，所以联想到剪枝或者DP来解决时间复杂度的问题</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*需要解决的是运行超时的问题*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod<span class="token operator">=</span><span class="token number">1000000007</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">;</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//dp[i][j][cnt][v],表示走到(i,j)位置上拿走cnt个物品，最大价值为v的走法个数 </span><span class="token comment">/*2 2 21 22 122 3 21 2 32 1 514*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//即：1&lt;=C_i&lt;=13 </span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>mp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始位置拿与不拿 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>cnt<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>cnt<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;=</span><span class="token number">13</span><span class="token punctuation">;</span>v<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//在这个位置上不取 </span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token comment">//printf("%d\n",dp[i][j][cnt][v]);</span><span class="token comment">//满足条件就取 </span><span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>s<span class="token operator">&lt;</span>v<span class="token punctuation">;</span>s<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">13</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-斐波那契"><a href="#2-3-斐波那契" class="headerlink" title="2.3 斐波那契"></a>2.3 斐波那契</h2><blockquote><p>同样的，暴力会超时报错</p><p>考察的知识点是“<strong>矩阵快速幂</strong>”</p></blockquote><h2 id="2-4-兰顿蚂蚁"><a href="#2-4-兰顿蚂蚁" class="headerlink" title="2.4 兰顿蚂蚁"></a>2.4 兰顿蚂蚁</h2><blockquote><p>细心叭,读懂基本就会做了😅</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*兰顿蚂蚁5 60 0 0 0 0 00 0 0 0 0 00 0 1 0 0 00 0 0 0 0 00 0 0 0 0 02 3 L 51 33 30 0 01 1 11 1 11 1 U 60 0*/</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">;</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//0白 1黑 </span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//上、右、下、左 </span><span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> d<span class="token punctuation">;</span><span class="token keyword">int</span> dd<span class="token punctuation">;</span><span class="token comment">//0，1，2，3——代表：上、右、下、左 </span><span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %c %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">==</span><span class="token char">'U'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dd<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">==</span><span class="token char">'R'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dd<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">==</span><span class="token char">'D'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dd<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>dd<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> nx<span class="token operator">=</span>x<span class="token punctuation">,</span>ny<span class="token operator">=</span>y<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//首先转向</span><span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//右转90，顺时针</span>mp<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>dd<span class="token operator">=</span><span class="token punctuation">(</span>dd<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>mp<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>dd<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">+</span><span class="token punctuation">(</span>dd<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//向前一步</span>nx<span class="token operator">=</span>nx<span class="token operator">+</span>dx<span class="token punctuation">[</span>dd<span class="token punctuation">]</span><span class="token punctuation">;</span>ny<span class="token operator">=</span>ny<span class="token operator">+</span>dy<span class="token punctuation">[</span>dd<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-波动数列"><a href="#2-5-波动数列" class="headerlink" title="2.5 波动数列"></a>2.5 波动数列</h2><blockquote><ul><li><p>一开始想到的暴力的方法是DFS，奈何第一个数字是未知的，需要先计算Left和Right再对这个范围进行DFS，结果正确过了样例，但是“听取wa声一片”了属实😓</p></li><li><p>正解在下面第二版，用了DP，其实这题拆下来是一道0-1背包经典的DP动归</p></li></ul></blockquote><p>给大家康康0分过了样例的代码,关键是自己输出了中间生成的数列也没得问题撒，应该是规定时间没跑出结果直接判断0了：</p><p>第一版：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token comment">/*4 10 2 3*/</span>ll a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>s<span class="token punctuation">;</span>ll l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ll mod<span class="token operator">=</span><span class="token number">100000007</span><span class="token punctuation">;</span><span class="token comment">//vector&lt;ll>temp;</span>ll <span class="token function">dfs</span><span class="token punctuation">(</span>ll num<span class="token punctuation">,</span>ll sum<span class="token punctuation">,</span>ll v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//temp.push_back(v);</span>ll cnt<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>sum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//for(int i=0;i&lt;temp.size();i++)&#123;</span><span class="token comment">//printf("%lld ",temp[i]);</span><span class="token comment">//&#125;</span><span class="token comment">//printf("\n");</span><span class="token comment">//temp.pop_back();</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//temp.pop_back();</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cnt<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>sum<span class="token operator">-</span>v<span class="token punctuation">,</span>v<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token operator">+</span><span class="token function">dfs</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>sum<span class="token operator">-</span>v<span class="token punctuation">,</span>v<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token comment">//temp.pop_back();</span><span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>r<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token operator">+</span>n<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">*</span>b<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span>n<span class="token operator">+</span>b<span class="token punctuation">;</span>l<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token operator">-</span>n<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">*</span>a<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span>n<span class="token operator">-</span>a<span class="token punctuation">;</span><span class="token comment">//printf("%lld %lld\n",l,r);</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll v<span class="token operator">=</span>l<span class="token punctuation">;</span>v<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>v<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">%</span>mod<span class="token operator">+</span><span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二版</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span> <span class="token comment">//思路类似于0-1背包 </span><span class="token keyword">int</span> mod<span class="token operator">=</span><span class="token number">100000007</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1000009</span><span class="token punctuation">;</span><span class="token comment">//a出现的次数上限 </span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>s<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//子集和 </span><span class="token keyword">void</span> <span class="token function">_init_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//a为0个的时候，有一个解</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token comment">//取与不取 </span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>ll num<span class="token operator">=</span>n<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> s<span class="token operator">+=</span>num<span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token function">_init_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ll optnum<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果有i个a</span>ll temp<span class="token operator">=</span>s<span class="token operator">-</span>i<span class="token operator">*</span>optnum<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">%</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h1><ol><li><p><a href="https://blog.csdn.net/m0_51955470/article/details/114421209">地宫寻宝</a></p></li><li><p><a href="https://blog.csdn.net/the_ZED/article/details/105014767">超短的波动数列题解</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 竞赛 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF_CSP_2021_12模拟</title>
      <link href="/2022/02/23/ccf-csp-2021-12-mo-ni/"/>
      <url>/2022/02/23/ccf-csp-2021-12-mo-ni/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识点总结"><a href="#1-知识点总结" class="headerlink" title="1. 知识点总结"></a>1. 知识点总结</h1><p>从第一题到第五题，难度上升比较大：</p><table><thead><tr><th>题目编号</th><th>难度</th><th>知识点</th></tr></thead><tbody><tr><td>2021_12_1</td><td>🐸</td><td>数组</td></tr><tr><td>2021_12_2</td><td>🐸(🐸🐸)</td><td>数组（AC需要用到区间的思想）</td></tr><tr><td>2021_12_3</td><td>🐸🐸(🐸)</td><td>数组处理+模拟</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2. 分题题解"></a>2. 分题题解</h1><h2 id="2-1-序列查询"><a href="#2-1-序列查询" class="headerlink" title="2.1 序列查询"></a>2.1 序列查询</h2><p>看懂题目就可以下手了，按照题目要求创建数据结构和变量——不容易出错~</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>N<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>A<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//输入 </span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>A<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出f(0)+…+f(N-1)</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>index<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>index<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//printf("index=%d ",index);</span>sum<span class="token operator">+=</span>index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-序列查询新解"><a href="#2-2-序列查询新解" class="headerlink" title="2.2 序列查询新解"></a>2.2 序列查询新解</h2><p>直接沿用第一题的代码，稍加变换70%,会有超时的问题(应该还会有数值long long 的问题)</p><p>AC的时候需要考虑区间，因为遍历N的代价太大了，AC代码见第二版</p><ol><li>70%暴力求解代码：</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>N<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>A<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>A<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> error<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">,</span>g<span class="token punctuation">,</span>r<span class="token operator">=</span>N<span class="token operator">/</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>index<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>index<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//这里的index就是f的值 </span>f<span class="token operator">=</span>index<span class="token punctuation">;</span>g<span class="token operator">=</span>x<span class="token operator">/</span>r<span class="token punctuation">;</span>error<span class="token operator">+=</span><span class="token function">abs</span><span class="token punctuation">(</span>g<span class="token operator">-</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>AC代码：</li></ol><blockquote><p>思路：用遍历f(i)代替遍历N,即用遍历n代替遍历N~😋</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>N<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">></span>A<span class="token punctuation">;</span>ll error<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ll r<span class="token punctuation">;</span>ll <span class="token function">Getg</span><span class="token punctuation">(</span>ll index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//得到0-index区间内g(i)的和</span>ll sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>ll total_num<span class="token operator">=</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>r<span class="token punctuation">;</span>ll res_num<span class="token operator">=</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>r<span class="token punctuation">;</span>sum<span class="token operator">+=</span>r<span class="token operator">*</span>total_num<span class="token operator">*</span><span class="token punctuation">(</span>total_num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>sum<span class="token operator">+=</span>res_num<span class="token operator">*</span>total_num<span class="token punctuation">;</span><span class="token comment">//printf("编号%lld之内的和： %lld\n",index,sum);</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">cal</span><span class="token punctuation">(</span>ll left<span class="token punctuation">,</span>ll right<span class="token punctuation">,</span>ll fi<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ll sum_fi<span class="token operator">=</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>fi<span class="token punctuation">;</span><span class="token comment">//得到[left,right]区间内的f(i)的和  </span>ll sum_gi<span class="token operator">=</span><span class="token function">Getg</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">Getg</span><span class="token punctuation">(</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到[left,right]区间内的g(i)的和 </span><span class="token comment">//printf("%lld-%lld:fi=%lld gi=%lld\n",left,right,sum_fi,sum_gi); </span><span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span>sum_fi<span class="token operator">-</span>sum_gi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>A<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token keyword">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//防止越界 </span>r<span class="token operator">=</span>N<span class="token operator">/</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ll left<span class="token punctuation">,</span>right<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll fi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>fi<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>fi<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//[left,right]---->是>=A[fi]的i集合 </span>left<span class="token operator">=</span>A<span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">(</span>fi<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>right<span class="token operator">=</span>A<span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">(</span>fi<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//计算 [left,right]区间内的sum(|g(i)-f(i)|)值 </span><span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">/</span>r<span class="token operator">>=</span>fi<span class="token operator">||</span>right<span class="token operator">/</span>r<span class="token operator">&lt;=</span>fi<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//全部g>f或者g&lt;f直接计算 </span>error<span class="token operator">+=</span><span class="token function">cal</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">,</span>fi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//否则拆分成两份</span>error<span class="token operator">+=</span><span class="token function">cal</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>fi<span class="token operator">*</span>r<span class="token punctuation">,</span>fi<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">cal</span><span class="token punctuation">(</span>fi<span class="token operator">*</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">,</span>fi<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-登机牌条码"><a href="#2-3-登机牌条码" class="headerlink" title="2.3 登机牌条码"></a>2.3 登机牌条码</h2><blockquote><p>这题仔细审题的话，拿下40分不是很难，难点在于60分校验码的计算</p></blockquote><ol><li>40%得分题解</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//登机牌条码 </span><span class="token keyword">int</span> w<span class="token punctuation">,</span>s<span class="token punctuation">;</span>string str<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>num<span class="token punctuation">;</span><span class="token comment">//编码 </span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token keyword">final</span><span class="token punctuation">;</span><span class="token comment">//最后的码字 </span><span class="token keyword">bool</span> <span class="token function">isNum</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">&lt;=</span><span class="token char">'9'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">>=</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">isLower</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">&lt;=</span><span class="token char">'z'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">>=</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">isUpper</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">&lt;=</span><span class="token char">'Z'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">>=</span><span class="token char">'A'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//不考虑取余数</span>cin<span class="token operator">>></span>str<span class="token punctuation">;</span><span class="token keyword">int</span> pre<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//数字1 小写2 大写3 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isNum</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//数字 </span><span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">==</span><span class="token number">2</span><span class="token operator">||</span>pre<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//小、大写转数字 </span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pre<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isLower</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//小写 </span><span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>pre<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pre<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//大写</span><span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pre<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token operator">*</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>num<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>w<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">final</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>AC题解</li></ol><blockquote><ul><li>首先计算gx和dx</li><li>接着计算rx</li></ul></blockquote><p>看懂了题解的话，其实也不是非常难，参考博客附在下面，写得很详细了，一个坑点在于余数为<code>-</code>是判断条件，直接待多项式除法的正数会一直WAWAW~</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//登机牌条码 </span><span class="token keyword">int</span> w<span class="token punctuation">,</span>s<span class="token punctuation">;</span>string str<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>num<span class="token punctuation">;</span><span class="token comment">//编码 </span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token keyword">final</span><span class="token punctuation">;</span><span class="token comment">//最后的码字 </span><span class="token keyword">const</span> <span class="token keyword">int</span> mod<span class="token operator">=</span><span class="token number">929</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isNum</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">&lt;=</span><span class="token char">'9'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">>=</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">isLower</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">&lt;=</span><span class="token char">'z'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">>=</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">isUpper</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">&lt;=</span><span class="token char">'Z'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">>=</span><span class="token char">'A'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token operator">>></span>str<span class="token punctuation">;</span><span class="token keyword">int</span> pre<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//数字1 小写2 大写3 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isNum</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//数字 </span><span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">==</span><span class="token number">2</span><span class="token operator">||</span>pre<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//小、大写转数字 </span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pre<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isLower</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//小写 </span><span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>pre<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pre<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//大写</span><span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pre<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token operator">*</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>num<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>w<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>w<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//处理校验码</span><span class="token comment">//printf("@");</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">dx</span><span class="token punctuation">(</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fill</span><span class="token punctuation">(</span>dx<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dx<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">gx</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fill</span><span class="token punctuation">(</span>gx<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>gx<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化：-3+x </span>gx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>gx<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token comment">//计算gx</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">t</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>k<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>gx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>k<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>gx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>temp<span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>k<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>gx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>gx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token operator">+</span>t<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>gx<span class="token punctuation">[</span>k<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>temp<span class="token operator">*=</span><span class="token number">3</span><span class="token punctuation">;</span>temp<span class="token operator">%=</span>mod<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//dx赋值</span>dx<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dx<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">final</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>dx<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//求余数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dx<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> t<span class="token operator">=</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>gx<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dx<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>dx<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>gx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>dx<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>gx<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dx<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>mod<span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">-</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">-</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">final</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a>2.4</h2><h2 id="2-5"><a href="#2-5" class="headerlink" title="2.5"></a>2.5</h2><h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h1><p>1.[序列查询新解](<a href="https://blog.csdn.net/reidpa/article/details/121942425">CCF CSP 202112-2 序列查询新解_reidpa的博客-CSDN博客</a>)</p><p>2.<a href="https://blog.csdn.net/qq_44668088/article/details/122270123">登机牌条码</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程练习 </tag>
            
            <tag> CCF-CSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/02/20/dp-dan-yuan-zui-duan-lu-jing/"/>
      <url>/2022/02/20/dp-dan-yuan-zui-duan-lu-jing/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入图的顶点数目："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">int</span> vexnum<span class="token punctuation">;</span>cin <span class="token operator">>></span> vexnum<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">cost</span><span class="token punctuation">(</span>vexnum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cost[i]表示从顶点i到终点n-1的最短路径长度</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">path</span><span class="token punctuation">(</span>vexnum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//path[i]表示从顶点i到终点n-1的路径上顶点i的下一个顶点</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入图的边数："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">int</span> edgenum<span class="token punctuation">;</span>cin <span class="token operator">>></span> edgenum<span class="token punctuation">;</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">edge</span><span class="token punctuation">(</span>vexnum<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>vexnum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//edge[i][j]存储多段图中的边</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请依次输入图中各边的起点终点和路径长度："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">int</span> start<span class="token punctuation">;</span><span class="token keyword">int</span> end<span class="token punctuation">;</span><span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> edgenum<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> start <span class="token operator">>></span> end <span class="token operator">>></span> length<span class="token punctuation">;</span>edge<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> vexnum<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vexnum<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//等于零表示之间没有路</span><span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//此时找到一条更短的路</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token comment">//更新path[i]</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//更新从该节点出发的最短路径</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最短路径长度是："</span> <span class="token operator">&lt;&lt;</span> cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最短路径为："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0 ---> "</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>i <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> vexnum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" ---> "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/02/18/opendata-shi-yong-fang-fa/"/>
      <url>/2022/02/18/opendata-shi-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>1.<a href="http://www.paobushijie.com/sports-training/8052-ftp">泛函临界功率(FTP)是什么？它是如何被定义的？谈骑力、FTP与训练功率 - 跑步世界 (paobushijie.com)</a></p><p>2.</p><h1 id="OpenData使用方法"><a href="#OpenData使用方法" class="headerlink" title="OpenData使用方法"></a>OpenData使用方法</h1><h1 id="GoldenCheeta-Open-Data-Python-library"><a href="#GoldenCheeta-Open-Data-Python-library" class="headerlink" title="GoldenCheeta Open Data Python library"></a>GoldenCheeta Open Data Python library</h1><p>This is the official Python library to work with the data from the GoldenCheetah Open Data project. This data is available on the Open Science Framework (<a href="https://osf.io/6hfpz">https://osf.io/6hfpz</a>) and on AWS S3 (<a href="https://goldencheetah-opendata.s3.amazonaws.com/">https://goldencheetah-opendata.s3.amazonaws.com/</a>). For this library AWS S3 used.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><pre class="line-numbers language-none"><code class="language-none">pipenv install goldencheetah-opendata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or</p><pre class="line-numbers language-none"><code class="language-none">pip install goldencheetah-opendata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><pre class="line-numbers language-none"><code class="language-none">from opendata import OpenDataod &#x3D; OpenData()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>The library makes a clear distinction between working with remote data (AWS S3) and data that you have downloaded locally. Working with remote data makes it possible to work with data in e.g. an hosted Jupyter notebook or to play with data that you have not downloaded yet. Bare in mind that working with the remote data has a performance penalty: downloading the data is orders of magnitude slower that accessing data from disk. If you expect to use the data more often we advise you to store the data to disk (read on to see how to do that). As an added bonus you will save us some network traffic costs on our next AWS bill, yey!</p><p>By default, when you store data locally the data is stored in an <code>opendatastorage</code> directory in your home directory (<code>~/opendatastorage</code>). In general:</p><ul><li>MacOS: <code>/Users/&lt;username&gt;/opendatastorage</code></li><li>Linux: <code>/home/&lt;username&gt;/opendatastorage</code></li><li>Windows: <code>C:\Users\&lt;username&gt;\opendatastorage</code></li></ul><p>You can overwrite this location by putting a file <code>opendata.ini</code> in your working directory (generally the directory from where you execute Python) with this content:</p><pre class="line-numbers language-none"><code class="language-none">[Storage]local_storage_path &#x3D; &lt;path to your desired location&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Working-with-remote-data-storage"><a href="#Working-with-remote-data-storage" class="headerlink" title="Working with remote data storage"></a>Working with remote data storage</h3><p>List all remote athletes.</p><pre class="line-numbers language-none"><code class="language-none">for athlete in od.remote_athletes():    # do something    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>od.remote_athletes()</code> returns a generator of <code>RemoteAthlete</code> models. It is important to note that this will only do a (i.e. 1) call to our remote storage to get a list of the available athletes without actually downloading the data. Only when you access the <code>metadata</code> attribute or call <code>athlete.activities()</code> or <code>athlete.get_activities()</code> the data will be downloaded.</p><p>To get a specific athlete:</p><pre class="line-numbers language-none"><code class="language-none">athlete &#x3D; od.get_remote_athlete(&#39;0031326c-e796-4f35-8f25-d3937edca90f&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>To store this athlete athlete locally:</p><pre class="line-numbers language-none"><code class="language-none">athlete.store_locally()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>To store only the metadata:</p><pre class="line-numbers language-none"><code class="language-none">athlete.store_locally(data&#x3D;False)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>the rest of the data could always be retrieved later:</p><pre class="line-numbers language-none"><code class="language-none">from opendata.models import LocalAthletelocal_athlete &#x3D; LocalAthlete(athlete.id)local_athlete.download_remote_data()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Working-with-local-data-storage"><a href="#Working-with-local-data-storage" class="headerlink" title="Working with local data storage"></a>Working with local data storage</h3><p>List all local athletes.</p><pre class="line-numbers language-none"><code class="language-none">for athlete in od.local_athletes():    # do something    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>od.local_athletes()</code> returns a generator of <code>LocalAthlete</code> models. Here again, no data is actually loaded (from disk in this case) untill you access the <code>metadata</code> attribute or call <code>athlete.activities()</code> or <code>athlete.get_activity()</code>.</p><p>To check which athletes are available that you do not have downloaded locally:</p><pre class="line-numbers language-none"><code class="language-none">missing_athletes &#x3D; list(od.missing_athletes())print(len(missing_athletes))&gt;&gt; 168<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>To get a specific athlete:</p><pre class="line-numbers language-none"><code class="language-none">athlete &#x3D; od.get_local_athlete(&#39;0031326c-e796-4f35-8f25-d3937edca90f&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="General-usage"><a href="#General-usage" class="headerlink" title="General usage"></a>General usage</h3><pre class="line-numbers language-none"><code class="language-none">athlete.metadata[&#39;ATHLETE&#39;]&gt;&gt; &#123;&#39;gender&#39;: &#39;M&#39;, &#39;yob&#39;: &#39;2062&#39;, &#39;id&#39;: &#39;&#123;0031326c-e796-4f35-8f25-d3937edca90f&#125;&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>To get all activities for an athlete:</p><pre class="line-numbers language-none"><code class="language-none">activities &#x3D; athlete.activities()for activity in activities:    # do some calculation on the data    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>As you might have guessed, <code>athlete.activities()</code> returns a generator of <code>Activity</code> models, so to have all activities as a list:</p><pre class="line-numbers language-none"><code class="language-none">activities &#x3D; list(athlete.activities())<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This way you can access single activities by index:</p><pre class="line-numbers language-none"><code class="language-none">activity &#x3D; actitivies[99]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>To get a specific activity for an athlete by activity_id:</p><pre class="line-numbers language-none"><code class="language-none">activity &#x3D; athlete.get_activity(&#39;2018_03_17_09_29_27.csv&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The activity data for an activity is available as a Pandas DataFrame in the <code>data</code> attribute. Once again, for memory usage and performance reasons, this data is only loaded in memory once you access it.</p><pre class="line-numbers language-none"><code class="language-none">activity.data.power.plot()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://github.com/GoldenCheetah/OpenData/blob/master/opendata-python/resources/power_plot.png"><img src="https://github.com/GoldenCheetah/OpenData/raw/master/opendata-python/resources/power_plot.png" alt="png"></a></p><pre class="line-numbers language-none"><code class="language-none">activity.metadata[&#39;sport&#39;]&gt;&gt; &#39;Bike&#39;athlete.metadata[&#39;ATHLETE&#39;]&gt;&gt; &#123;&#39;gender&#39;: &#39;M&#39;, &#39;yob&#39;: &#39;2062&#39;, &#39;id&#39;: &#39;&#123;0031326c-e796-4f35-8f25-d3937edca90f&#125;&#39;&#125;activities &#x3D; list(athlete.activities())activities[99].metadata &gt;&gt; &#123;&#39;date&#39;: &#39;2017&#x2F;10&#x2F;21 12:01:56 UTC&#39;,     &#39;data&#39;: &#39;TDS-H--AGL-----&#39;,     &#39;sport&#39;: &#39;Bike&#39;,     &#39;METRICS&#39;: &#123;&#39;ride_count&#39;: &#39;1.00000&#39;,      &#39;workout_time&#39;: &#39;1077.00000&#39;,      &#39;time_riding&#39;: &#39;1072.00000&#39;,      &#39;total_distance&#39;: &#39;6.69220&#39;,      &#39;climb_rating&#39;: [&#39;0.08019&#39;, &#39;1.00000&#39;],      &#39;athlete_weight&#39;: &#39;81.00000&#39;,      &#39;elevation_gain&#39;: &#39;23.16500&#39;,      &#39;elevation_loss&#39;: &#39;9.14400&#39;,      &#39;average_speed&#39;: &#39;22.47381&#39;,      &#39;average_hr&#39;: [&#39;123.17920&#39;, &#39;1077.00000&#39;],      &#39;average_ct&#39;: [&#39;37.15861&#39;, &#39;1077.00000&#39;],      &#39;heartbeats&#39;: &#39;2211.06667&#39;,      &#39;average_temp&#39;: &#39;-255.00000&#39;,      &#39;max_heartrate&#39;: &#39;134.00000&#39;,      &#39;min_heartrate&#39;: &#39;100.00000&#39;,        ...    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>作图第二弹：PPT&amp;EXCEL</title>
      <link href="/2022/02/11/zuo-tu-di-er-dan-ppt-excel/"/>
      <url>/2022/02/11/zuo-tu-di-er-dan-ppt-excel/</url>
      
        <content type="html"><![CDATA[<h1 id="1-使用工具"><a href="#1-使用工具" class="headerlink" title="1. 使用工具"></a>1. 使用工具</h1><ul><li>PPT</li><li>EXCEL</li></ul><h1 id="2-样例以及作图细节"><a href="#2-样例以及作图细节" class="headerlink" title="2. 样例以及作图细节"></a>2. 样例以及作图细节</h1><h2 id="2-1-权重图、热力图与三维地图"><a href="#2-1-权重图、热力图与三维地图" class="headerlink" title="2.1 权重图、热力图与三维地图"></a>2.1 权重图、热力图与三维地图</h2><h3 id="2-1-1-权重图"><a href="#2-1-1-权重图" class="headerlink" title="2.1.1 权重图"></a>2.1.1 权重图</h3><h3 id="2-1-2-三维地图"><a href="#2-1-2-三维地图" class="headerlink" title="2.1.2 三维地图"></a>2.1.2 三维地图</h3><p><a href="https://support.microsoft.com/zh-cn/office/%E4%B8%89%E7%BB%B4%E5%9C%B0%E5%9B%BE%E5%85%A5%E9%97%A8-6b56a50d-3c3e-4a9e-a527-eea62a387030">【excel官方文档】</a></p><p>保存的时候，“点击‘捕获屏幕’”，复制到word即可</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2>]]></content>
      
      
      <categories>
          
          <category> 建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作图 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP论文阅读第二弹——MemNet</title>
      <link href="/2022/02/10/nlp-lun-wen-yue-du-di-er-dan-memnet/"/>
      <url>/2022/02/10/nlp-lun-wen-yue-du-di-er-dan-memnet/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PTA甲级1001-1100补丁</title>
      <link href="/2022/02/10/pta-jia-ji-1001-1100-bu-ding/"/>
      <url>/2022/02/10/pta-jia-ji-1001-1100-bu-ding/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识点总结"><a href="#1-知识点总结" class="headerlink" title="1. 知识点总结"></a>1. 知识点总结</h1><p>本次作业属于补漏~😜，总体上……前1069的题目有一些不是往届真题（似乎），所以难度和考察范围和模拟的手感不太一样，准备机试的话，个人感觉还好，适合“查漏补缺”：</p><p>按照分值排序</p><table><thead><tr><th>题号</th><th>难度</th><th>知识点</th></tr></thead><tbody><tr><td>1096</td><td>🐸</td><td>暴力+数学</td></tr><tr><td>1059</td><td>🐸</td><td>简单数学+英语阅读</td></tr><tr><td>1082</td><td>🐸🐸</td><td>字符串处理</td></tr><tr><td>1075</td><td>🐸</td><td>结构体排序+STL应用</td></tr><tr><td>1026</td><td></td><td></td></tr><tr><td>1014</td><td></td><td></td></tr><tr><td>1080</td><td></td><td></td></tr><tr><td>1049</td><td></td><td></td></tr><tr><td>1057</td><td></td><td></td></tr></tbody></table><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2. 分题题解"></a>2. 分题题解</h1><h2 id="2-1-1096-Consecutive-Factors-20-分"><a href="#2-1-1096-Consecutive-Factors-20-分" class="headerlink" title="2.1 1096 Consecutive Factors (20 分)"></a>2.1 <strong>1096 Consecutive Factors (20 分)</strong></h2><blockquote><p>暴力的话，会有一个测试点超时,注意在isOk之前判断N%i以及N%j可否为0，否则不枚举答案——AC</p></blockquote><p>感觉不是最优做法，但是PTA测试点给的样例卡时间卡的不是很严格😂，暴力AC没想到……明明看往届正确率不是很高</p><p>AC代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//最大的连续</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>ll N<span class="token punctuation">;</span> ll low<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>high<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isOk</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span>ll b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ll temp<span class="token operator">=</span>N<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">%</span>i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>temp<span class="token operator">/=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>high<span class="token operator">-</span>low<span class="token operator">&lt;</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>high<span class="token operator">=</span>b<span class="token punctuation">;</span>low<span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span>  <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll min_temp<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>min_temp<span class="token operator">=</span>N<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>N<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>min_temp<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">*</span>j<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>N<span class="token operator">%</span>j<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token function">isOk</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>high<span class="token operator">-</span>low<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>high<span class="token operator">!=</span>low<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>low<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>high<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>low<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>min_temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-1059-Prime-Factors-25-分"><a href="#2-2-1059-Prime-Factors-25-分" class="headerlink" title="2.2 1059 Prime Factors (25 分)"></a>2.2 <strong>1059 Prime Factors (25 分)</strong></h2><blockquote><p>其实不难，注意需要特判输入为1 的情况</p><p>题意：输出一个数的分解完因子的形式p^k+……，注意p=1以及k=1的情况不需要输出对应的p^k以及k</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">2</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">3</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">5</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1=1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>m<span class="token operator">=</span>n<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld="</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token function">isPrime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>n<span class="token operator">/=</span>i<span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld^%d"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">!=</span>m<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-1082-Read-Number-in-Chinese-25-分"><a href="#2-3-1082-Read-Number-in-Chinese-25-分" class="headerlink" title="2.3 1082 Read Number in Chinese (25 分)"></a>2.3 <strong>1082 Read Number in Chinese (25 分)</strong></h2><blockquote><p>感觉不是很难的字符串，但是处理起来考察思维全面性以及……莫慌</p><p>第一遍22/25，没找到错因，代码贴在第一版</p><p>订正的时候参考了别人的代码，发现自己思路果然冗余……AC代码在第二版</p></blockquote><p>第一版：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string str<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DoFu</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Fu "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>string number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"ling"</span><span class="token punctuation">,</span><span class="token string">"yi"</span><span class="token punctuation">,</span><span class="token string">"er"</span><span class="token punctuation">,</span><span class="token string">"san"</span><span class="token punctuation">,</span><span class="token string">"si"</span><span class="token punctuation">,</span><span class="token string">"wu"</span><span class="token punctuation">,</span><span class="token string">"liu"</span><span class="token punctuation">,</span><span class="token string">"qi"</span><span class="token punctuation">,</span><span class="token string">"ba"</span><span class="token punctuation">,</span><span class="token string">"jiu"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>string danwei<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"Shi"</span><span class="token punctuation">,</span><span class="token string">"Bai"</span><span class="token punctuation">,</span><span class="token string">"Qian"</span><span class="token punctuation">,</span><span class="token string">"Wan"</span><span class="token punctuation">,</span><span class="token string">"Yi"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Domin</span><span class="token punctuation">(</span><span class="token keyword">int</span> min_danwei<span class="token punctuation">,</span><span class="token keyword">int</span> max_danwei<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//1234 1千2百3十4</span><span class="token keyword">if</span><span class="token punctuation">(</span>min_danwei<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>danwei<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>min_danwei<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>danwei<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>min_danwei<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>danwei<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Domax</span><span class="token punctuation">(</span><span class="token keyword">int</span> min_danwei<span class="token punctuation">,</span><span class="token keyword">int</span> max_danwei<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>max_danwei<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>max_danwei<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>danwei<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>max_danwei<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>danwei<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> flag1<span class="token punctuation">,</span>flag2<span class="token punctuation">;</span><span class="token keyword">bool</span> numflag<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>str<span class="token punctuation">;</span><span class="token function">DoFu</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag1<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>flag2<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>numflag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos<span class="token operator">=</span>len<span class="token operator">-</span>i<span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span><span class="token keyword">int</span> min_danwei<span class="token operator">=</span>pos<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> max_danwei<span class="token operator">=</span>pos<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//0888 8088 8808 8880 </span><span class="token comment">//8080 8008 </span><span class="token comment">//</span>flag1<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//小单位一定不出现 </span><span class="token keyword">if</span><span class="token punctuation">(</span>min_danwei<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>numflag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//如果是排在最后的个位 </span><span class="token comment">//大单位不出现的可能只有一个，前面三个都是0</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>str<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>str<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>str<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag2<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>min_danwei<span class="token operator">==</span><span class="token number">2</span><span class="token operator">||</span>min_danwei<span class="token operator">==</span><span class="token number">3</span><span class="token operator">||</span>min_danwei<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果是排在十位</span><span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果下一位 为0，本位也不输出</span>numflag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>numflag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>number<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag1<span class="token operator">&amp;&amp;</span>min_danwei<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Domin</span><span class="token punctuation">(</span>min_danwei<span class="token punctuation">,</span>max_danwei<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag2<span class="token operator">&amp;&amp;</span>min_danwei<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Domax</span><span class="token punctuation">(</span>min_danwei<span class="token punctuation">,</span>max_danwei<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二版</p><h2 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a>2.4</h2><blockquote><p>不是很难的题目，不清楚为啥之前写错了，可能是审题叭</p><p>注意的是：因为有人可能一次都没有提交，所以ans遍历的时候不是按照N而是ans.size()</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">,</span>K<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>p<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">int</span> total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">bool</span> can<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>User<span class="token operator">></span>mp<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>User<span class="token operator">></span>ans<span class="token punctuation">;</span><span class="token keyword">int</span> id<span class="token punctuation">,</span>pid<span class="token punctuation">,</span>score<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>User a<span class="token punctuation">,</span>User b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>total<span class="token operator">!=</span>b<span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>total<span class="token operator">></span>b<span class="token punctuation">.</span>total<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>num<span class="token operator">!=</span>b<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>num<span class="token operator">></span>b<span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>id<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>K<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>K<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>id<span class="token punctuation">,</span><span class="token operator">&amp;</span>pid<span class="token punctuation">,</span><span class="token operator">&amp;</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token operator">==</span>mp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>User temp<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>id<span class="token operator">=</span>id<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>score<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fill</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>score<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>temp<span class="token punctuation">.</span>score<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>temp<span class="token punctuation">.</span>score<span class="token punctuation">[</span>pid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>score<span class="token punctuation">;</span>mp<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>mp<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>pid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>pid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//排序</span><span class="token keyword">for</span><span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>User<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>mp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>mp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>User temp<span class="token operator">=</span>it<span class="token operator">-></span>second<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>K<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//-2 没有提交 -1编译错误 </span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>sum<span class="token operator">+=</span>temp<span class="token punctuation">.</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>temp<span class="token punctuation">.</span>total<span class="token operator">=</span>sum<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>num<span class="token operator">=</span>num<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>can<span class="token operator">=</span>flag<span class="token punctuation">;</span>ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> rank<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>can<span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&amp;&amp;</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>total<span class="token operator">!=</span>ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>rank<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %05d"</span><span class="token punctuation">,</span>rank<span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>K<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 0"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程练习 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA甲级模拟:1124-1131</title>
      <link href="/2022/02/08/pta-jia-ji-mo-ni-1124-1131/"/>
      <url>/2022/02/08/pta-jia-ji-mo-ni-1124-1131/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识点总结"><a href="#1-知识点总结" class="headerlink" title="1. 知识点总结"></a>1. 知识点总结</h1><p>本次作业没有严格按照试卷题目编排，同时跳过了之前（久远时）做过的题目，这样安排……别问，问就是想要填满空隙的某种不知名强迫症🤣</p><p>本次作业涉及到的知识点有</p><ul><li>map+六级</li><li>二叉树</li><li><strong>优先队列</strong></li><li>深度优先搜索</li></ul><table><thead><tr><th>题号</th><th>难度</th><th>知识点</th></tr></thead><tbody><tr><td>1124</td><td>🐸🐸</td><td>数组+map，英语😱阅读</td></tr><tr><td>1125</td><td>🐸</td><td>数组，找规律</td></tr><tr><td>1127</td><td>🐸🐸</td><td>二叉树，但是只想给一个半🐸，模板，注意输出STL重排序~</td></tr><tr><td>1129</td><td>🐸🐸</td><td>优先队列+结构体排序(不算难题，但是优先队列忘记怎么处理结构体，实属不应该)</td></tr><tr><td>1130</td><td>🐸</td><td>二叉树的中序遍历和括号之间的爱恨情仇</td></tr><tr><td>1131</td><td>🐸🐸🐸</td><td>其实不应该有这个难度，看完题解😱知道是比较基础的DFS变式<strong>主要是提醒自己DFS练少了</strong></td></tr></tbody></table><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2. 分题题解"></a>2. 分题题解</h1><h2 id="2-1-第一题-1124-Raffle-for-Weibo-Followers-20-分"><a href="#2-1-第一题-1124-Raffle-for-Weibo-Followers-20-分" class="headerlink" title="2.1 第一题 1124 Raffle for Weibo Followers (20 分)"></a>2.1 第一题 <strong>1124 Raffle for Weibo Followers (20 分)</strong></h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805350803292160">【题目链接】</a></p><blockquote><p>难点在于……英文叭，没看懂他的意思，感觉不是很难的题目，但是卡在阅读理解上着实难受：</p><p>题目的意思，不规定有几个中奖的人，只需要对于输入的人，从初始位置s,每隔着n个算一次中奖，如果有人重复中，s++，跳过这个人</p></blockquote><p>第一遍照着模糊的理解写，暴力12/20,跪了😥，因为以为n是限制，然后m个人是围成一圈😶，错误理解打咩！！！正解在下面</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>s<span class="token punctuation">;</span><span class="token comment">//m种可能，转的次数，开始地方 </span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span>fid<span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span>winned<span class="token punctuation">;</span> set<span class="token operator">&lt;</span>string<span class="token operator">></span>st<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>fid<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>fid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>winned<span class="token punctuation">[</span>fid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>fid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>n<span class="token operator">||</span>s<span class="token operator">></span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Keep going..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span>ans<span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>s<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//开始的位置 </span><span class="token keyword">while</span><span class="token punctuation">(</span>cnt<span class="token operator">!=</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token operator">%=</span>m<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>winned<span class="token punctuation">[</span>fid<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>winned<span class="token punctuation">[</span>fid<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>fid<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>s<span class="token operator">+=</span>n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>s<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">//输出答案 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>订正之后：</p><p>参考柳神代码，简洁度被瞬间秒杀</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>s<span class="token punctuation">;</span><span class="token comment">//m种可能，转的次数，开始地方 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>string str<span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//是否有人中过奖 </span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span>winned<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>str<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>winned<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>winned<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>str<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>s<span class="token operator">=</span>s<span class="token operator">+</span>n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Keep going..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-第二题-1125-Chain-the-Ropes-25-分"><a href="#2-2-第二题-1125-Chain-the-Ropes-25-分" class="headerlink" title="2.2 第二题 1125 Chain the Ropes (25 分)"></a>2.2 第二题 <strong>1125 Chain the Ropes (25 分)</strong></h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805350316752896">【题目链接】</a></p><blockquote><p>找规律题，稳住心态：</p><p>先将输入的绳子长度片段按照从小到大排序，sum=(sum+v[i])/2，一直到最后，这样，短的被反复折叠，但是长的安然无恙，可以保证最后结果正确（本来以为是深搜，结果草稿纸上推了一下发现找规律比较简单~）</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">=</span><span class="token punctuation">(</span>sum<span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-第三题-1130-Infix-Expression-25-分"><a href="#2-3-第三题-1130-Infix-Expression-25-分" class="headerlink" title="2.3 第三题 1130 Infix Expression (25 分)"></a>2.3 第三题 <strong>1130 Infix Expression (25 分)</strong></h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805347921805312">【题目传送门】</a></p><blockquote><p>树的中序遍历，括号的输出需要注意，最外层的括号和叶子节点括号不需要输出，其余的在递归过程中输出括号</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> left<span class="token punctuation">;</span><span class="token keyword">int</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span>nodes<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isLeaf</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>nodes<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">isOk</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isLeaf</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isLeaf</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">preTravel</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//bool flag=isOk(root);</span><span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">isLeaf</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">preTravel</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>nodes<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">preTravel</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">,</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">isLeaf</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">bool</span> isc<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>nodes<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %d %d"</span><span class="token punctuation">,</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span><span class="token operator">&amp;</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>isc<span class="token punctuation">[</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>isc<span class="token punctuation">[</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//找到根节点 </span><span class="token keyword">int</span> root<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>root<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">preTravel</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-第四题-1129-Recommendation-System-25-分"><a href="#2-4-第四题-1129-Recommendation-System-25-分" class="headerlink" title="2.4 第四题 1129 Recommendation System (25 分)"></a>2.4 第四题 <strong>1129 Recommendation System (25 分)</strong></h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805348471259136">【题目传送门】</a></p><blockquote><p>直觉告诉我应该用优先队列，然鹅……忘记优先队列怎么用了，翻看了API……罪过罪过</p><p>优先队列+结构体</p><p>每次输出的时候还得将不同id存到vector中，输出后再存回到优先队列中</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>Node a<span class="token punctuation">,</span>Node b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>t<span class="token operator">!=</span>b<span class="token punctuation">.</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>t<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>id<span class="token operator">></span>b<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>priority_queue<span class="token operator">&lt;</span>Node<span class="token operator">></span>ans<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">50009</span><span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Node temp<span class="token punctuation">;</span><span class="token keyword">int</span> id<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span>op<span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>st<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>cnt<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d:"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> output<span class="token operator">=</span>k<span class="token operator">&lt;</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>k<span class="token operator">:</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span>output<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span>ans<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>temp<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>id<span class="token operator">!=</span>id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>op<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//存回去</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span>op<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>op<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>temp<span class="token punctuation">.</span>id<span class="token operator">=</span>id<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>t<span class="token operator">=</span>cnt<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-第五题-1127-ZigZagging-on-a-Tree-30-分"><a href="#2-5-第五题-1127-ZigZagging-on-a-Tree-30-分" class="headerlink" title="2.5 第五题 1127 ZigZagging on a Tree (30 分)"></a>2.5 第五题 <strong>1127 ZigZagging on a Tree (30 分)</strong></h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805349394006016">【题目链接】</a></p><blockquote><p>感觉PTA一般考二叉树变式比较多，但是Dij、并查集、优先队列还是得熟练掌握，不然真的白给😂，（貌似、也许、好像其他机试不会这么痴迷于树的~</p><ul><li>中序遍历+后序遍历**—&gt;**层序遍历输出结果</li><li>结构体存储层次遍历输出的结果，重新排序后按照要求输出</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>post<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>in<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> val<span class="token punctuation">;</span>Node <span class="token operator">*</span>left<span class="token punctuation">;</span>Node <span class="token operator">*</span>right<span class="token punctuation">;</span><span class="token keyword">int</span> level<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Ans</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> data<span class="token punctuation">;</span><span class="token keyword">int</span> level<span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Ans<span class="token operator">></span>ans<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Ans a<span class="token punctuation">,</span>Ans b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>level<span class="token operator">!=</span>b<span class="token punctuation">.</span>level<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>level<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>level<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>level<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//单数层，从右往左</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>cnt<span class="token operator">></span>b<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>cnt<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Node <span class="token operator">*</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> inL<span class="token punctuation">,</span><span class="token keyword">int</span> inR<span class="token punctuation">,</span><span class="token keyword">int</span> postL<span class="token punctuation">,</span><span class="token keyword">int</span> postR<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>inL<span class="token operator">></span>inR<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Node <span class="token operator">*</span>root<span class="token operator">=</span><span class="token keyword">new</span> Node<span class="token punctuation">;</span>root<span class="token operator">-></span>val<span class="token operator">=</span>post<span class="token punctuation">[</span>postR<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>inL<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>inR<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span>post<span class="token punctuation">[</span>postR<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> left_num<span class="token operator">=</span>k<span class="token operator">-</span>inL<span class="token punctuation">;</span>root<span class="token operator">-></span>left<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>inL<span class="token punctuation">,</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>postL<span class="token punctuation">,</span>postL<span class="token operator">+</span>left_num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token operator">-></span>right<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>inR<span class="token punctuation">,</span>postL<span class="token operator">+</span>left_num<span class="token punctuation">,</span>postR<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">levelTravel</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>queue<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span>q<span class="token punctuation">;</span>root<span class="token operator">-></span>level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>Node <span class="token operator">*</span>temp<span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>Node <span class="token operator">*</span>top<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>left<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span>top<span class="token operator">-></span>left<span class="token punctuation">;</span>temp<span class="token operator">-></span>level<span class="token operator">=</span>top<span class="token operator">-></span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span>top<span class="token operator">-></span>right<span class="token punctuation">;</span>temp<span class="token operator">-></span>level<span class="token operator">=</span>top<span class="token operator">-></span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//保存每一行的 </span>Ans a<span class="token punctuation">;</span>a<span class="token punctuation">.</span>level<span class="token operator">=</span>top<span class="token operator">-></span>level<span class="token punctuation">;</span>a<span class="token punctuation">.</span>data<span class="token operator">=</span>top<span class="token operator">-></span>val<span class="token punctuation">;</span>a<span class="token punctuation">.</span>cnt<span class="token operator">=</span>cnt<span class="token punctuation">;</span>ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>post<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>in<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>post<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Node<span class="token operator">*</span>root<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">levelTravel</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-6-第六题-1131-Subway-Map-30-分"><a href="#2-6-第六题-1131-Subway-Map-30-分" class="headerlink" title="2.6 第六题 1131 Subway Map (30 分)"></a>2.6 第六题 <strong>1131 Subway Map (30 分)</strong></h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805347523346432">【题目链接】</a></p><blockquote><p>碎碎念：感觉考搜索不是很多，难度的话，只要读懂题目，一般不是很卡时间（😁）~</p><p>因为花了一个下午才勉强上19……喵呜呜呜，在面壁了，所以直接看了博客的答案，柳神给的思路还是深搜……（标准简介版），有大佬说DFS在数据严格下其实是不可以的，PTA测试数据点没有非常严格，所以一般的DFS可以过</p><p>订正思路和注意点贴在第一版下面~😥</p></blockquote><p>第一版：19/30</p><p>DFS感觉手生呜呜呜</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">99999999</span></span></span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sid<span class="token punctuation">;</span><span class="token keyword">int</span> line<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>num<span class="token punctuation">,</span>sid<span class="token punctuation">;</span><span class="token keyword">int</span> sign<span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span>taken<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span><span class="token keyword">final</span><span class="token punctuation">;</span><span class="token comment">//最终答案 </span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span>lines<span class="token punctuation">;</span><span class="token comment">//每条线路经过的站点名称</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span>stop<span class="token punctuation">;</span> <span class="token comment">//每个站点属于哪个路线 </span><span class="token comment">//计算最少的站台</span><span class="token keyword">int</span> st<span class="token punctuation">,</span>ed<span class="token punctuation">;</span> <span class="token keyword">int</span> ans<span class="token punctuation">;</span><span class="token keyword">int</span> changes<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getNextSid</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> line<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> len<span class="token operator">=</span>lines<span class="token punctuation">[</span>line<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>line<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span>  lines<span class="token punctuation">[</span>line<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">getPreSid</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> line<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> len<span class="token operator">=</span>lines<span class="token punctuation">[</span>line<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>line<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> lines<span class="token punctuation">[</span>line<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> line<span class="token punctuation">,</span><span class="token keyword">int</span> gone<span class="token punctuation">,</span><span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*当前站台编号，线路，已经经过的站点个数*/</span><span class="token comment">//答案不唯一的话，输出转乘最小的 </span><span class="token comment">//printf("当前站点%04d, 当前路线:%d ,当前经过站点个数%d\n",pos,line,gone); </span>gone<span class="token operator">++</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">=</span>sign<span class="token punctuation">;</span>Node node<span class="token punctuation">;</span>node<span class="token punctuation">.</span>line<span class="token operator">=</span>line<span class="token punctuation">;</span>node<span class="token punctuation">.</span>sid<span class="token operator">=</span>pos<span class="token punctuation">;</span>taken<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>gone<span class="token operator">></span>ans<span class="token operator">||</span><span class="token punctuation">(</span>gone<span class="token operator">==</span>ans<span class="token operator">&amp;&amp;</span>cnt<span class="token operator">></span>changes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//结束，不需要继续探索 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pos<span class="token operator">==</span>ed<span class="token operator">&amp;&amp;</span>ans<span class="token operator">></span>gone<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>pos<span class="token operator">==</span>ed<span class="token operator">&amp;&amp;</span>ans<span class="token operator">==</span>gone<span class="token operator">&amp;&amp;</span>cnt<span class="token operator">&lt;</span>changes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span>gone<span class="token punctuation">;</span><span class="token keyword">final</span><span class="token operator">=</span>taken<span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//探索 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>stop<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> tline<span class="token operator">=</span>stop<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//下一站： </span><span class="token keyword">int</span> nextpos<span class="token operator">=</span><span class="token function">getNextSid</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>tline<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> nc<span class="token operator">=</span>cnt<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tline<span class="token operator">!=</span>line<span class="token punctuation">)</span>nc<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>nextpos<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>vis<span class="token punctuation">[</span>nextpos<span class="token punctuation">]</span><span class="token operator">!=</span>sign<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">dfs</span><span class="token punctuation">(</span>nextpos<span class="token punctuation">,</span>tline<span class="token punctuation">,</span>gone<span class="token punctuation">,</span>nc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回溯 </span>taken<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>nextpos<span class="token punctuation">]</span><span class="token operator">=</span>sign<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//上一站：</span><span class="token keyword">int</span> prepos<span class="token operator">=</span><span class="token function">getPreSid</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>tline<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>prepos<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>vis<span class="token punctuation">[</span>prepos<span class="token punctuation">]</span><span class="token operator">!=</span>sign<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">dfs</span><span class="token punctuation">(</span>prepos<span class="token punctuation">,</span>tline<span class="token punctuation">,</span>gone<span class="token punctuation">,</span>nc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回溯 </span>taken<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>prepos<span class="token punctuation">]</span><span class="token operator">=</span>sign<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>lines<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>stop<span class="token punctuation">[</span>sid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sign<span class="token operator">=</span>i<span class="token punctuation">;</span>taken<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>st<span class="token punctuation">,</span><span class="token operator">&amp;</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token operator">=</span>INF<span class="token punctuation">;</span>changes<span class="token operator">=</span>INF<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>stop<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">dfs</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span>stop<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出答案 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> flag1<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span>flag2<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//起点、终点是否输出过 </span><span class="token keyword">int</span> s<span class="token operator">=</span><span class="token keyword">final</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sid<span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token keyword">final</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sid<span class="token punctuation">,</span>myline<span class="token operator">=</span><span class="token keyword">final</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>line<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span><span class="token keyword">final</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">final</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>line<span class="token operator">==</span>myline<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>e<span class="token operator">=</span><span class="token keyword">final</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>sid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//不一样</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Take Line#%d from %04d to %04d.\n"</span><span class="token punctuation">,</span>myline<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> s<span class="token operator">=</span><span class="token keyword">final</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sid<span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token keyword">final</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>sid<span class="token punctuation">,</span>myline<span class="token operator">=</span><span class="token keyword">final</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>line<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Take Line#%d from %04d to %04d.\n"</span><span class="token punctuation">,</span>myline<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DFS版本：</p><p>忽略Line路线的影响，先当作图论中的寻找最短路径问题，深搜展开，最后判断的时候先比较路径长度，长度一致的情况下比较线路站次数。</p><p>在传统的dfs求最短路径上，加上了<code>lines【i】【j】</code>数组存储某路段属于哪一个路线Line(<strong>因为题目中明确说没有重合的路段，只有重合的站点，再次反映审题的重要性！！！！</strong>)</p><ul><li>图论（DFS最短路径）</li><li>STL存储答案</li><li>最后路线长度相同时，<code>transCount(temppath)</code>函数另外计算转站次数~</li></ul></blockquote><p>第二版：AC</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">99999999</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span><span class="token function">graph</span><span class="token punctuation">(</span>maxn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存储图_站点之间的连接关系 </span><span class="token keyword">int</span> lines<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>path<span class="token punctuation">,</span>temppath<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>num<span class="token punctuation">,</span>sid<span class="token punctuation">;</span> <span class="token keyword">int</span> st<span class="token punctuation">,</span>ed<span class="token punctuation">,</span>pre<span class="token punctuation">;</span><span class="token keyword">int</span> minCnt<span class="token punctuation">,</span>minTrans<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">transCount</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>temppath<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> len<span class="token operator">=</span>temppath<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> pre<span class="token operator">=</span>temppath<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sid<span class="token operator">=</span>temppath<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> preLine<span class="token operator">=</span>lines<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>sid<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pre<span class="token operator">=</span>temppath<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>sid<span class="token operator">=</span>temppath<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>sid<span class="token punctuation">]</span><span class="token operator">!=</span>preLine<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">++</span><span class="token punctuation">;</span>preLine<span class="token operator">=</span>lines<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>sid<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> cnt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//当前车站号码，走过的站数</span><span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">==</span>ed<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cnt<span class="token operator">&lt;</span>minCnt<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span>minCnt<span class="token operator">&amp;&amp;</span><span class="token function">transCount</span><span class="token punctuation">(</span>temppath<span class="token punctuation">)</span><span class="token operator">&lt;</span>minTrans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//符合条件</span><span class="token comment">//printf("pos==%d\n",pos);</span><span class="token comment">//printf("debug:%d %d    real:%d %d\n",temppath[0],temppath[temppath.size()-1],st,ed); </span>minCnt<span class="token operator">=</span>cnt<span class="token punctuation">;</span>minTrans<span class="token operator">=</span><span class="token function">transCount</span><span class="token punctuation">(</span>temppath<span class="token punctuation">)</span><span class="token punctuation">;</span>path<span class="token operator">=</span>temppath<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">==</span>ed<span class="token operator">||</span>cnt<span class="token operator">></span>minCnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//深搜</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>graph<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> newpos<span class="token operator">=</span>graph<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>newpos<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis<span class="token punctuation">[</span>newpos<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>temppath<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>newpos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>newpos<span class="token punctuation">,</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回溯</span>vis<span class="token punctuation">[</span>newpos<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>temppath<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>graph<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>graph<span class="token punctuation">[</span>sid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>lines<span class="token punctuation">[</span>sid<span class="token punctuation">]</span><span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>lines<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>sid<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>pre<span class="token operator">=</span>sid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>st<span class="token punctuation">,</span><span class="token operator">&amp;</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span>minCnt<span class="token operator">=</span>inf<span class="token punctuation">;</span>minTrans<span class="token operator">=</span>inf<span class="token punctuation">;</span>temppath<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>temppath<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>minCnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出答案</span><span class="token keyword">int</span> s<span class="token operator">=</span>st<span class="token punctuation">,</span>len<span class="token operator">=</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> preLine<span class="token operator">=</span>lines<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>path<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>path<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span>preLine<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Take Line#%d from %04d to %04d.\n"</span><span class="token punctuation">,</span>preLine<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token punctuation">,</span>path<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> s<span class="token operator">=</span>path<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>preLine<span class="token operator">=</span>lines<span class="token punctuation">[</span>path<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>path<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//最后输出</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Take Line#%d from %04d to %04d.\n"</span><span class="token punctuation">,</span>lines<span class="token punctuation">[</span>path<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ed<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token punctuation">,</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//for(int j=1;j&lt;len;j++)&#123;</span><span class="token comment">//printf("line#%d: %04d->%04d\n",lines[path[j-1]][path[j]],path[j-1],path[j]);</span><span class="token comment">//&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>挖个坑，我觉得Dij也是可以的~</p><h1 id="3-参考链接"><a href="#3-参考链接" class="headerlink" title="3. 参考链接"></a>3. 参考链接</h1><ol><li><a href="https://blog.csdn.net/liuchuo/article/details/60467398">1124题解——柳神</a></li><li><a href="https://blog.csdn.net/chent86/article/details/78986875">C++优先队列在结构体中使用</a></li><li><a href="https://blog.csdn.net/liuchuo/article/details/68925193">1131题解——柳神（DFS）</a></li><li><a href="https://www.acwing.com/blog/content/3012/">1131题解——效率</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程练习 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA甲级模拟1119-1123</title>
      <link href="/2022/02/07/pta-jia-ji-mo-ni-1119-1123/"/>
      <url>/2022/02/07/pta-jia-ji-mo-ni-1119-1123/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识点总结"><a href="#1-知识点总结" class="headerlink" title="1. 知识点总结"></a>1. 知识点总结</h1><p>本次作业，涉及到的知识点有：</p><ul><li>STL</li><li>二叉树（后序+前序）</li><li>AVL二叉平衡树</li></ul><p>因为是凑得题目，所以按照难度分值排序</p><table><thead><tr><th>题号</th><th>难度</th><th>题型</th></tr></thead><tbody><tr><td>1120</td><td>🐸</td><td>set基础</td></tr><tr><td>1121</td><td>🐸</td><td>map键值判断是否存在</td></tr><tr><td>1119</td><td>🐸🐸😅</td><td>格式巨坑😓，前序+后序输出中序，会根据数据结构推解题思路即可</td></tr><tr><td>1123</td><td>🐸🐸🐸</td><td><strong>强调AVL树，</strong>考的感觉不多，但是自己还不会盲打，打咩！</td></tr></tbody></table><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2. 分题题解"></a>2. 分题题解</h1><h2 id="2-1-第一题：1120-Friend-Numbers-20-分"><a href="#2-1-第一题：1120-Friend-Numbers-20-分" class="headerlink" title="2.1 第一题：1120 Friend Numbers (20 分)"></a>2.1 第一题：<strong>1120 Friend Numbers (20 分)</strong></h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805352925609984">【题目传送门】</a></p><blockquote><p>简单题,用了set,所以不需要自己重新排序</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>num<span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>fid<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">countDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">+=</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>x<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token function">countDigit</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fid<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>fid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>fid<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>fid<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>fid<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-第二题：1121-Damn-Single-25-分"><a href="#2-2-第二题：1121-Damn-Single-25-分" class="headerlink" title="2.2 第二题：1121 Damn Single (25 分)"></a>2.2 第二题：<strong>1121 Damn Single (25 分)</strong></h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805352359378944">【题目传送门】</a></p><blockquote><p>碎碎念：好家伙，标题学到了，下次别出了😅,有被冒犯到</p><ul><li><p>考察的是基本的图论，检查M个客人中那些单身或者已婚但是配偶未到场的即可</p></li><li><p>set存储避免了按照ID升序排序的麻烦</p></li></ul><p>简单题，之前也遇到过</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token keyword">int</span> M<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>couple<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span>iscome<span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>dog<span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>guest<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>id<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>couple<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">;</span>couple<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>guest<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>iscome<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>guest<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>guest<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>couple<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//情侣中不存在 </span>dog<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>iscome<span class="token punctuation">[</span>couple<span class="token punctuation">[</span><span class="token operator">*</span>it<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//有情侣但是情侣不在 </span>dog<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dog<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>dog<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>dog<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>dog<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%05d"</span><span class="token punctuation">,</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-第三题：1119-Pre-and-Post-order-Traversals-30-分"><a href="#2-3-第三题：1119-Pre-and-Post-order-Traversals-30-分" class="headerlink" title="2.3 第三题：1119 Pre- and Post-order Traversals (30 分)"></a>2.3 第三题：<strong>1119 Pre- and Post-order Traversals (30 分)</strong></h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805353470869504">【题目传送门】</a></p><blockquote><p>疯了，卡了一个小时的格式错误爆零，结果是最后要输出一个printf(“\n”)，麻了🙄</p><ul><li>注意最后输出printf(“\n”)</li><li>多解的情况在于preR-preL+1==2的时候，没有办法确定具体是左还是右</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>pre<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>post<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> val<span class="token punctuation">;</span>Node <span class="token operator">*</span>left<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>Node <span class="token operator">*</span>right<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//Yes---唯一</span><span class="token comment">//No--- 不唯一 </span>Node <span class="token operator">*</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> preL<span class="token punctuation">,</span><span class="token keyword">int</span> preR<span class="token punctuation">,</span><span class="token keyword">int</span> postL<span class="token punctuation">,</span><span class="token keyword">int</span> postR<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印每次</span><span class="token comment">//printf("post:");</span><span class="token comment">//for(int i=postL;i&lt;=postR;i++)printf("%d ",post[i]); </span><span class="token comment">//printf("\n pre:");</span><span class="token comment">//for(int i=preL;i&lt;=preR;i++)printf("%d ",pre[i]); </span><span class="token comment">//printf("\n");</span><span class="token comment">//printf("postnum%d prenum%d\n",postR-postL+1,preR-preL+1);</span><span class="token keyword">if</span><span class="token punctuation">(</span>preR<span class="token operator">-</span>preL<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>postR<span class="token operator">-</span>postL<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>preR<span class="token operator">&lt;</span>preL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>preR<span class="token operator">==</span>preL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node <span class="token operator">*</span>root<span class="token operator">=</span><span class="token keyword">new</span> Node<span class="token punctuation">;</span>root<span class="token operator">-></span>val<span class="token operator">=</span>pre<span class="token punctuation">[</span>preL<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//找到公共左节点，右节点</span>Node <span class="token operator">*</span>root<span class="token operator">=</span><span class="token keyword">new</span> Node<span class="token punctuation">;</span>root<span class="token operator">-></span>val<span class="token operator">=</span>pre<span class="token punctuation">[</span>preL<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token keyword">int</span> preVal<span class="token operator">=</span>pre<span class="token punctuation">[</span>preL<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>postL<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>postR<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>post<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span>preVal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> left_num<span class="token operator">=</span>k<span class="token operator">-</span>postL<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>root<span class="token operator">-></span>left<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>preL<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>preL<span class="token operator">+</span>left_num<span class="token punctuation">,</span>postL<span class="token punctuation">,</span>postL<span class="token operator">+</span>left_num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token operator">-></span>right<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>preL<span class="token operator">+</span>left_num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>preR<span class="token punctuation">,</span>postL<span class="token operator">+</span>left_num<span class="token punctuation">,</span>postR<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> ok<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>in<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">inTravel</span><span class="token punctuation">(</span>Node<span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">inTravel</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>in<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">inTravel</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>pre<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>post<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>post<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Node <span class="token operator">*</span>root<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印结果 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">inTravel</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>in<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-第四题：-1123-Is-It-a-Complete-AVL-Tree-30-分"><a href="#2-4-第四题：-1123-Is-It-a-Complete-AVL-Tree-30-分" class="headerlink" title="2.4 第四题： 1123 Is It a Complete AVL Tree (30 分)"></a>2.4 第四题： <strong>1123 Is It a Complete AVL Tree (30 分)</strong></h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805351302414336">【题目传送门】</a></p><blockquote><p>二叉平衡树：说实话好久没看模板忘光了😱~</p><p>下面是看《算法笔记》找回来的一点点记忆，考前绝对是必看知识点（万一考到，基本上不看很难立马推出来┗|｀O′|┛ 嗷~~）</p><ul><li>完全二叉树：倒数第二层单独判断，其余层（除了倒数第一层）必须是满的</li><li>AVL树</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>nodes<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> val<span class="token punctuation">;</span><span class="token keyword">int</span> height<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>Node<span class="token operator">*</span>left<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>Node<span class="token operator">*</span>right<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>Node<span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> root<span class="token operator">-></span>height<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>Node<span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">getHeight</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">updateHeight</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> <span class="token operator">&amp;</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>root<span class="token operator">-></span>height<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getHeight</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">L</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> <span class="token operator">&amp;</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node <span class="token operator">*</span>temp<span class="token operator">=</span>root<span class="token operator">-></span>right<span class="token punctuation">;</span>root<span class="token operator">-></span>right<span class="token operator">=</span>temp<span class="token operator">-></span>left<span class="token punctuation">;</span>temp<span class="token operator">-></span>left<span class="token operator">=</span>root<span class="token punctuation">;</span><span class="token function">updateHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">updateHeight</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">R</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> <span class="token operator">&amp;</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node <span class="token operator">*</span>temp<span class="token operator">=</span>root<span class="token operator">-></span>left<span class="token punctuation">;</span>root<span class="token operator">-></span>left<span class="token operator">=</span>temp<span class="token operator">-></span>right<span class="token punctuation">;</span>temp<span class="token operator">-></span>right<span class="token operator">=</span>root<span class="token punctuation">;</span><span class="token function">updateHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">updateHeight</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> <span class="token operator">&amp;</span>root<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>root<span class="token operator">=</span><span class="token keyword">new</span> Node<span class="token punctuation">;</span>root<span class="token operator">-></span>val<span class="token operator">=</span>val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token operator">&lt;</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//插入到左子树 </span><span class="token function">build</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">updateHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新根节点在内树的高度</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//左边</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//LL</span><span class="token function">R</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//LR形状</span><span class="token function">L</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">R</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">build</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">updateHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新根节点在内树的高度</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//右边</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//RR</span><span class="token function">L</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//RL形状</span><span class="token function">R</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">L</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//层次遍历</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">int</span> max_level<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">levelTravel</span><span class="token punctuation">(</span>Node<span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//层次遍历最后一层，要 </span>queue<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span>q<span class="token punctuation">;</span>root<span class="token operator">-></span>height<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> ok<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node<span class="token operator">*</span>top<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>max_level<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>max_level<span class="token punctuation">,</span>top<span class="token operator">-></span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Node <span class="token operator">*</span>temp<span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>left<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span>top<span class="token operator">-></span>left<span class="token punctuation">;</span>temp<span class="token operator">-></span>height<span class="token operator">=</span>top<span class="token operator">-></span>height<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ok<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>top<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span>top<span class="token operator">-></span>right<span class="token punctuation">;</span>temp<span class="token operator">-></span>height<span class="token operator">=</span>top<span class="token operator">-></span>height<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>Node<span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>queue<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span>q<span class="token punctuation">;</span>root<span class="token operator">-></span>height<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> ok<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">int</span> nu<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node<span class="token operator">*</span>top<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>max_level<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>max_level<span class="token punctuation">,</span>top<span class="token operator">-></span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Node <span class="token operator">*</span>temp<span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>left<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span>top<span class="token operator">-></span>left<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span>top<span class="token operator">-></span>right<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断</span><span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>left<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>top<span class="token operator">-></span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>height<span class="token operator">&lt;</span>max_level<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>top<span class="token operator">-></span>left<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>top<span class="token operator">-></span>right<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>height<span class="token operator">==</span>max_level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>nu<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>top<span class="token operator">-></span>left<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>top<span class="token operator">-></span>right<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>nu<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nu<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>top<span class="token operator">-></span>left<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">||</span>top<span class="token operator">-></span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>nodes<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Node <span class="token operator">*</span>root<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">build</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出答案 </span><span class="token function">levelTravel</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">check</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对比</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h1><ol><li><p><a href="https://blog.csdn.net/pzhw520hchy/article/details/77945713">C++中如何判断map的key值是否存在</a></p></li><li><p>《算法笔记》AVL树part</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程练习 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B先生常见算法</title>
      <link href="/2022/02/07/b-chang-jian-suan-fa/"/>
      <url>/2022/02/07/b-chang-jian-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="1-常见离散型算法"><a href="#1-常见离散型算法" class="headerlink" title="1. 常见离散型算法"></a>1. 常见离散型算法</h1><blockquote><p>这里补充一个求函数极值的方法：<a href="https://zhuanlan.zhihu.com/p/258719725">【Frank-Wolfe】</a></p></blockquote><h2 id="1-1-禁忌搜索算法"><a href="#1-1-禁忌搜索算法" class="headerlink" title="1.1 禁忌搜索算法"></a>1.1 禁忌搜索算法</h2><blockquote><p>常见使用场景：</p><p>求解最优（条件：）</p></blockquote><h3 id="1-1-1-概念"><a href="#1-1-1-概念" class="headerlink" title="1.1.1 概念"></a>1.1.1 概念</h3><p>一种优化算法，<a href="https://www.cnblogs.com/dengfaheng/p/9737556.html#:~:text=%E7%A6%81%E5%BF%8C%EF%BC%88Tabu%20Search%EF%BC%89%E7%AE%97%E6%B3%95%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BA%9A%E5%90%AF%E5%8F%91%E5%BC%8F,%28meta-heuristic%29%E9%9A%8F%E6%9C%BA%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%EF%BC%8C%E5%AE%83%E4%BB%8E%E4%B8%80%E4%B8%AA%E5%88%9D%E5%A7%8B%E5%8F%AF%E8%A1%8C%E8%A7%A3%E5%87%BA%E5%8F%91%EF%BC%8C%E9%80%89%E6%8B%A9%E4%B8%80%E7%B3%BB%E5%88%97%E7%9A%84%E7%89%B9%E5%AE%9A%E6%90%9C%E7%B4%A2%E6%96%B9%E5%90%91%EF%BC%88%E7%A7%BB%E5%8A%A8%EF%BC%89%E4%BD%9C%E4%B8%BA%E8%AF%95%E6%8E%A2%EF%BC%8C%E9%80%89%E6%8B%A9%E5%AE%9E%E7%8E%B0%E8%AE%A9%E7%89%B9%E5%AE%9A%E7%9A%84%E7%9B%AE%E6%A0%87%E5%87%BD%E6%95%B0%E5%80%BC%E5%8F%98%E5%8C%96%E6%9C%80%E5%A4%9A%E7%9A%84%E7%A7%BB%E5%8A%A8%E3%80%82.%20%E4%B8%BA%E4%BA%86%E9%81%BF%E5%85%8D%E9%99%B7%E5%85%A5%E5%B1%80%E9%83%A8%E6%9C%80%E4%BC%98%E8%A7%A3%EF%BC%8CTS%E6%90%9C%E7%B4%A2%E4%B8%AD%E9%87%87%E7%94%A8%E4%BA%86%E4%B8%80%E7%A7%8D%E7%81%B5%E6%B4%BB%E7%9A%84%22%E8%AE%B0%E5%BF%86%22%E6%8A%80%E6%9C%AF%EF%BC%8C%E5%AF%B9%E5%B7%B2%E7%BB%8F%E8%BF%9B%E8%A1%8C%E7%9A%84%E4%BC%98%E5%8C%96%E8%BF%87%E7%A8%8B%E8%BF%9B%E8%A1%8C%E8%AE%B0%E5%BD%95%E5%92%8C%E9%80%89%E6%8B%A9%EF%BC%8C%E6%8C%87%E5%AF%BC%E4%B8%8B%E4%B8%80%E6%AD%A5%E7%9A%84%E6%90%9C%E7%B4%A2%E6%96%B9%E5%90%91%EF%BC%8C%E8%BF%99%E5%B0%B1%E6%98%AFTabu%E8%A1%A8%E7%9A%84%E5%BB%BA%E7%AB%8B%E3%80%82.">【博客解释】</a></p><p>可以求解最优问题</p><h3 id="1-1-2-python实现禁忌搜索法——旅行商问题"><a href="#1-1-2-python实现禁忌搜索法——旅行商问题" class="headerlink" title="1.1.2 python实现禁忌搜索法——旅行商问题"></a>1.1.2 python实现禁忌搜索法——旅行商问题</h3><p><font color='orange'>旅行推销员问题是图论中最著名的问题之一，即“已给一个n个点的完全图，每条边都有一个长度，求总长度最短的经过每个顶点正好一次的封闭回路”。</font></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python#_<span class="token operator">*</span>_ coding<span class="token operator">:</span>utf<span class="token operator">-</span><span class="token number">8</span> _<span class="token operator">*</span>_  <span class="token keyword">import</span> <span class="token module">math</span><span class="token keyword">import</span> <span class="token module">random</span><span class="token keyword">import</span> <span class="token module">numpy</span> as np <span class="token keyword">import</span> <span class="token module">matplotlib<span class="token punctuation">.</span>pyplot</span> as pltfrom mpl_toolkits<span class="token punctuation">.</span>mplot3d <span class="token keyword">import</span> <span class="token module">Axes3D</span><span class="token keyword">import</span> <span class="token module">sys</span>from numpy<span class="token punctuation">.</span>matlib <span class="token keyword">import</span> <span class="token module">rand</span>from matplotlib<span class="token punctuation">.</span>mlab <span class="token keyword">import</span> <span class="token module">dist</span>from matplotlib<span class="token punctuation">.</span>artist <span class="token keyword">import</span> <span class="token module">getp</span><span class="token keyword">import</span> <span class="token module">copy</span>from test<span class="token punctuation">.</span>test__locale <span class="token keyword">import</span> <span class="token module">candidate_locales</span>from cProfile <span class="token keyword">import</span> <span class="token module">run</span>#初始三十个城市坐标city_x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">71</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">71</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">82</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>city_y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">71</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span>#城市数量n <span class="token operator">=</span> <span class="token number">30</span>distance <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> col in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> raw in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>#禁忌表tabu_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>tabu_time <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>#当前禁忌对象数量current_tabu_num <span class="token operator">=</span> <span class="token number">0</span>#禁忌长度，即禁忌期限tabu_limit <span class="token operator">=</span> <span class="token number">50</span>#候选集candidate <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> col in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> raw in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">]</span>candidate_distance <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> col in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">]</span>#最佳路径以及最佳距离best_route <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>best_distance <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsizecurrent_route <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>current_distance <span class="token operator">=</span> <span class="token number">0.0</span>def <span class="token function">greedy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>    #通过贪婪算法确定初始r值，也就是初始信息素浓度           sum <span class="token operator">=</span> <span class="token number">0.0</span>    #必须实例化一个一个赋值，不然只是把地址赋值，牵一发而动全身    dis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> col in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> raw in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token keyword">for</span> j in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span>            dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        #进行贪婪选择——每次都选择距离最近的    id <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token keyword">for</span> j in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span>            dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize        minvalue <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">29</span><span class="token operator">:</span>            sum <span class="token operator">+=</span> minvalue        visited<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>        id <span class="token operator">=</span> dis<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>minvalue<span class="token punctuation">)</span>    sum <span class="token operator">+=</span> distance<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>visited<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> visited#构建初始参考距离矩阵def <span class="token function">getdistance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token keyword">for</span> j in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span>            x <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>city_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> city_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>            y <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>city_y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> city_y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>            distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token keyword">for</span> j in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span>            <span class="token keyword">if</span> distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">:</span>                distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize                #计算总距离def <span class="token function">cacl_best</span><span class="token punctuation">(</span>rou<span class="token punctuation">)</span><span class="token operator">:</span>    sumdis <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span>        sumdis <span class="token operator">+=</span> distance<span class="token punctuation">[</span>rou<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rou<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    sumdis <span class="token operator">+=</span> distance<span class="token punctuation">[</span>rou<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rou<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>         <span class="token keyword">return</span> sumdis#初始设置def <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>    global best_route    global best_distance    global tabu_time    global current_tabu_num    global current_distance    global current_route    global tabu_list    #得到初始解以及初始距离    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">current</span><span class="token expression">_route <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> </span></span>    current_route <span class="token operator">=</span> <span class="token function">greedy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    best_route <span class="token operator">=</span> copy<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>current_route<span class="token punctuation">)</span>    #函数内部修改全局变量的值    current_distance <span class="token operator">=</span> <span class="token function">cacl_best</span><span class="token punctuation">(</span>current_route<span class="token punctuation">)</span>    best_distance <span class="token operator">=</span> current_distance        #置禁忌表为空    tabu_list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    tabu_time<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    current_tabu_num <span class="token operator">=</span> <span class="token number">0</span>#交换数组两个元素def <span class="token function">exchange</span><span class="token punctuation">(</span>index1<span class="token punctuation">,</span> index2<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token operator">:</span>    current_list <span class="token operator">=</span> copy<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    current <span class="token operator">=</span> current_list<span class="token punctuation">[</span>index1<span class="token punctuation">]</span>    current_list<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">=</span> current_list<span class="token punctuation">[</span>index2<span class="token punctuation">]</span>    current_list<span class="token punctuation">[</span>index2<span class="token punctuation">]</span> <span class="token operator">=</span> current    <span class="token keyword">return</span> current_list        #得到邻域 候选解def <span class="token function">get_candidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>    global best_route    global best_distance    global current_tabu_num    global current_distance    global current_route    global tabu_list    #存储两个交换的位置    exchange_position <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    temp <span class="token operator">=</span> <span class="token number">0</span>    #随机选取邻域    <span class="token keyword">while</span> True<span class="token operator">:</span>        current <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">print</span><span class="token expression"><span class="token punctuation">(</span>current<span class="token punctuation">)</span></span></span>        <span class="token keyword">if</span> current <span class="token operator">not</span> in exchange_position<span class="token operator">:</span>            exchange_position<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>            candidate<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">exchange</span><span class="token punctuation">(</span>current<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> current<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> current_route<span class="token punctuation">)</span>            <span class="token keyword">if</span> candidate<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">not</span> in tabu_list<span class="token operator">:</span>                candidate_distance<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cacl_best</span><span class="token punctuation">(</span>candidate<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span>                temp <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> temp <span class="token operator">>=</span> <span class="token number">200</span><span class="token operator">:</span>                <span class="token keyword">break</span>                    #得到候选解中的最优解    candidate_best <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>candidate_distance<span class="token punctuation">)</span>    best_index <span class="token operator">=</span> candidate_distance<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>candidate_best<span class="token punctuation">)</span>            current_distance <span class="token operator">=</span> candidate_best    current_route <span class="token operator">=</span> copy<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>candidate<span class="token punctuation">[</span>best_index<span class="token punctuation">]</span><span class="token punctuation">)</span>    #与当前最优解进行比较         <span class="token keyword">if</span> current_distance <span class="token operator">&lt;</span> best_distance<span class="token operator">:</span>        best_distance <span class="token operator">=</span> current_distance        best_route <span class="token operator">=</span> copy<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>current_route<span class="token punctuation">)</span>        #加入禁忌表    tabu_list<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>candidate<span class="token punctuation">[</span>best_index<span class="token punctuation">]</span><span class="token punctuation">)</span>    tabu_time<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tabu_limit<span class="token punctuation">)</span>    current_tabu_num <span class="token operator">+=</span> <span class="token number">1</span>        #更新禁忌表以及禁忌期限def <span class="token function">update_tabu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>    global current_tabu_num    global tabu_time    global tabu_list        del_num <span class="token operator">=</span> <span class="token number">0</span>    temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> col in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    #更新步长    tabu_time <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">for</span> x in tabu_time<span class="token punctuation">]</span>    #如果达到期限，释放    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span>current_tabu_num<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token keyword">if</span> tabu_time<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">:</span>            del_num <span class="token operator">+=</span> <span class="token number">1</span>            tabu_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp               current_tabu_num <span class="token operator">-=</span> del_num            <span class="token keyword">while</span> <span class="token number">0</span> in tabu_time<span class="token operator">:</span>        tabu_time<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> temp in tabu_list<span class="token operator">:</span>        tabu_list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>            def <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>    result_x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> col in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    result_y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> col in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span>        result_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> city_x<span class="token punctuation">[</span>best_route<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        result_y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> city_y<span class="token punctuation">[</span>best_route<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>    result_x<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> result_x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result_y<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> result_y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token function">print</span><span class="token punctuation">(</span>result_x<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>result_y<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span><span class="token function">xlim</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  # 限定横轴的范围    plt<span class="token punctuation">.</span><span class="token function">ylim</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  # 限定纵轴的范围    plt<span class="token punctuation">.</span><span class="token function">plot</span><span class="token punctuation">(</span>result_x<span class="token punctuation">,</span> result_y<span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token char">'>'</span><span class="token punctuation">,</span> mec<span class="token operator">=</span><span class="token char">'r'</span><span class="token punctuation">,</span> mfc<span class="token operator">=</span><span class="token char">'w'</span><span class="token punctuation">,</span>label<span class="token operator">=</span>u<span class="token char">'Route'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span><span class="token function">legend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  # 让图例生效    plt<span class="token punctuation">.</span><span class="token function">margins</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span><span class="token function">subplots_adjust</span><span class="token punctuation">(</span>bottom<span class="token operator">=</span><span class="token number">0.15</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span><span class="token function">xlabel</span><span class="token punctuation">(</span>u<span class="token string">"x"</span><span class="token punctuation">)</span> #X轴标签    plt<span class="token punctuation">.</span><span class="token function">ylabel</span><span class="token punctuation">(</span>u<span class="token string">"y"</span><span class="token punctuation">)</span> #Y轴标签    plt<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"TSP Solution"</span><span class="token punctuation">)</span> #标题        plt<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                      def <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token function">getdistance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    runtime <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"迭代次数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> rt in <span class="token function">range</span><span class="token punctuation">(</span>runtime<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token function">get_candidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">update_tabu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"当前距离："</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>current_distance<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>current_route<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"最优距离："</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span>best_route<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>best_distance<span class="token punctuation">)</span>    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token operator">:</span>    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-多目标优化"><a href="#1-2-多目标优化" class="headerlink" title="1.2 多目标优化"></a>1.2 多目标优化</h2><blockquote><p>使用场景：</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/28057405">一个开源的Python库</a></p><h2 id="1-3-元胞自动机"><a href="#1-3-元胞自动机" class="headerlink" title="1.3 元胞自动机"></a>1.3 元胞自动机</h2><blockquote><p>使用场景：</p><p>1、容易与GIS、遥感数据处理等系统结合</p><p>2、城市发展演变、土地利用变化</p><p>3、应用于物理模拟，生物模拟等领域</p><p>4、森林火灾模拟</p></blockquote><h3 id="1-3-2-python实现元胞自动机——简单生命游戏"><a href="#1-3-2-python实现元胞自动机——简单生命游戏" class="headerlink" title="1.3.2 python实现元胞自动机——简单生命游戏"></a>1.3.2 python实现元胞自动机——简单生命游戏</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> random<span class="token keyword">import</span> copy<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># 定义元胞生长棋盘大小，以此创建矩阵</span>length <span class="token operator">=</span> <span class="token number">100</span>width <span class="token operator">=</span> <span class="token number">200</span>cell <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">)</span>cell_temp <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token comment"># 初始化矩阵为随机0-1 矩阵，1 表示生存，0 代表死亡</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>        cell_temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""当前细胞为存活状态时，当周围的存活细胞低于2个时（不包含2个），该细胞变成死亡状态。（模拟生命数量稀少）当前细胞为存活状态时，当周围有2个或3个存活细胞时，该细胞保持原样。当前细胞为存活状态时，当周围有超过3个存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）当前细胞为死亡状态时，当周围有3个存活细胞时，该细胞变成存活状态。（模拟繁殖）"""</span><span class="token comment">#当所有细胞状态不变时结束</span><span class="token comment">#可能存在棋盘一直周期性变化，此时如果需要结束可手动结束</span><span class="token keyword">while</span> <span class="token keyword">not</span><span class="token punctuation">(</span>cell_temp<span class="token operator">==</span>cell<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#通过读取cell矩阵，不断判断每一个单元格是存活还是死亡，将判断结果保存在cell_temp中，最终再复制给cell矩阵</span>    cell <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>cell_temp<span class="token punctuation">)</span>    <span class="token comment">#显示每一轮的图像</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>cell<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>    <span class="token comment">#两重循环遍历整个矩阵，判断每个细胞下一个状态是生存还是死亡</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">'''            count保存一个细胞周围8个方格内有几个存活的细胞，注意这两将上下边界和左右边界连接起来进行判断，            如对于8*8的棋盘,[0,0]与[0,7]和[7,0]在逻辑上相邻            '''</span>            count <span class="token operator">=</span> cell<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> cell<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>width<span class="token punctuation">]</span> <span class="token operator">+</span> cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>width<span class="token punctuation">]</span> <span class="token operator">+</span> cell<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>width<span class="token punctuation">]</span> <span class="token operator">+</span> cell<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>width<span class="token punctuation">]</span> <span class="token operator">+</span> cell<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>width<span class="token punctuation">]</span> <span class="token operator">+</span> cell<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>width<span class="token punctuation">]</span>            <span class="token comment">#如果一个单元格是死亡，且周围是三个单元格则存活，否则保持死亡</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> count <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> count <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                cell_temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">continue</span>            <span class="token comment">#如果一个存活的单元格周围有2或3个单元格存活则该单元格继续存活，否则死亡</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">or</span> count <span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            cell_temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-2-python实现元胞自动机——模拟城市扩张"><a href="#1-3-2-python实现元胞自动机——模拟城市扩张" class="headerlink" title="1.3.2 python实现元胞自动机——模拟城市扩张"></a>1.3.2 python实现元胞自动机——模拟城市扩张</h3><p><a href="https://www.jianshu.com/p/ae8852e700ef">【参考博客】</a></p><h3 id="1-3-3-python实现元胞自动机——模拟森林火灾"><a href="#1-3-3-python实现元胞自动机——模拟森林火灾" class="headerlink" title="1.3.3 python实现元胞自动机——模拟森林火灾"></a>1.3.3 python实现元胞自动机——模拟森林火灾</h3><p><a href="https://zhuanlan.zhihu.com/p/420348047">【参考博客】</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl<span class="token keyword">import</span> time<span class="token triple-quoted-string string">"""定义常数部分，假设整块地森林覆盖率80%，树木比较干燥，易以引燃所以，firing设置为0.8而且树木不易重生，所在区域发生闪电引燃树木的概率极低"""</span>N <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment"># 森林的大小</span>forest_area <span class="token operator">=</span> <span class="token number">0.8</span>  <span class="token comment"># 初始森林覆盖率</span>firing <span class="token operator">=</span> <span class="token number">0.8</span>  <span class="token comment"># 周围树木引燃概率</span>grow <span class="token operator">=</span> <span class="token number">0.001</span>  <span class="token comment"># 树木生长概率</span>lightning <span class="token operator">=</span> <span class="token number">0.00006</span>  <span class="token comment"># 闪电概率</span>forest <span class="token operator">=</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>N<span class="token punctuation">,</span> N<span class="token punctuation">)</span> <span class="token operator">&lt;</span> forest_area<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span>  <span class="token comment"># 初始树木</span><span class="token comment"># 矩阵可视化</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"step=1"</span><span class="token punctuation">,</span> fontdict<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"family"</span><span class="token punctuation">:</span> <span class="token string">'Times New Roman'</span><span class="token punctuation">,</span> <span class="token string">"weight"</span><span class="token punctuation">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span> <span class="token string">"fontsize"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 黑色（空地），绿色（树木），红色（火）</span>bounds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>cmap <span class="token operator">=</span> mpl<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>ListedColormap<span class="token punctuation">(</span>colors<span class="token punctuation">)</span>w <span class="token operator">=</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>forest<span class="token punctuation">,</span> cmap<span class="token operator">=</span>cmap<span class="token punctuation">,</span> norm<span class="token operator">=</span>mpl<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>BoundaryNorm<span class="token punctuation">(</span>bounds<span class="token punctuation">,</span> cmap<span class="token punctuation">.</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># h画图</span>T <span class="token operator">=</span> <span class="token number">3000</span>  <span class="token comment"># 状态演化进行3000步</span><span class="token keyword">for</span> t <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># time.sleep(0.5)</span>    Temp <span class="token operator">=</span> forest  <span class="token comment"># 用Temp这个矩阵，来记录森林状态的变化</span>    Temp <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>forest <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Temp<span class="token punctuation">)</span>  <span class="token comment"># 森林中，值为2的地方值变成0，其余地方不变，结果存入Temp</span>    rule4prob <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>N<span class="token punctuation">,</span> N<span class="token punctuation">)</span>  <span class="token comment"># 为森林的每个位置生成一个概率,用于表示规则4的概率</span>    Temp <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span><span class="token punctuation">(</span>forest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>rule4prob <span class="token operator">&lt;</span> grow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Temp<span class="token punctuation">)</span>  <span class="token comment"># 森林中，无树（值为0）的地方，且随机数&lt;grow的地方，值变成1，其余不变,表示树木生长</span>    fire <span class="token operator">=</span> <span class="token punctuation">(</span>forest <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span>  <span class="token comment"># 找到燃烧的树木，以0，1表示(示性函数)</span>    <span class="token comment"># 固定边界</span>    firepad <span class="token operator">=</span> np<span class="token punctuation">.</span>pad<span class="token punctuation">(</span>fire<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'constant'</span><span class="token punctuation">)</span>  <span class="token comment"># 边界固定值0，用于计算邻域树木燃烧情况，np.pad函数</span>    <span class="token comment"># 周期性边界</span>    <span class="token comment"># firepad=np.pad(fire,(1,1),'wrap')#上下边界，左右边界相连接</span>    <span class="token comment"># 映射型边界</span>    <span class="token comment"># firepad=np.pad(fire,(1,1),'reflect')#以边界值为轴镜面反射</span>    <span class="token comment"># 绝缘边界</span>    <span class="token comment"># firepad=np.pad(fire,(1,1),'edge')#以边界值为轴镜面反射</span>    <span class="token comment"># Moore邻居</span>    <span class="token comment"># 得到了每个格点周围有多少燃烧的树木（8个邻居）</span>    <span class="token comment"># numfire=firepad[0:-2,1:-1]+firepad[2:,1:-1]\</span>    <span class="token comment">#             +firepad[1:-1,0:-2]+firepad[1:-1,2:]\</span>    <span class="token comment">#             +firepad[0:-2,0:-2]+firepad[0:-2,2:]\</span>    <span class="token comment">#             +firepad[2:,0:-2]+firepad[2:,2:]</span>    <span class="token comment"># VonNeumann邻居（4个邻居）</span>    numfire <span class="token operator">=</span> firepad<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> firepad<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> \              <span class="token operator">+</span> firepad<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> firepad<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> \ \        <span class="token comment"># 为森林的每个位置生成一个概率,用于表示规则1的概率，表示树木燃烧的概率</span>    rule1prob <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>N<span class="token punctuation">,</span> N<span class="token punctuation">)</span>    <span class="token comment"># 为森林的每个位置生成一个概率,用于表示规则34的概率，即发生闪电的概率</span>    rule3prob <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>N<span class="token punctuation">,</span> N<span class="token punctuation">)</span>    <span class="token comment"># 森林中，值为1，且周围有燃烧的树木，且随机数小于firing（概率firing）的地方值变为2(燃烧)</span>    <span class="token comment"># Temp = np.where((forest == 1)&amp;(numfire>0)&amp;(rule1prob&lt;firing),2,Temp)</span>    <span class="token comment"># 森林中，值为1，且周围没有燃烧的树木，且随机数小于lightning（概率lightning）的地方值变为2(燃烧)，表示被闪电劈中</span>    <span class="token comment"># Temp = np.where((forest == 1)&amp;(numfire==0)&amp;(rule4prob&lt;lightning),2,Temp)</span>    <span class="token comment"># 上面两句可以写成一句</span>    Temp <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>        <span class="token punctuation">(</span>forest <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>numfire <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>rule1prob <span class="token operator">&lt;</span> firing<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>numfire <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>rule3prob <span class="token operator">&lt;</span> lightning<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> Temp<span class="token punctuation">)</span>    <span class="token comment"># !!!!更新森林的状态</span>    forest <span class="token operator">=</span> Temp    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"step="</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> fontdict<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"family"</span><span class="token punctuation">:</span> <span class="token string">'Times New Roman'</span><span class="token punctuation">,</span> <span class="token string">"weight"</span><span class="token punctuation">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span> <span class="token string">"fontsize"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>set_data<span class="token punctuation">(</span>forest<span class="token punctuation">)</span>    <span class="token comment"># !!!!更新森林的状态</span>    plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-例题分析"><a href="#2-例题分析" class="headerlink" title="2. 例题分析"></a>2. 例题分析</h1><h1 id="3-预测算法"><a href="#3-预测算法" class="headerlink" title="3. 预测算法"></a>3. 预测算法</h1><p><a href="https://blog.csdn.net/yijiantao/article/details/51142953">【预测模型总结】</a></p><h2 id="3-1-LSTM预测——实例"><a href="#3-1-LSTM预测——实例" class="headerlink" title="3.1 LSTM预测——实例"></a>3.1 LSTM预测——实例</h2><h2 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h2><h1 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h1><h1 id="4-分析评价"><a href="#4-分析评价" class="headerlink" title="4. 分析评价"></a>4. 分析评价</h1><h2 id="4-1-层次分析法"><a href="#4-1-层次分析法" class="headerlink" title="4.1 层次分析法"></a>4.1 层次分析法</h2><h2 id="4-2-灰度分析法"><a href="#4-2-灰度分析法" class="headerlink" title="4.2 灰度分析法"></a>4.2 灰度分析法</h2><h1 id="5-聚类KNN"><a href="#5-聚类KNN" class="headerlink" title="5. 聚类KNN"></a>5. 聚类KNN</h1><h1 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h1><ol><li><p>禁忌优化算法</p></li><li><p><a href="https://blog.csdn.net/weixin_39526651/article/details/111607386">元胞自动机适用范围</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作图第一弹：Folium</title>
      <link href="/2022/02/06/zuo-tu-di-yi-dan-folium/"/>
      <url>/2022/02/06/zuo-tu-di-yi-dan-folium/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Folium的安装"><a href="#1-Folium的安装" class="headerlink" title="1. Folium的安装"></a>1. Folium的安装</h1><h1 id="2-Folium的使用"><a href="#2-Folium的使用" class="headerlink" title="2. Folium的使用"></a>2. Folium的使用</h1><h2 id="2-1-作图保存"><a href="#2-1-作图保存" class="headerlink" title="2.1 作图保存"></a>2.1 作图保存</h2><p>目前只发现可以作为网页保存,需要导出图片的话，IE浏览器打开网页，右键网页捕获，复制即可得到png的图，缺点是放大之后会模糊起来</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> folium<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">print</span><span class="token punctuation">(</span>folium<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span>word_map<span class="token operator">=</span>folium<span class="token punctuation">.</span>Map<span class="token punctuation">(</span>location<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">45.5236</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">122.6750</span><span class="token punctuation">]</span><span class="token punctuation">)</span>word_map<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'world.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些比较重要的参数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">folium</span><span class="token punctuation">.</span>folium<span class="token punctuation">.</span>Map<span class="token punctuation">(</span>location<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token string">'100%'</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token string">'100%'</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token string">'0%'</span><span class="token punctuation">,</span> top<span class="token operator">=</span><span class="token string">'0%'</span><span class="token punctuation">,</span> position<span class="token operator">=</span><span class="token string">'relative'</span><span class="token punctuation">,</span> tiles<span class="token operator">=</span><span class="token string">'OpenStreetMap'</span><span class="token punctuation">,</span> attr<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> min_zoom<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max_zoom<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> zoom_start<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> min_lat<span class="token operator">=</span><span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">,</span> max_lat<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">,</span> min_lon<span class="token operator">=</span><span class="token operator">-</span><span class="token number">180</span><span class="token punctuation">,</span> max_lon<span class="token operator">=</span><span class="token number">180</span><span class="token punctuation">,</span> max_bounds<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> crs<span class="token operator">=</span><span class="token string">'EPSG3857'</span><span class="token punctuation">,</span> control_scale<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> prefer_canvas<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> no_touch<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> disable_3d<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> png_enabled<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> zoom_control<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>location:经纬度，list或者tuple形式，顺序为【 latitude, longitude】</li><li>zoom_start缩放值，默认为 10，值越大比例尺越小，地图放大级别越大</li><li>tiles显示样式，默认*’OpenStreetMap’*，也就是开启街道显示</li><li>crs 地理坐标参考系统，默认为”<em>EPSG3857</em>“</li></ul><h2 id="2-2-不同样式的地图"><a href="#2-2-不同样式的地图" class="headerlink" title="2.2 不同样式的地图"></a>2.2 不同样式的地图</h2><p><strong>Type1:黑白简约</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> folium<span class="token keyword">import</span> webbrowsercity_map<span class="token operator">=</span>folium<span class="token punctuation">.</span>Map<span class="token punctuation">(</span>location<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">39.93</span><span class="token punctuation">,</span><span class="token number">116.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>zoom_start<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>tiles<span class="token operator">=</span><span class="token string">'Stamen Toner'</span><span class="token punctuation">)</span>city_map<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'world.html'</span><span class="token punctuation">)</span>webbrowser<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"world.html"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Type1:黄绿地理</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> folium<span class="token keyword">import</span> webbrowsercity_map<span class="token operator">=</span>folium<span class="token punctuation">.</span>Map<span class="token punctuation">(</span>location<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">39.93</span><span class="token punctuation">,</span><span class="token number">116.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>zoom_start<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>tiles<span class="token operator">=</span><span class="token string">'Stamen Terrain'</span><span class="token punctuation">)</span>city_map<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'world.html'</span><span class="token punctuation">)</span>webbrowser<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"world.html"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-标记的添加"><a href="#2-3-标记的添加" class="headerlink" title="2.3 标记的添加"></a>2.3 标记的添加</h2><ol><li>定位标志</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> folium<span class="token keyword">import</span> webbrowsercity_map<span class="token operator">=</span>folium<span class="token punctuation">.</span>Map<span class="token punctuation">(</span>location<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">39.93</span><span class="token punctuation">,</span> <span class="token number">115.40</span><span class="token punctuation">]</span><span class="token punctuation">,</span>zoom_start<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>tiles<span class="token operator">=</span><span class="token string">'Stamen Terrain'</span><span class="token punctuation">)</span><span class="token comment"># 添加标记---这边是定位标志</span>folium<span class="token punctuation">.</span>Marker<span class="token punctuation">(</span>    location<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">39.95</span><span class="token punctuation">,</span> <span class="token number">115.33</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    popup<span class="token operator">=</span><span class="token string">'Mt. Hood Meadows'</span><span class="token punctuation">,</span>    icon<span class="token operator">=</span>folium<span class="token punctuation">.</span>Icon<span class="token punctuation">(</span>icon<span class="token operator">=</span><span class="token string">'cloud'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_to<span class="token punctuation">(</span>city_map<span class="token punctuation">)</span>folium<span class="token punctuation">.</span>Marker<span class="token punctuation">(</span>    location<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">39.96</span><span class="token punctuation">,</span> <span class="token number">115.32</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    popup<span class="token operator">=</span><span class="token string">'Timberline Lodge'</span><span class="token punctuation">,</span>    icon<span class="token operator">=</span>folium<span class="token punctuation">.</span>Icon<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_to<span class="token punctuation">(</span>city_map<span class="token punctuation">)</span>folium<span class="token punctuation">.</span>Marker<span class="token punctuation">(</span>    location<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">39.93</span><span class="token punctuation">,</span> <span class="token number">115.34</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    popup<span class="token operator">=</span><span class="token string">'Some Other Location'</span><span class="token punctuation">,</span>    icon<span class="token operator">=</span>folium<span class="token punctuation">.</span>Icon<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> icon<span class="token operator">=</span><span class="token string">'info-sign'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_to<span class="token punctuation">(</span>city_map<span class="token punctuation">)</span>city_map<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'world.html'</span><span class="token punctuation">)</span>webbrowser<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"world.html"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>圆形标记</li></ol><p>①红色圆圈</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> folium<span class="token keyword">import</span> webbrowsercity_map<span class="token operator">=</span>folium<span class="token punctuation">.</span>Map<span class="token punctuation">(</span>location<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">39.93</span><span class="token punctuation">,</span> <span class="token number">116.40</span><span class="token punctuation">]</span><span class="token punctuation">,</span>zoom_start<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>tiles<span class="token operator">=</span><span class="token string">'Stamen Toner'</span><span class="token punctuation">)</span><span class="token comment"># 添加标记---这边是圆形范围标记</span><span class="token comment"># 红色的圆圈</span>folium<span class="token punctuation">.</span>Circle<span class="token punctuation">(</span>    radius<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span>    location<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">39.92</span><span class="token punctuation">,</span><span class="token number">116.43</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    popup<span class="token operator">=</span><span class="token string">'The Waterfront'</span><span class="token punctuation">,</span>    color<span class="token operator">=</span><span class="token string">'crimson'</span><span class="token punctuation">,</span>    fill<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_to<span class="token punctuation">(</span>city_map<span class="token punctuation">)</span>city_map<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'world.html'</span><span class="token punctuation">)</span>webbrowser<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"world.html"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②蓝色范围，填充⚪</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> folium<span class="token keyword">import</span> webbrowsercity_map<span class="token operator">=</span>folium<span class="token punctuation">.</span>Map<span class="token punctuation">(</span>location<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">39.93</span><span class="token punctuation">,</span> <span class="token number">116.40</span><span class="token punctuation">]</span><span class="token punctuation">,</span>zoom_start<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>tiles<span class="token operator">=</span><span class="token string">'Stamen Toner'</span><span class="token punctuation">)</span><span class="token comment"># 添加标记---这边是圆形范围标记</span>folium<span class="token punctuation">.</span>CircleMarker<span class="token punctuation">(</span>    location<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">39.93</span><span class="token punctuation">,</span> <span class="token number">116.38</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    radius<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span>    popup<span class="token operator">=</span><span class="token string">'Laurelhurst Park'</span><span class="token punctuation">,</span>    color<span class="token operator">=</span><span class="token string">'#3186cc'</span><span class="token punctuation">,</span>    fill<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    fill_color<span class="token operator">=</span><span class="token string">'#3186cc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_to<span class="token punctuation">(</span>city_map<span class="token punctuation">)</span>city_map<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'world.html'</span><span class="token punctuation">)</span>webbrowser<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"world.html"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-绘制热力图"><a href="#2-4-绘制热力图" class="headerlink" title="2.4 绘制热力图"></a>2.4 绘制热力图</h2><p>需要提供位置以及对应位置的数值（热力值）</p><p>data=list([[经度，纬度，热力值]，[经度，纬度，热力值]]……[经度，纬度，热力值])</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> folium<span class="token keyword">import</span> webbrowser<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> <span class="token punctuation">(</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span>    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span>    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">116.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># HeatMap</span><span class="token keyword">from</span> folium<span class="token punctuation">.</span>plugins <span class="token keyword">import</span> HeatMapm <span class="token operator">=</span> folium<span class="token punctuation">.</span>Map<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">39.93</span><span class="token punctuation">,</span> <span class="token number">116.38</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tiles<span class="token operator">=</span><span class="token string">'stamentoner'</span><span class="token punctuation">,</span> zoom_start<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>HeatMap<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>add_to<span class="token punctuation">(</span>m<span class="token punctuation">)</span>m<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'world.html'</span><span class="token punctuation">)</span>webbrowser<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"world.html"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-密度地图绘制"><a href="#2-5-密度地图绘制" class="headerlink" title="2.5 密度地图绘制"></a>2.5 密度地图绘制</h2><p>效果是……一个个小圆球,感觉用的应该不多</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> folium<span class="token keyword">import</span> webbrowser<span class="token keyword">from</span> folium<span class="token punctuation">.</span>plugins <span class="token keyword">import</span> MarkerCluster<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> <span class="token punctuation">(</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span>    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span>    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">116.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>m <span class="token operator">=</span> folium<span class="token punctuation">.</span>Map<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">39.93</span><span class="token punctuation">,</span> <span class="token number">116.38</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tiles<span class="token operator">=</span><span class="token string">'stamentoner'</span><span class="token punctuation">,</span> zoom_start<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># create a mark cluster object</span>marker_cluster <span class="token operator">=</span> MarkerCluster<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_to<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token comment"># add data point to the mark cluster</span><span class="token keyword">for</span> lat<span class="token punctuation">,</span> lng<span class="token punctuation">,</span> label <span class="token keyword">in</span> data<span class="token punctuation">:</span>    folium<span class="token punctuation">.</span>Marker<span class="token punctuation">(</span>        location<span class="token operator">=</span><span class="token punctuation">[</span>lat<span class="token punctuation">,</span> lng<span class="token punctuation">]</span><span class="token punctuation">,</span>        icon<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>        popup<span class="token operator">=</span>label<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span>add_to<span class="token punctuation">(</span>marker_cluster<span class="token punctuation">)</span><span class="token comment"># add marker_cluster to map</span>m<span class="token punctuation">.</span>add_child<span class="token punctuation">(</span>marker_cluster<span class="token punctuation">)</span>m<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'world.html'</span><span class="token punctuation">)</span>webbrowser<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"world.html"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-6-结合实际数据的实战"><a href="#2-6-结合实际数据的实战" class="headerlink" title="2.6 结合实际数据的实战"></a>2.6 结合实际数据的实战</h2><h3 id="2-6-1-火山分布"><a href="#2-6-1-火山分布" class="headerlink" title="2.6.1 火山分布"></a>2.6.1 火山分布</h3><p><a href="https://blog.csdn.net/lemonbit/article/details/122780392">【参考博客】</a></p><h3 id="2-6-2-北京道路"><a href="#2-6-2-北京道路" class="headerlink" title="2.6.2 北京道路"></a>2.6.2 北京道路</h3><p><a href="https://cloud.tencent.com/developer/article/1856621">【参考博客】</a></p><h3 id="2-6-3-疫情分析"><a href="#2-6-3-疫情分析" class="headerlink" title="2.6.3 疫情分析"></a>2.6.3 疫情分析</h3><p><a href="https://www.bobobk.com/624.html">【参考博客】</a></p><h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h1><ol><li><p><a href="https://zhuanlan.zhihu.com/p/112324234">知乎玩转工程开发博文</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/248011466">知乎数据可视化</a></p></li><li><p>[另一种pyecharts包绘制地图](<a href="https://cloud.tencent.com/developer/article/1699692">python pyecharts地理数据可视化 绘制地理图表 - 云+社区 - 腾讯云 (tencent.com)</a>)</p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作图 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022NLP论文阅读第一弹——TNET</title>
      <link href="/2022/02/06/nlp-lun-wen-yue-du-di-yi-dan-tnet/"/>
      <url>/2022/02/06/nlp-lun-wen-yue-du-di-yi-dan-tnet/</url>
      
        <content type="html"><![CDATA[<h1 id="1-论文阅读"><a href="#1-论文阅读" class="headerlink" title="1. 论文阅读"></a>1. 论文阅读</h1><p> <em>《Transformation Networks for Target-Oriented Sentiment Classifification》</em></p><p><a href="https://aclanthology.org/P18-1087.pdf">[paper]</a></p><p>[code]</p><h2 id="1-1-introduction"><a href="#1-1-introduction" class="headerlink" title="1.1  introduction"></a>1.1  introduction</h2><p>提出了<strong>T</strong>ransformation <strong>Net</strong>works (TNet)解决Attention机制和CNN本身在ABSC任务上的缺陷（具体缺陷见1.2）</p><p>主要贡献：</p><ul><li>采用了CNN的TNet解决ABSC问题，且性能在基准数据集上取得了最好的效果。</li><li>提出了一种新的根据目标target的转换组件，以更好地将目标信息集成到单词表示中。</li><li>设计了一种上下文保存机制，将上下文信息转发到深度转换体系结构中，因此，该模型可以更深从层次的网络中学习到更加抽象的上下文单词特征。</li></ul><h2 id="1-2-motivation"><a href="#1-2-motivation" class="headerlink" title="1.2  motivation"></a>1.2  motivation</h2><ul><li>注意力机制本身的缺陷：<ul><li>对某单词进行注意力分值计算的时候，会引入噪声</li></ul></li></ul><p><font color="＃20B2AA">解释：比如说，“This dish is my favorite and I always get it and never get tired of it.”对其中的dish做注意力机制计算的时候，会引入不相关的词比如“never”“tired”</font></p><ul><li>CNN本身对于文本处理的缺陷：<ul><li><p>不能像RNN一样完整探索到上下文信息</p></li><li><p>难以处理多目标词的情况（即使探索到也很难基于上下文进行取舍）</p></li></ul></li></ul><p><font color="＃20B2AA">解释：如句子“great food but the service was dreadful”，对于目标词“food”而言，CNN很难给出“good”和“dreadful”之间合理的抉择</font></p><h2 id="1-3-model"><a href="#1-3-model" class="headerlink" title="1.3  model"></a>1.3  model</h2><p><img src="https://img-blog.csdnimg.cn/20190315195759550.png"></p><p>结合上图，从下往上解释一下模型部分：</p><ol><li><p>$x_i$是原始输入，红色模块是双向LSTM，（因为前人研究表明基于上下文的单词表示是卷积架构中单词的有效表示方式），输出$h_i$是这一层加入上下文关系的单词表示的结果。$h_i=[LSTM_{left-&gt;right}(x_i);LSTM_{right-&gt;left}(x_i)],i∈[1,n]$</p></li><li><p>灰色模块是CPT（上下文保存转换），主要作用是引入target到单词表示中来<font color='light blue'>没有用传统的attention计算的权重来做……而是用了自己设计的TST模块，同时强调CPT是多层的</font></p><p>TST组件从下往上介绍：</p><ul><li><p>双向LSTM获取目标词的表示$h^{\tau}$</p></li><li><p>将上一步的$h^{\tau}$动态地与句子中地单词$w_i$关联起来，异变在时间步时定制目标表示$r_i^{\tau}}$</p></li><li><p>全连接层，获取第$i$个目标词的表示</p></li><li><p>LF/AS：TST之后，由Bi-LSTM得到的上下文信息会丢失，为了利用上下文信息，这里提出了两种策略LF和AS</p><ul><li><p>LF：无损转发，模型一开始红色Bi-LSTM生成的表示和TST生成的表示直接相加</p></li><li><p>AS：自适应缩放，引入参数$W$和$b$，学习模型应该保留多少一开始红色Bi-LSTM生成的表示和多少TST生成的表示。相当于引入了门控机制。</p></li></ul></li></ul></li></ol><p><img src="https://img-blog.csdnimg.cn/20190315200203487.png"></p><ol start="3"><li>CNN：位置编码（假设一个target周围检测到多个opinion的时候，默认离他最近的贡献最大）</li></ol><h2 id="1-4-Examination"><a href="#1-4-Examination" class="headerlink" title="1.4  Examination"></a>1.4  Examination</h2><h2 id="1-5-Result"><a href="#1-5-Result" class="headerlink" title="1.5  Result"></a>1.5  Result</h2><h1 id="2-Coding的故事"><a href="#2-Coding的故事" class="headerlink" title="2. Coding的故事"></a>2. Coding的故事</h1><h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h1><ol><li><a href="https://blog.csdn.net/weixin_44740082/article/details/88582633">Tnet阅读笔记</a></li></ol><blockquote><p><strong>碎碎念：</strong></p><p>终于要开学了哇~准备迎接“神仙打架”~~~做一个合格的炮灰甲😊</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA甲级模拟1114-1117</title>
      <link href="/2022/02/06/pta-jia-ji-mo-ni-1114-1117/"/>
      <url>/2022/02/06/pta-jia-ji-mo-ni-1114-1117/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识点总结"><a href="#1-知识点总结" class="headerlink" title="1. 知识点总结"></a>1. 知识点总结</h1><p>因为不是完整的一次考核（将两次中前2和后2拆分后拼起来的题目），所以题目按照难度排序</p><p>总体来讲……不知道是不是因为做的是拼凑的一套，没有难题基本🤣~</p><table><thead><tr><th>题号</th><th>难度</th><th>知识点</th></tr></thead><tbody><tr><td>1116</td><td>🐸</td><td>（只想给半个🐸），STL简单使用</td></tr><tr><td>1117</td><td>🐸</td><td>（只想给半个🐸），会C++，看懂英文题意就好😜</td></tr><tr><td>1114</td><td>🐸</td><td>并查集基础（注意细节）</td></tr><tr><td>1115</td><td>🐸</td><td>BST树，基础题，注意**&amp;**的使用</td></tr></tbody></table><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2. 分题题解"></a>2. 分题题解</h1><h2 id="2-1-第一题-1116-Come-on-Let’s-C-20-分"><a href="#2-1-第一题-1116-Come-on-Let’s-C-20-分" class="headerlink" title="2.1 第一题 1116 Come on! Let’s C (20 分)"></a>2.1 第一题 <strong>1116 Come on! Let’s C (20 分)</strong></h2><blockquote><p>没有难度，map会简单一点，注意审题</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span>string id<span class="token punctuation">;</span><span class="token keyword">int</span> rank<span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>rank_list<span class="token punctuation">;</span><span class="token keyword">int</span> K<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>id<span class="token punctuation">;</span>rank_list<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>K<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>rank_list<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s: Are you kidding?\n"</span><span class="token punctuation">,</span>id<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>rank_list<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s: Checked\n"</span><span class="token punctuation">,</span>id<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>rank_list<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s: Mystery Award\n"</span><span class="token punctuation">,</span>id<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rank_list<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>rank_list<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s: Minion\n"</span><span class="token punctuation">,</span>id<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rank_list<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s: Chocolate\n"</span><span class="token punctuation">,</span>id<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rank_list<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-第二题-1117-Eddington-Number-25-分"><a href="#2-2-第二题-1117-Eddington-Number-25-分" class="headerlink" title="2.2 第二题 1117 Eddington Number (25 分)"></a>2.2 第二题 <strong>1117 Eddington Number (25 分)</strong></h2><blockquote><p>卡了一下时间，两层for循环记得先排序，不满足条件及时终止循环</p><p>基础题</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>dis<span class="token punctuation">;</span> <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>dis<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dis<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> e<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>e<span class="token operator">=</span>n<span class="token punctuation">;</span>e<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>e<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">>=</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span>e<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-第三题-1114-Family-Property-25-分"><a href="#2-3-第三题-1114-Family-Property-25-分" class="headerlink" title="2.3 第三题 1114 Family Property (25 分)"></a>2.3 第三题 <strong>1114 Family Property (25 分)</strong></h2><blockquote><p>并查集基础题，一次AC，注意细节（没有卡时间和空间，STL大胆耍起来🤣）</p><ul><li>estate\area分别存储每一个个体的信息</li><li>root_estate\root_area存储家族信息</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">10009</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//减少时间复杂度</span><span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">!=</span>f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp<span class="token operator">=</span>a<span class="token punctuation">;</span>a<span class="token operator">=</span>f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>maxn<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Union</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> fa<span class="token operator">=</span><span class="token function">Find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fb<span class="token operator">=</span><span class="token function">Find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token operator">&lt;</span>fb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">[</span>fb<span class="token punctuation">]</span><span class="token operator">=</span>fa<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token operator">=</span>fb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//并查集</span><span class="token keyword">int</span> root<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//记录根节点中保存的家族数量</span><span class="token keyword">int</span> root_estate<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> root_area<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> estate<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//记录房产个数</span><span class="token keyword">int</span> area<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//记录面积 </span><span class="token keyword">int</span> id<span class="token punctuation">,</span>fid<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>num<span class="token punctuation">,</span>cid<span class="token punctuation">,</span>e<span class="token punctuation">,</span>a<span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>ids<span class="token punctuation">;</span><span class="token comment">//存储涉及到的用户数量 </span><span class="token keyword">struct</span> <span class="token class-name">Ans</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token keyword">double</span> area<span class="token punctuation">;</span><span class="token keyword">double</span> estate<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Ans a<span class="token punctuation">,</span>Ans b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>area<span class="token operator">!=</span>b<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>area<span class="token operator">></span>b<span class="token punctuation">.</span>area<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>id<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>id<span class="token punctuation">,</span><span class="token operator">&amp;</span>fid<span class="token punctuation">,</span><span class="token operator">&amp;</span>mid<span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>ids<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>fid<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Union</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>fid<span class="token punctuation">)</span><span class="token punctuation">;</span>ids<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>fid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Union</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>ids<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>cid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Union</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>ids<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>estate<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>area<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//输出答案 </span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>ids<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>ids<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> id<span class="token operator">=</span><span class="token operator">*</span>it<span class="token punctuation">;</span><span class="token keyword">int</span> fid<span class="token operator">=</span><span class="token function">Find</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">[</span>fid<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//计算一个家族的数量</span>root_estate<span class="token punctuation">[</span>fid<span class="token punctuation">]</span><span class="token operator">+=</span>estate<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>root_area<span class="token punctuation">[</span>fid<span class="token punctuation">]</span><span class="token operator">+=</span>area<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> vector<span class="token operator">&lt;</span>Ans<span class="token operator">></span>ans<span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>family<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>ids<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>ids<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> id<span class="token operator">=</span><span class="token operator">*</span>it<span class="token punctuation">;</span><span class="token keyword">int</span> fid<span class="token operator">=</span><span class="token function">Find</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>family<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>fid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>family<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>family<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>family<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> fid<span class="token operator">=</span><span class="token operator">*</span>it<span class="token punctuation">;</span>Ans temp<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>id<span class="token operator">=</span>fid<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>num<span class="token operator">=</span>root<span class="token punctuation">[</span>fid<span class="token punctuation">]</span><span class="token punctuation">;</span>temp<span class="token punctuation">.</span>estate<span class="token operator">=</span><span class="token keyword">double</span><span class="token punctuation">(</span>root_estate<span class="token punctuation">[</span>fid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>root<span class="token punctuation">[</span>fid<span class="token punctuation">]</span><span class="token punctuation">;</span>temp<span class="token punctuation">.</span>area<span class="token operator">=</span><span class="token keyword">double</span><span class="token punctuation">(</span>root_area<span class="token punctuation">[</span>fid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>root<span class="token punctuation">[</span>fid<span class="token punctuation">]</span><span class="token punctuation">;</span>ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%04d %d %.3f %.3f\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>estate<span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//这个是很久以前交的22分答案(没啥参考价值，缅怀叭)1114:22分 </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>ids<span class="token punctuation">;</span><span class="token comment">//设置用来存放人数的集合 </span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span> <span class="token keyword">int</span> f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> pe<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">double</span> pa<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> isRoot<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Family</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">double</span> estate<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">double</span> area<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">double</span> isEstate<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> isArea<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Family a<span class="token punctuation">,</span>Family b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>area<span class="token operator">!=</span>b<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>area<span class="token operator">></span>b<span class="token punctuation">.</span>area<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>id<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//并查集的模板</span><span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token operator">=</span>idx<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>idx<span class="token operator">!=</span>f<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>idx<span class="token operator">=</span>f<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">!=</span>f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span>a<span class="token punctuation">;</span>a<span class="token operator">=</span>f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">=</span>idx<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> idx<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Union</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> fa<span class="token operator">=</span><span class="token function">Find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fb<span class="token operator">=</span><span class="token function">Find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token operator">!=</span>fb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token operator">&lt;</span>fb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">[</span>fb<span class="token punctuation">]</span><span class="token operator">=</span>fa<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>f<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token operator">=</span>fb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> father<span class="token punctuation">,</span>mother<span class="token punctuation">,</span>child<span class="token punctuation">;</span><span class="token keyword">int</span> K<span class="token punctuation">;</span><span class="token keyword">double</span> estate<span class="token punctuation">,</span>area<span class="token punctuation">;</span><span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment">//初始化</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>maxn<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//感觉是不是合并的时候结点部分没合并的上去 </span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>id<span class="token punctuation">,</span><span class="token operator">&amp;</span>father<span class="token punctuation">,</span><span class="token operator">&amp;</span>mother<span class="token punctuation">,</span><span class="token operator">&amp;</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span>ids<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>father<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ids<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>father<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Union</span><span class="token punctuation">(</span>father<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>mother<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ids<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>mother<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Union</span><span class="token punctuation">(</span>mother<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>K<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>ids<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Union</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf %lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>estate<span class="token punctuation">,</span><span class="token operator">&amp;</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>pe<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span>estate<span class="token punctuation">;</span>pa<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span>area<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//对于总的社区的统计</span><span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>master<span class="token punctuation">;</span><span class="token comment">//存放家主的编号 </span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>ids<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>ids<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>isRoot<span class="token punctuation">[</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//存放的是当前家主所在的家庭人数 </span>master<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>isEstate<span class="token punctuation">[</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>pe<span class="token punctuation">[</span><span class="token operator">*</span>it<span class="token punctuation">]</span><span class="token punctuation">;</span>isArea<span class="token punctuation">[</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>pa<span class="token punctuation">[</span><span class="token operator">*</span>it<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//下面由master的索引来构建家族结构体</span>count<span class="token operator">=</span>master<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Family<span class="token operator">></span><span class="token function">family</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>master<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>master<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>family<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token operator">*</span>it<span class="token punctuation">;</span>family<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">=</span>isRoot<span class="token punctuation">[</span><span class="token operator">*</span>it<span class="token punctuation">]</span><span class="token punctuation">;</span>family<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>area<span class="token operator">=</span>isArea<span class="token punctuation">[</span><span class="token operator">*</span>it<span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">*</span>family<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>family<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>estate<span class="token operator">=</span>isEstate<span class="token punctuation">[</span><span class="token operator">*</span>it<span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">*</span>family<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token function">sort</span><span class="token punctuation">(</span>family<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>family<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//总数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%04d %d %.3f %.3f\n"</span><span class="token punctuation">,</span>family<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>family<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>family<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>estate<span class="token punctuation">,</span>family<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-第四题-1115-Counting-Nodes-in-a-BST-30-分"><a href="#2-4-第四题-1115-Counting-Nodes-in-a-BST-30-分" class="headerlink" title="2.4 第四题 1115 Counting Nodes in a BST (30 分)"></a>2.4 第四题 <strong>1115 Counting Nodes in a BST (30 分)</strong></h2><blockquote><p>BST建树，层次遍历</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//计算最后两层结点数</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">;</span><span class="token keyword">int</span> levelCnt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> val<span class="token punctuation">;</span>Node <span class="token operator">*</span>left<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>Node <span class="token operator">*</span>right<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">int</span> level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token keyword">int</span> val<span class="token punctuation">;</span>Node <span class="token operator">*</span><span class="token function">build</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> <span class="token operator">&amp;</span>root<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node<span class="token operator">*</span>node<span class="token operator">=</span><span class="token keyword">new</span> Node<span class="token punctuation">;</span>node<span class="token operator">-></span>val<span class="token operator">=</span>val<span class="token punctuation">;</span>root<span class="token operator">=</span>node<span class="token punctuation">;</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token operator">></span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>root<span class="token operator">-></span>right<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>root<span class="token operator">-></span>left<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> max_level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">levelTravel</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> <span class="token operator">&amp;</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>queue<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span>q<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node<span class="token operator">*</span>top<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>levelCnt<span class="token punctuation">[</span>top<span class="token operator">-></span>level<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>max_level<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>max_level<span class="token punctuation">,</span>top<span class="token operator">-></span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>Node<span class="token operator">*</span>temp<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>left<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span>top<span class="token operator">-></span>left<span class="token punctuation">;</span>temp<span class="token operator">-></span>level<span class="token operator">=</span>top<span class="token operator">-></span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span>top<span class="token operator">-></span>right<span class="token punctuation">;</span>temp<span class="token operator">-></span>level<span class="token operator">=</span>top<span class="token operator">-></span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>Node <span class="token operator">*</span>root<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">build</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">levelTravel</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d"</span><span class="token punctuation">,</span>levelCnt<span class="token punctuation">[</span>max_level<span class="token punctuation">]</span><span class="token punctuation">,</span>levelCnt<span class="token punctuation">[</span>max_level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>levelCnt<span class="token punctuation">[</span>max_level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>levelCnt<span class="token punctuation">[</span>max_level<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-参考链接"><a href="#3-参考链接" class="headerlink" title="3. 参考链接"></a>3. 参考链接</h1><p>无</p>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程练习 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA甲级模拟1164-1167</title>
      <link href="/2022/02/04/pta-jia-ji-mo-ni-1164-1167/"/>
      <url>/2022/02/04/pta-jia-ji-mo-ni-1164-1167/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识点总结"><a href="#1-知识点总结" class="headerlink" title="1. 知识点总结"></a>1. 知识点总结</h1><p><del>最后一弹🤣</del>，开个玩笑啊咧（前面还有好多债😅）</p><p>目前1140-1147给我的感觉是——整体没有特别难的（这里指的是难度≥🐸🐸🐸的题目，当然菜还是菜得依旧😐，回家效率真的……昂一言难尽），而且随着题号的增加，套路题感觉没有变化，模板该背还是得背，最好是能够灵活运用，因为一般四道题目有一道考察的是应变（俗称“卡分题”）</p><p>感觉pta可以打基础~但是涉及的知识点还是不全，准备机试还是得练比较广……不然就是白给😓</p><table><thead><tr><th>题号</th><th>难度</th><th>知识点</th></tr></thead><tbody><tr><td>1164</td><td>🐸</td><td>字符串处理+矩阵</td></tr><tr><td>1165</td><td>🐸😅</td><td>链表</td></tr><tr><td>1166</td><td>🐸</td><td>图的简单应用</td></tr><tr><td>1167</td><td>🐸</td><td>中序+堆（二叉树简单应用）</td></tr></tbody></table><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2.分题题解"></a>2.分题题解</h1><h2 id="2-1-第一题1164-Good-in-C-20-分"><a href="#2-1-第一题1164-Good-in-C-20-分" class="headerlink" title="2.1 第一题1164 Good in C (20 分)"></a>2.1 第一题<strong>1164 Good in C (20 分)</strong></h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1478635767601967104">【题目传送门】</a></p><blockquote><p>字符串处理与矩阵的基本使用，注意心态稳住~</p><ul><li><p>格式严格按照题目意思(不可以毛躁)</p></li><li><p>难点在于句子的切分，涉及到string子串函数使用</p></li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string sentence<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span>words<span class="token punctuation">;</span><span class="token comment">//切分句子 </span><span class="token keyword">struct</span> <span class="token class-name">Alpha</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> matrix<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> Alpha alpha<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//切分句子</span><span class="token keyword">int</span> len<span class="token operator">=</span>sentence<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>right<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>string word<span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sentence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">'Z'</span><span class="token operator">&amp;&amp;</span>sentence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>left<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//前面出现的是连续的字母 </span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>word<span class="token operator">=</span>sentence<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>i<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>words<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">&amp;&amp;</span>i<span class="token operator">-</span>left<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>word<span class="token operator">=</span>sentence<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>i<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>words<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> len<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>row<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>row<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>col<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>col<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印每一个字母</span><span class="token keyword">if</span><span class="token punctuation">(</span>col<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">'Z'</span><span class="token operator">&amp;&amp;</span>word<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span>word<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span>word<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>alpha<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>row<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>row<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>column<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>column<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>alpha<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>sentence<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-第二题1165-Block-Reversing-25-分"><a href="#2-2-第二题1165-Block-Reversing-25-分" class="headerlink" title="2.2 第二题1165 Block Reversing (25 分)"></a>2.2 第二题<strong>1165 Block Reversing (25 分)</strong></h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1478635841315209216">【题目链接】</a></p><blockquote><p>静态列表基础题,不是很难，注意输出的细节</p></blockquote><p>但是需要订正😓</p><p><strong>第一版:24/25</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> L<span class="token punctuation">,</span>N<span class="token punctuation">,</span>num<span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> val<span class="token punctuation">;</span><span class="token keyword">int</span> addr<span class="token punctuation">;</span><span class="token keyword">int</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>Node<span class="token operator">></span>nodes<span class="token punctuation">;</span><span class="token keyword">int</span> addr<span class="token punctuation">,</span>val<span class="token punctuation">,</span>next_node<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span>list1<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span><span class="token operator">&amp;</span>val<span class="token punctuation">,</span><span class="token operator">&amp;</span>next_node<span class="token punctuation">)</span><span class="token punctuation">;</span>Node temp<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>addr<span class="token operator">=</span>addr<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>val<span class="token operator">=</span>val<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>next<span class="token operator">=</span>next_node<span class="token punctuation">;</span>nodes<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//首先</span><span class="token keyword">int</span> p<span class="token operator">=</span>head<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>list1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span>nodes<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//list1中存放 :如何输出</span><span class="token comment">//0 1 2   3 4 5  6 7</span><span class="token keyword">int</span> n<span class="token operator">=</span>N<span class="token operator">/</span>L<span class="token operator">+</span><span class="token punctuation">(</span>N<span class="token operator">%</span>L<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> res<span class="token operator">=</span>N<span class="token operator">%</span>L<span class="token punctuation">;</span> <span class="token keyword">int</span> fid<span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token operator">=</span>res<span class="token punctuation">;</span>fid<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>L<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>num<span class="token operator">=</span>L<span class="token punctuation">;</span>fid<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>L<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>fid<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>fid<span class="token operator">+</span>num<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %05d\n"</span><span class="token punctuation">,</span>list1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%05d %d"</span><span class="token punctuation">,</span>list1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>addr<span class="token punctuation">,</span>list1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" -1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二版：AC</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token punctuation">,</span>n<span class="token punctuation">,</span>block<span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">,</span>val<span class="token punctuation">,</span>nex<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">;</span><span class="token keyword">int</span> val<span class="token punctuation">;</span><span class="token keyword">int</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>Node<span class="token operator">></span>nodes<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span>list0<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token operator">&amp;</span>val<span class="token punctuation">,</span><span class="token operator">&amp;</span>nex<span class="token punctuation">)</span><span class="token punctuation">;</span>Node temp<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>arr<span class="token operator">=</span>arr<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>val<span class="token operator">=</span>val<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>next<span class="token operator">=</span>nex<span class="token punctuation">;</span>nodes<span class="token punctuation">[</span>arr<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> p<span class="token operator">=</span>head<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>list0<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span>nodes<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//改变，输出: 0 1 2   3 4 5   6 7 </span><span class="token comment">//1 2 3 4    5 6 7 8</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span>list0<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> res<span class="token operator">=</span>len<span class="token operator">%</span>block<span class="token punctuation">;</span><span class="token keyword">int</span> times<span class="token operator">=</span>len<span class="token operator">/</span>block<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>times<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//printf("需要%d次\n",times);</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>times<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> first<span class="token operator">=</span><span class="token punctuation">(</span>times<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span>block<span class="token punctuation">;</span><span class="token comment">//printf("first=%d\n",first);</span><span class="token keyword">int</span> num<span class="token operator">=</span>block<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>res<span class="token punctuation">)</span>num<span class="token operator">=</span>res<span class="token punctuation">;</span><span class="token comment">//printf("num=%d\n",num); </span><span class="token comment">//输出 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %05d\n"</span><span class="token punctuation">,</span>list0<span class="token punctuation">[</span>first<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%05d %d"</span><span class="token punctuation">,</span>list0<span class="token punctuation">[</span>first<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>arr<span class="token punctuation">,</span>list0<span class="token punctuation">[</span>first<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" -1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*一个测试点：00100 8 471120 7 8866600000 4 9999900100 1 1230968237 6 7112033218 3 0000099999 5 6823788666 8 -112309 2 33218需要2次00100 1 1230912309 2 3321833218 3 0000000000 4 -1*/</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-第三题-1166-Summit-25-分"><a href="#2-3-第三题-1166-Summit-25-分" class="headerlink" title="2.3 第三题 1166 Summit (25 分)"></a>2.3 第三题 <strong>1166 Summit (25 分)</strong></h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1478635919459287040">【题目链接】</a></p><blockquote><p>图论基础题：</p><p>🤣邻接图，不卡时间和内存，放心写</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token punctuation">,</span>l<span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token punctuation">,</span>b<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span>relation<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>visnum<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span>isin<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>relation<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>visnum<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>isin<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>relation<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>relation<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>cnt<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>cnt<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fill</span><span class="token punctuation">(</span>visnum<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>visnum<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fill</span><span class="token punctuation">(</span>isin<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>isin<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>isin<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> id<span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>relation<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> fid<span class="token operator">=</span>relation<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>visnum<span class="token punctuation">[</span>fid<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//计算 1 不合法 2 有人忘记邀请 </span><span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">int</span> ans<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>id<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>id<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isin<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>visnum<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">!=</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Area %d needs help.\n"</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isin<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>visnum<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">==</span>l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>flag<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Area %d may invite more people, such as %d.\n"</span><span class="token punctuation">,</span>cnt<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Area %d is OK.\n"</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-第四题-1167-Cartesian-Tree-30-分"><a href="#2-4-第四题-1167-Cartesian-Tree-30-分" class="headerlink" title="2.4 第四题 1167 Cartesian Tree (30 分)"></a>2.4 第四题 <strong>1167 Cartesian Tree (30 分)</strong></h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1478636026017230848">【题目链接】</a></p><blockquote><p>简单题，属于是中序+堆排序重建树结构的一类题（类似中序+后序||中序+先序），难度要简单一点，每次从中序序列(inL,inR)之间找到最小的作为根节点，左右序列分别递归为下一次的左右子树</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF<span class="token operator">=</span><span class="token number">99999999</span><span class="token punctuation">;</span><span class="token comment">//小顶堆中序遍历输出的结果---->层序遍历输出结果</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> val<span class="token punctuation">;</span>Node<span class="token operator">*</span>left<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>Node<span class="token operator">*</span>right<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>in<span class="token punctuation">;</span>Node<span class="token operator">*</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> inL<span class="token punctuation">,</span><span class="token keyword">int</span> inR<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>inR<span class="token operator">&lt;</span>inL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//找到根节点</span><span class="token keyword">int</span> min_num<span class="token operator">=</span>INF<span class="token punctuation">;</span><span class="token keyword">int</span> min_id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>inL<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>inR<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&lt;</span>min_num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>min_num<span class="token operator">=</span>in<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>min_id<span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Node <span class="token operator">*</span>root<span class="token operator">=</span><span class="token keyword">new</span> Node<span class="token punctuation">;</span>root<span class="token operator">-></span>val<span class="token operator">=</span>min_num<span class="token punctuation">;</span>root<span class="token operator">-></span>left<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>inL<span class="token punctuation">,</span>min_id<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token operator">-></span>right<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>min_id<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>inR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//层次遍历</span><span class="token keyword">void</span> <span class="token function">levelTravel</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>queue<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span>q<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node<span class="token operator">*</span>top<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Node<span class="token operator">*</span>temp<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>left<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span>top<span class="token operator">-></span>left<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span>top<span class="token operator">-></span>right<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>top<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>in<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Node <span class="token operator">*</span>root<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">levelTravel</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>~~碎碎念，这年的考题比较easy~~~</p><h1 id="3-参考链接"><a href="#3-参考链接" class="headerlink" title="3. 参考链接"></a>3. 参考链接</h1><p>木有~</p>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程练习 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA甲级模拟1160-1163</title>
      <link href="/2022/02/03/pta-jia-ji-mo-ni-1160-1163/"/>
      <url>/2022/02/03/pta-jia-ji-mo-ni-1160-1163/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识点总结"><a href="#1-知识点总结" class="headerlink" title="1. 知识点总结"></a>1. 知识点总结</h1><p>卡在了第一题……然后没有⏲</p><p>还好不是考试……不然心态可以说炸得没边了😱</p><p>但是其他的题目比较基础，Dijkstra需要好好复习，好久没做过了</p><table><thead><tr><th>题号</th><th>难度</th><th>知识点</th></tr></thead><tbody><tr><td>1160</td><td>🐸🐸</td><td>数学+找规律+<strong>搜索DFS+剪枝（个人觉得需要三刷）</strong></td></tr><tr><td>1161</td><td>🐸</td><td>链表</td></tr><tr><td>1162</td><td>🐸</td><td>二叉树遍历</td></tr><tr><td>1163</td><td>🐸</td><td>Dijkstra</td></tr></tbody></table><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2. 分题题解"></a>2. 分题题解</h1><h2 id="2-1-第一题"><a href="#2-1-第一题" class="headerlink" title="2.1 第一题"></a>2.1 第一题</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1478635415925800960">1160 Forever(20 分)</a></p><blockquote><p>比较搞心态的一题，一开始注意到了末尾的数字只可以是9，不然<code>n=m+1</code>是无法导出<code>n与m公因数大于2</code>的，但是第一遍代码完全没有涉及这个……因为以为不是很大的点……</p></blockquote><p><strong>第一次：2/20</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token comment">//素数判断 </span><span class="token keyword">bool</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">3</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">5</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//最大公因数:辗转相除法 a>b </span>ll <span class="token function">maxDiv</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span>ll b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll r<span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>r<span class="token operator">=</span>a<span class="token operator">%</span>b<span class="token punctuation">;</span>a<span class="token operator">=</span>b<span class="token punctuation">;</span>b<span class="token operator">=</span>r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">Ans</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>ll num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//计算整数每位相加之和</span><span class="token keyword">int</span>  <span class="token function">CountDigits</span><span class="token punctuation">(</span>string now<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> len<span class="token operator">=</span>now<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">+=</span>now<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//容许的最小值</span><span class="token keyword">int</span> lowest<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">CountLowest</span><span class="token punctuation">(</span><span class="token keyword">int</span> digit_num<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&amp;</span> lowest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>digit_num<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>lowest<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>lowest<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>digit_num<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp<span class="token operator">=</span>sum<span class="token operator">-</span><span class="token number">9</span><span class="token operator">*</span>digit_num<span class="token punctuation">;</span>lowest<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>lowest<span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//printf("%d个数字 ,和为%d,最小值%d\n",digit_num+1,sum,lowest);</span><span class="token punctuation">&#125;</span> <span class="token comment">//深搜：搜索所有符合条件的解</span>vector<span class="token operator">&lt;</span>Ans<span class="token operator">></span>ans<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">,</span>string now<span class="token punctuation">,</span><span class="token keyword">int</span> digit_num<span class="token punctuation">,</span><span class="token keyword">int</span> mylow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//printf("digit_num=%d now=%s\n",digit_num,now.c_str());</span><span class="token comment">//当前遍历到的数字是num,当前和为sum,now存储目前的所有数字 </span>now<span class="token operator">=</span>now<span class="token operator">+</span><span class="token function">to_string</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>sum<span class="token operator">+=</span>num<span class="token punctuation">;</span>digit_num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">></span>m<span class="token operator">||</span>digit_num<span class="token operator">></span>k<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//知道接下来不够了</span><span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">+</span><span class="token number">9</span><span class="token operator">*</span><span class="token punctuation">(</span>k<span class="token operator">-</span>digit_num<span class="token punctuation">)</span><span class="token operator">&lt;</span>m<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span>m<span class="token operator">&amp;&amp;</span>digit_num<span class="token operator">==</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//1 0  &amp;&amp; 11 10不可能有大于2的公因数 </span>ll candidate<span class="token operator">=</span><span class="token function">stol</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>string candidate1<span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>candidate<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> dsum<span class="token operator">=</span><span class="token function">CountDigits</span><span class="token punctuation">(</span>candidate1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//printf("&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;dsum=%d m=%d\n",dsum,m);</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token function">maxDiv</span><span class="token punctuation">(</span>dsum<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Ans temp<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>n<span class="token operator">=</span>dsum<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>num<span class="token operator">=</span>candidate<span class="token punctuation">;</span>ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//继续探索</span><span class="token function">CountLowest</span><span class="token punctuation">(</span>k<span class="token operator">-</span>digit_num<span class="token punctuation">,</span>m<span class="token operator">-</span>sum<span class="token punctuation">,</span>mylow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>lowest<span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>now<span class="token punctuation">,</span>digit_num<span class="token punctuation">,</span>mylow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到k个数字组成的整数A，它的和是m</span><span class="token comment">//n=(A+1)和</span><span class="token comment">//m和n的最大公因数为大于2的素数</span><span class="token function">CountLowest</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>m<span class="token punctuation">,</span>lowest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>lowest<span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No Solution\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ans<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二次：订正</strong></p><p>第一版：10分</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//有i个9,m-n=8+9*(i-1)</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">Prime</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">gcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span>ll b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>ll r<span class="token operator">=</span>b<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>r<span class="token operator">=</span>a<span class="token operator">%</span>b<span class="token punctuation">;</span>a<span class="token operator">=</span>b<span class="token punctuation">;</span>b<span class="token operator">=</span>r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">Ans</span><span class="token punctuation">&#123;</span>ll num<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> vector<span class="token operator">&lt;</span>Ans<span class="token operator">></span>ans<span class="token punctuation">;</span><span class="token keyword">int</span> target_sum<span class="token punctuation">;</span><span class="token keyword">int</span> digit_sum<span class="token punctuation">;</span>string nine<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">,</span>string now<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//cout&lt;&lt;"now "&lt;&lt;now&lt;&lt;endl;</span>pos<span class="token operator">++</span><span class="token punctuation">;</span>sum<span class="token operator">+=</span>num<span class="token punctuation">;</span>now<span class="token operator">+=</span><span class="token function">to_string</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span>target_sum<span class="token operator">&amp;&amp;</span>pos<span class="token operator">==</span>digit_sum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//ans.push_back(stol(now+nine));</span>Ans temp<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>n<span class="token operator">=</span>n<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>num<span class="token operator">=</span><span class="token function">stol</span><span class="token punctuation">(</span>now<span class="token operator">+</span>nine<span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">></span>target_sum<span class="token operator">||</span>pos<span class="token operator">></span>digit_sum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span>target_sum<span class="token operator">-</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">dfs</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>i<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Ans a<span class="token punctuation">,</span>Ans b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>n<span class="token operator">!=</span>b<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>n<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>num<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d\n"</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num9<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>num9<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>num9<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//末尾num9的个数</span>n<span class="token operator">=</span>m<span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">9</span><span class="token operator">*</span><span class="token punctuation">(</span>num9<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> div<span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Prime</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//合法 </span>target_sum<span class="token operator">=</span>m<span class="token operator">-</span>num9<span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">;</span>digit_sum<span class="token operator">=</span>k<span class="token operator">-</span>num9<span class="token punctuation">;</span>nine<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>c<span class="token operator">&lt;</span>num9<span class="token punctuation">;</span>c<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>nine<span class="token operator">+=</span><span class="token string">"9"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span>target_sum<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token comment">//输出答案</span><span class="token keyword">int</span> len<span class="token operator">=</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>c<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>c<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">,</span>ans<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> ans<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No Solution\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二版：AC</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Ans</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> A<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">2</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">3</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">5</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//a>b </span><span class="token keyword">return</span> b<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span>a<span class="token operator">:</span><span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">digitSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">+=</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>Ans<span class="token operator">></span>ans<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">,</span><span class="token keyword">int</span> rest_k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>rest_k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">digitSum</span><span class="token punctuation">(</span>A<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>n<span class="token punctuation">,</span>A<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>rest_k<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//剪枝</span><span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">+</span>i<span class="token operator">&lt;=</span>m<span class="token operator">&amp;&amp;</span>sum<span class="token operator">+</span>i<span class="token operator">+</span><span class="token punctuation">(</span>rest_k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">>=</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">dfs</span><span class="token punctuation">(</span>A<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>i<span class="token punctuation">,</span>sum<span class="token operator">+</span>i<span class="token punctuation">,</span>rest_k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Ans a<span class="token punctuation">,</span>Ans b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>n<span class="token operator">!=</span>b<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>n<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>A<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>A<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> times<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>times<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>times<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d\n"</span><span class="token punctuation">,</span>times<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//dfs搜索答案</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出答案</span><span class="token keyword">int</span> len<span class="token operator">=</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ans<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No Solution\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-第二题"><a href="#2-2-第二题" class="headerlink" title="2.2 第二题"></a>2.2 第二题</h2><blockquote><p>链表的基础题（混合STL），注意输出格式以及-1的位置</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//链表操作</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> addr<span class="token punctuation">;</span><span class="token keyword">int</span> val<span class="token punctuation">;</span><span class="token keyword">int</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> head1<span class="token punctuation">;</span><span class="token keyword">int</span> head2<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> addr<span class="token punctuation">,</span>val<span class="token punctuation">,</span>next_addr<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>Node<span class="token operator">></span>nodes<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span>v1<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span>v2<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Change</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span>v1<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span>v2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> lena<span class="token operator">=</span>v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> lenb<span class="token operator">=</span>v2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> j<span class="token operator">=</span>lenb<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>lena<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>lena<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%05d %d %05d\n"</span><span class="token punctuation">,</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>addr<span class="token punctuation">,</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">,</span>v1<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%05d %d -1\n"</span><span class="token punctuation">,</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>addr<span class="token punctuation">,</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//打印 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%05d %d %05d\n"</span><span class="token punctuation">,</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>addr<span class="token punctuation">,</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">,</span>v2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%05d %d -1\n"</span><span class="token punctuation">,</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>addr<span class="token punctuation">,</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">!=</span>lena<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%05d %d %05d\n"</span><span class="token punctuation">,</span>v2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>addr<span class="token punctuation">,</span>v2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">,</span>v1<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%05d %d -1\n"</span><span class="token punctuation">,</span>v2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>addr<span class="token punctuation">,</span>v2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>head1<span class="token punctuation">,</span><span class="token operator">&amp;</span>head2<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span><span class="token operator">&amp;</span>val<span class="token punctuation">,</span><span class="token operator">&amp;</span>next_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>Node temp<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>addr<span class="token operator">=</span>addr<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>val<span class="token operator">=</span>val<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>next<span class="token operator">=</span>next_addr<span class="token punctuation">;</span>nodes<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> p<span class="token operator">=</span>head1<span class="token punctuation">;</span><span class="token comment">//遍历v1</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node temp<span class="token operator">=</span>nodes<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//遍历v2</span>p<span class="token operator">=</span>head2<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node temp<span class="token operator">=</span>nodes<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>v2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> len1<span class="token operator">=</span>v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> len2<span class="token operator">=</span>v2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>len1<span class="token operator">>=</span><span class="token number">2</span><span class="token operator">*</span>len2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Change</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//大 小 </span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">Change</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-第三题"><a href="#2-3-第三题" class="headerlink" title="2.3 第三题"></a>2.3 第三题</h2><blockquote><p>这一题考察静态二叉树的遍历，需要注意的是:</p><ul><li>在正常的后续遍历中需要判断是否出现某一结点是“+”、“-”且没有左孩子的情况（也就是此时非运算符，而是符号表示），此时后序遍历改成前序遍历</li><li>root的查找主要是看输入的时候，哪一个结点没有作过孩子</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//静态二叉树</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> left<span class="token punctuation">;</span><span class="token keyword">int</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span>v<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">postTravel</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'-'</span><span class="token operator">||</span>v<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'+'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">strlen</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>v<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">postTravel</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">postTravel</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">postTravel</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">postTravel</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> root<span class="token punctuation">;</span><span class="token keyword">bool</span> isNotRoot<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%d%d"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>isNotRoot<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>isNotRoot<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isNotRoot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>root<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">postTravel</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-第四题"><a href="#2-4-第四题" class="headerlink" title="2.4 第四题"></a>2.4 第四题</h2><blockquote><p>本想要不要深搜将每一个(st,ed)对应得所有可能性输出，和q中询问得序列比较，不过后来直接在Dij函数中将u的初始化引入q,在算法过程中直接比较，时间空间都可以节省😜</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF<span class="token operator">=</span><span class="token number">99999999</span><span class="token punctuation">;</span><span class="token comment">//检查一个序列是否是dijkstra序列</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1009</span><span class="token punctuation">;</span><span class="token keyword">int</span> graph<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>d<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>temp<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">Dij</span><span class="token punctuation">(</span><span class="token keyword">int</span> st<span class="token punctuation">,</span><span class="token keyword">int</span> ed<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//st到ed的最短距离 </span>temp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">dis</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//起点到各个顶点的最短距离</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">vis</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fill</span><span class="token punctuation">(</span>vis<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vis<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fill</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dis<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//起点自身的距离为0</span><span class="token keyword">int</span> id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//int u=-1,min_dis=INF;</span><span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> min_dis<span class="token operator">=</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>id<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token operator">&amp;&amp;</span>dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>min_dis<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>v<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>v<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">></span>graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">;</span>graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//询问序列 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//处理</span><span class="token keyword">int</span> st<span class="token operator">=</span>q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ed<span class="token operator">=</span>q<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Dij</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span>ed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-参考链接"><a href="#3-参考链接" class="headerlink" title="3. 参考链接"></a>3. 参考链接</h1><ol><li><a href="https://blog.csdn.net/j___t/article/details/100696013">1160博客思路讲解</a></li><li><a href="https://blog.csdn.net/cwtnice/article/details/107108972">1160博客题解</a>（比较简单的一版DFS）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程练习 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>甲级模拟1156-1159</title>
      <link href="/2022/02/02/pta-jia-ji-mo-ni-1156-1159/"/>
      <url>/2022/02/02/pta-jia-ji-mo-ni-1156-1159/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识点总结"><a href="#1-知识点总结" class="headerlink" title="1. 知识点总结"></a>1. 知识点总结</h1><p>今天没有计时（应该超了……）唯一没有AC的测试点居然是1158😅，所以倒数两题小心为上，稳住心态~</p><p>本次作业涉及到的知识点有：</p><ul><li>简单数学</li><li>字符串处理+结构体排序+<strong>STL（可选）</strong></li><li>并查集</li><li>STL使用+树</li></ul><table><thead><tr><th>题号</th><th>难度</th><th>知识点</th></tr></thead><tbody><tr><td>1156</td><td>🐸</td><td>简单数学（素数判断）</td></tr><tr><td>1157</td><td>🐸</td><td>字符串处理+结构体排序</td></tr><tr><td>1158</td><td>🐸🐸</td><td>并查集+STL</td></tr><tr><td>1159</td><td>🐸🐸</td><td>树（难度还可以，虽然代码长度比较……但是考察基础，没有卡时间）</td></tr></tbody></table><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2. 分题题解"></a>2. 分题题解</h1><h2 id="2-1-第一题：PTA甲级1156"><a href="#2-1-第一题：PTA甲级1156" class="headerlink" title="2.1 第一题：PTA甲级1156"></a>2.1 第一题：PTA甲级1156</h2><p>考察简单数学：</p><blockquote><p>给定一个N，如果<code>N+6和N同时为素数</code> 或者<code>N-6和N同时为素数</code>则认为是sexy的数字</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">2</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">3</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">5</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isSexy</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isPrime</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isPrime</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSexy</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>x<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token operator">=</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSexy</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-第二题：PTA甲级1157"><a href="#2-2-第二题：PTA甲级1157" class="headerlink" title="2.2 第二题：PTA甲级1157"></a>2.2 第二题：PTA甲级1157</h2><blockquote><p>字符串处理＋结构体排序：简单题</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token keyword">int</span> M<span class="token punctuation">;</span> map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span>alumni<span class="token punctuation">;</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span>comer<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span>ans<span class="token punctuation">;</span>string temp<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span>string b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>string tempa<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string tempb<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> tempa<span class="token operator">&lt;</span>tempb<span class="token punctuation">;</span><span class="token comment">//出生日期小的 </span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>temp<span class="token punctuation">;</span>alumni<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>comer<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>comer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>alumni<span class="token punctuation">[</span>comer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>comer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> cnt<span class="token operator">=</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">sort</span><span class="token punctuation">(</span>comer<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>comer<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>comer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-第三题：PTA甲级1158"><a href="#2-3-第三题：PTA甲级1158" class="headerlink" title="2.3 第三题：PTA甲级1158"></a>2.3 第三题：PTA甲级1158</h2><blockquote><p>比较魔幻的一道题：</p><p>思路不是很难，注意细节就好~</p><p><strong>思路1</strong>：绕开了并查集（因为忘记了）……然后杯具了</p><p>当我注释掉61行，第二个测试点不过🙄</p><p>当我注释掉60行，第四个测试点不过🙄</p><p>就离谱的麻麻给离谱开门……离谱到家了（好叭，菜是原罪）</p><p><strong>思路2：</strong></p><p>并查集输出gang</p></blockquote><p><strong>思路一</strong>：</p><p>复查的时候发现为啥并查集绕不开了（a-b b-c情况下……a与c还是一窝的😂），下面的代码没有解决这个问题</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//</span><span class="token keyword">int</span> k<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> caller<span class="token punctuation">,</span>receiver<span class="token punctuation">,</span>duration<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>suspects<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1009</span><span class="token punctuation">;</span><span class="token keyword">int</span> hasConnect<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//打印出犯罪团伙 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>hasConnect<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>hasConnect<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>caller<span class="token punctuation">,</span><span class="token operator">&amp;</span>receiver<span class="token punctuation">,</span><span class="token operator">&amp;</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hasConnect<span class="token punctuation">[</span>caller<span class="token punctuation">]</span><span class="token punctuation">[</span>receiver<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>hasConnect<span class="token punctuation">[</span>caller<span class="token punctuation">]</span><span class="token punctuation">[</span>receiver<span class="token punctuation">]</span><span class="token operator">=</span>duration<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>hasConnect<span class="token punctuation">[</span>caller<span class="token punctuation">]</span><span class="token punctuation">[</span>receiver<span class="token punctuation">]</span><span class="token operator">+=</span>duration<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//短电话,打出去的 </span><span class="token keyword">int</span> back<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//回复的 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hasConnect<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//没有打过</span><span class="token keyword">if</span><span class="token punctuation">(</span>hasConnect<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">5</span><span class="token operator">&amp;&amp;</span>hasConnect<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>hasConnect<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">5</span><span class="token operator">&amp;&amp;</span>hasConnect<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>back<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">></span>k<span class="token operator">&amp;&amp;</span>back<span class="token operator">&lt;=</span><span class="token number">0.2</span><span class="token operator">*</span>cnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>suspects<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> len<span class="token operator">=</span>suspects<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//上面没有问题 </span><span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"None"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//彼此之间有联系的属于同一个犯罪集团</span><span class="token function">sort</span><span class="token punctuation">(</span>suspects<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>suspects<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//输出头领 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>suspects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>suspects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>suspects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出跟班 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//相互打电话 </span><span class="token comment">//if((hasConnect[suspects[i]][suspects[j]]!=-1&amp;&amp;hasConnect[suspects[j]][suspects[i]]!=-1)&amp;&amp;!vis[suspects[j]])&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hasConnect<span class="token punctuation">[</span>suspects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>suspects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>hasConnect<span class="token punctuation">[</span>suspects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>suspects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>suspects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>suspects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>suspects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路二</strong>：</p><blockquote><p>没啥好说的，并查集好好复习🙄，比较基础</p><p>注意的是，首先过滤得到suspects数组，然后对它做并查集的时候，用了map&lt;int,int&gt;存储父节点</p><p>为了正序输出，用了<code>map&lt;int,set&lt;int&gt; &gt;</code>存储答案,默认升序</p></blockquote><p>参考博客里给了DFS和并查集两种做法，目前暂时先巩固并查集😁</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//并查集解法</span><span class="token keyword">int</span> k<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> caller<span class="token punctuation">,</span>receiver<span class="token punctuation">,</span>duration<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>suspects<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1009</span><span class="token punctuation">;</span><span class="token keyword">int</span> hasConnect<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//打印出犯罪团伙 </span><span class="token comment">//并查集模板</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//减少时间复杂度</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">!=</span>f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span>a<span class="token punctuation">;</span>a<span class="token operator">=</span>f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">Union</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> fa<span class="token operator">=</span><span class="token function">Find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fb<span class="token operator">=</span><span class="token function">Find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token operator">&lt;</span>fb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">[</span>fb<span class="token punctuation">]</span><span class="token operator">=</span>fa<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token operator">=</span>fb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>hasConnect<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>hasConnect<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>caller<span class="token punctuation">,</span><span class="token operator">&amp;</span>receiver<span class="token punctuation">,</span><span class="token operator">&amp;</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hasConnect<span class="token punctuation">[</span>caller<span class="token punctuation">]</span><span class="token punctuation">[</span>receiver<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>hasConnect<span class="token punctuation">[</span>caller<span class="token punctuation">]</span><span class="token punctuation">[</span>receiver<span class="token punctuation">]</span><span class="token operator">=</span>duration<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>hasConnect<span class="token punctuation">[</span>caller<span class="token punctuation">]</span><span class="token punctuation">[</span>receiver<span class="token punctuation">]</span><span class="token operator">+=</span>duration<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//短电话,打出去的 </span><span class="token keyword">int</span> back<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//回复的 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hasConnect<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//没有打过</span><span class="token keyword">if</span><span class="token punctuation">(</span>hasConnect<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">5</span><span class="token operator">&amp;&amp;</span>hasConnect<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>hasConnect<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">5</span><span class="token operator">&amp;&amp;</span>hasConnect<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>back<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">></span>k<span class="token operator">&amp;&amp;</span>back<span class="token operator">&lt;=</span><span class="token number">0.2</span><span class="token operator">*</span>cnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>suspects<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> len<span class="token operator">=</span>suspects<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//上面没有问题 </span><span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"None"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//并查集 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">[</span>suspects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>suspects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hasConnect<span class="token punctuation">[</span>suspects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>suspects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>hasConnect<span class="token punctuation">[</span>suspects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>suspects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Union</span><span class="token punctuation">(</span>suspects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>suspects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span>ans<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> id<span class="token operator">=</span>suspects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> fid<span class="token operator">=</span><span class="token function">Find</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token punctuation">[</span>fid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出答案</span><span class="token keyword">for</span><span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>temp<span class="token operator">=</span>it<span class="token operator">-></span>second<span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it2<span class="token operator">=</span>temp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it2<span class="token operator">!=</span>temp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it2<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">*</span>it2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-第四题：PTA甲级1159"><a href="#2-4-第四题：PTA甲级1159" class="headerlink" title="2.4 第四题：PTA甲级1159"></a>2.4 第四题：PTA甲级1159</h2><blockquote><p>不卡时间……所以，代码虽然长，但是都是基础：</p><ul><li>中序遍历+后序遍历建立树</li><li>层序遍历的应用（基础）</li><li>STL中map降低编码难度</li><li>string中sscanf的使用</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> val<span class="token punctuation">;</span><span class="token keyword">int</span> level<span class="token punctuation">;</span>Node<span class="token operator">*</span>left<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>Node<span class="token operator">*</span>right<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>post<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>in<span class="token punctuation">;</span> <span class="token comment">//模板了，需要熟悉掌握</span>Node<span class="token operator">*</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> postL<span class="token punctuation">,</span><span class="token keyword">int</span> postR<span class="token punctuation">,</span><span class="token keyword">int</span> inL<span class="token punctuation">,</span><span class="token keyword">int</span> inR<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>postL<span class="token operator">></span>postR<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Node <span class="token operator">*</span>root<span class="token operator">=</span><span class="token keyword">new</span> Node<span class="token punctuation">;</span>root<span class="token operator">-></span>val<span class="token operator">=</span>post<span class="token punctuation">[</span>postR<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>inL<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>inR<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span>post<span class="token punctuation">[</span>postR<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> left_num<span class="token operator">=</span>k<span class="token operator">-</span>inL<span class="token punctuation">;</span>root<span class="token operator">-></span>left<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>postL<span class="token punctuation">,</span>postL<span class="token operator">+</span>left_num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>inL<span class="token punctuation">,</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token operator">-></span>right<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>postL<span class="token operator">+</span>left_num<span class="token punctuation">,</span>postR<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>inR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">isFull</span><span class="token punctuation">(</span>Node<span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//除了叶子结点，都有两个孩子</span><span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>root<span class="token operator">-></span>left<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>root<span class="token operator">-></span>left<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>root<span class="token operator">-></span>left<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">isFull</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">isFull</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>string temp<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span>exist<span class="token punctuation">;</span><span class="token comment">//记录是否出现 </span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>levels<span class="token punctuation">;</span><span class="token comment">//记录层数 </span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>father<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>rchild<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>lchild<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">levelTravel</span><span class="token punctuation">(</span>Node<span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>queue<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span>q<span class="token punctuation">;</span>root<span class="token operator">-></span>level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node <span class="token operator">*</span>top<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>levels<span class="token punctuation">[</span>top<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token operator">=</span>top<span class="token operator">-></span>level<span class="token punctuation">;</span><span class="token comment">//层数 </span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Node<span class="token operator">*</span>left<span class="token operator">=</span>top<span class="token operator">-></span>left<span class="token punctuation">;</span>Node<span class="token operator">*</span>right<span class="token operator">=</span>top<span class="token operator">-></span>right<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>lchild<span class="token punctuation">[</span>top<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token operator">=</span>left<span class="token operator">-></span>val<span class="token punctuation">;</span>left<span class="token operator">-></span>level<span class="token operator">=</span>top<span class="token operator">-></span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>father<span class="token punctuation">[</span>left<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token operator">=</span>top<span class="token operator">-></span>val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>lchild<span class="token punctuation">[</span>top<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>rchild<span class="token punctuation">[</span>top<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token operator">=</span>right<span class="token operator">-></span>val<span class="token punctuation">;</span>right<span class="token operator">-></span>level<span class="token operator">=</span>top<span class="token operator">-></span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>father<span class="token punctuation">[</span>right<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token operator">=</span>top<span class="token operator">-></span>val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>rchild<span class="token punctuation">[</span>top<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>post<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>in<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>post<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exist<span class="token punctuation">[</span>post<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Node <span class="token operator">*</span>root<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>root<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> isfull<span class="token operator">=</span><span class="token function">isFull</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">levelTravel</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span>temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span><span class="token string">"It is a full tree"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isfull<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'t'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//---is the root</span><span class="token keyword">int</span> ask<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sscanf</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"%d is the root"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ask<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>root<span class="token operator">-></span>val<span class="token operator">==</span>ask<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'s'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//-- and -- are siblings</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sscanf</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"%d and %d are siblings"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>exist<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>exist<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token operator">||</span>father<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>father<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>father<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">==</span>father<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'l'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//-- and -- are on the same level</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sscanf</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"%d and %d are on the same level"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>exist<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>exist<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>levels<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">==</span>levels<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'p'</span><span class="token punctuation">)</span><span class="token operator">!=</span>string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//32 is the parent of 11</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sscanf</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"%d is the parent of %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>exist<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>exist<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>father<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>father<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'r'</span><span class="token punctuation">)</span><span class="token operator">!=</span>string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//28 is the right child of 2</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sscanf</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"%d is the right child of %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>exist<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>exist<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>rchild<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>rchild<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'l'</span><span class="token punctuation">)</span><span class="token operator">!=</span>string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//28 is the left child of 2</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sscanf</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"%d is the left child of %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>exist<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>exist<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>lchild<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>lchild<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h1><ul><li><a href="https://blog.csdn.net/cwtnice/article/details/107204884">PTA1158博客讲解</a></li><li><a href="https://blog.csdn.net/dnhua/article/details/82866809">c++中char[]与string的转化</a></li><li><a href="https://www.jb51.net/article/90495.htm">c++中的sscanf()函数的使用</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程练习 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>甲级模拟1152-1155</title>
      <link href="/2022/02/01/pta-jia-ji-mo-ni-1152-1155/"/>
      <url>/2022/02/01/pta-jia-ji-mo-ni-1152-1155/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识点总结"><a href="#1-知识点总结" class="headerlink" title="1. 知识点总结"></a>1. 知识点总结</h1><p>本次模拟涉及到的知识点有：</p><ul><li>字符串处理</li><li>排序+结构体</li></ul><table><thead><tr><th>题号</th><th>难度</th><th>知识点</th></tr></thead><tbody><tr><td>1152</td><td>🐸</td><td>字符串的处理+基础数学</td></tr><tr><td>1153</td><td>🐸</td><td>排序+字符串处理+结构体（比较繁琐）</td></tr><tr><td>1154</td><td>🕊写过，暂时咕咕~</td><td></td></tr><tr><td>1155</td><td>🕊写过，暂时咕咕~</td><td></td></tr></tbody></table><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2. 分题题解"></a>2. 分题题解</h1><h2 id="2-1-第一题：PTA甲级1152"><a href="#2-1-第一题：PTA甲级1152" class="headerlink" title="2.1 第一题：PTA甲级1152"></a>2.1 第一题：PTA甲级1152</h2><blockquote><p>基本的字符串处理：</p><ul><li>substr的使用</li><li>stoi的转化</li><li>isPrime（）素数判断</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> L<span class="token punctuation">,</span>k<span class="token punctuation">;</span>string str<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">2</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">3</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">5</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token operator">>></span>str<span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>L<span class="token operator">-</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"404"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-第二题：PTA甲级1153"><a href="#2-2-第二题：PTA甲级1153" class="headerlink" title="2.2 第二题：PTA甲级1153"></a>2.2 第二题：PTA甲级1153</h2><blockquote><p>结构体+排序+字符串处理</p><p>基础题，注意每一种情况如果查询结果为0都有<code>NA</code></p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Player</span><span class="token punctuation">&#123;</span>string cardid<span class="token punctuation">;</span><span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token keyword">int</span> site<span class="token punctuation">;</span><span class="token keyword">int</span> yy<span class="token punctuation">;</span><span class="token keyword">int</span> mm<span class="token punctuation">;</span><span class="token keyword">int</span> dd<span class="token punctuation">;</span><span class="token keyword">int</span> number<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Player<span class="token operator">></span>player<span class="token punctuation">;</span><span class="token keyword">int</span> type<span class="token punctuation">;</span>string term<span class="token punctuation">;</span>string cardid<span class="token punctuation">;</span><span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp1</span><span class="token punctuation">(</span>Player a<span class="token punctuation">,</span>Player b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>score<span class="token operator">!=</span>b<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>score<span class="token operator">></span>b<span class="token punctuation">.</span>score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>cardid<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>cardid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">Ans3</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> site<span class="token punctuation">;</span><span class="token keyword">int</span> Nt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">bool</span> <span class="token function">cmp3</span><span class="token punctuation">(</span>Ans3 a<span class="token punctuation">,</span>Ans3 b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>Nt<span class="token operator">!=</span>b<span class="token punctuation">.</span>Nt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>Nt<span class="token operator">></span>b<span class="token punctuation">.</span>Nt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>site<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>site<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> sign<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>player<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>cardid<span class="token operator">>></span>score<span class="token punctuation">;</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cardid<span class="token operator">=</span>cardid<span class="token punctuation">;</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token operator">=</span>score<span class="token punctuation">;</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>site<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>cardid<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>yy<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>cardid<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>mm<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>cardid<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dd<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>cardid<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>cardid<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印</span><span class="token comment">//printf("处理后的结果：");</span><span class="token comment">//printf("%d %d %d %d %d \n",player[i].site,player[i].yy,player[i].mm,player[i].dd,player[i].number); </span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>player<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>type<span class="token operator">>></span>term<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Case "</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">":"</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>type<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>term<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>term<span class="token operator">==</span><span class="token string">"A"</span><span class="token punctuation">)</span>sign<span class="token operator">=</span><span class="token char">'A'</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>term<span class="token operator">==</span><span class="token string">"B"</span><span class="token punctuation">)</span>sign<span class="token operator">=</span><span class="token char">'B'</span><span class="token punctuation">;</span><span class="token keyword">else</span> sign<span class="token operator">=</span><span class="token char">'T'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cardid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>sign<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cardid<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NA\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> Nt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>Ns<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> site<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>term<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>site<span class="token operator">==</span>site<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Nt<span class="token operator">++</span><span class="token punctuation">;</span>Ns<span class="token operator">+=</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Nt<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NA\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>Nt<span class="token punctuation">,</span>Ns<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//site 个数</span><span class="token keyword">int</span> day<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>term<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> year<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>term<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> month<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>term<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Ans3<span class="token operator">></span><span class="token function">ans3</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dd<span class="token operator">==</span>day<span class="token operator">&amp;&amp;</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>mm<span class="token operator">==</span>month<span class="token operator">&amp;&amp;</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>yy<span class="token operator">==</span>year<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans3<span class="token punctuation">[</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>site<span class="token punctuation">]</span><span class="token punctuation">.</span>Nt<span class="token operator">++</span><span class="token punctuation">;</span>ans3<span class="token punctuation">[</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>site<span class="token punctuation">]</span><span class="token punctuation">.</span>site<span class="token operator">=</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>site<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>ans3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ans3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Nt<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>ans3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>site<span class="token punctuation">,</span>ans3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Nt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NA\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ans3<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-第三题：PTA甲级1154"><a href="#2-3-第三题：PTA甲级1154" class="headerlink" title="2.3 第三题：PTA甲级1154"></a>2.3 第三题：PTA甲级1154</h2><h2 id="2-4-第四题：PTA甲级1155"><a href="#2-4-第四题：PTA甲级1155" class="headerlink" title="2.4 第四题：PTA甲级1155"></a>2.4 第四题：PTA甲级1155</h2><h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h1><p>……</p>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程练习 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于一些数学知识ML01</title>
      <link href="/2022/01/31/guan-yu-yi-xie-shu-xue-zhi-shi-ml01/"/>
      <url>/2022/01/31/guan-yu-yi-xie-shu-xue-zhi-shi-ml01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-线性代数"><a href="#1-线性代数" class="headerlink" title="1. 线性代数"></a>1. 线性代数</h1><h2 id="1-1-向量"><a href="#1-1-向量" class="headerlink" title="1.1 向量"></a>1.1 向量</h2><h2 id="1-2-矩阵"><a href="#1-2-矩阵" class="headerlink" title="1.2 矩阵"></a>1.2 矩阵</h2><p>范数：</p><p>$c=A·b hence ||c||≤||A||·||b||$</p><ul><li>取决于如何衡量b和c的长度</li></ul><p>常见范数：</p><ul><li><p>矩阵范数：最小的满足上面公式的值</p></li><li><p>Frobenius范数</p><p>$||A||<em>{Frab}=[Σ</em>{ij}{A_{ij}}^2]^{1/2}$</p></li></ul><p>对称矩阵和反对称矩阵</p><p>正定矩阵</p><p>置换矩阵</p><p>特征向量：不被矩阵改变方向的向量（对称矩阵总是可以找到特征向量，但不是所有的矩阵都可以找到特征向量）</p><p>特征值</p><h1 id="2-coding实现"><a href="#2-coding实现" class="headerlink" title="2. coding实现"></a>2. coding实现</h1><h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA甲级模拟1148-1151</title>
      <link href="/2022/01/31/pta-jia-ji-mo-ni-1148-1151/"/>
      <url>/2022/01/31/pta-jia-ji-mo-ni-1148-1151/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识点总结"><a href="#1-知识点总结" class="headerlink" title="1. 知识点总结"></a>1. 知识点总结</h1><p>本次作业涉及到的知识点有：</p><ul><li>模拟</li><li>简单图论</li></ul><table><thead><tr><th>题号</th><th>难度</th><th>知识点</th></tr></thead><tbody><tr><td>1148</td><td>🐸😣</td><td>模拟，比较考察思维全面性的一道题</td></tr><tr><td>1149</td><td>🐸</td><td>简单图论（邻接图存储），稳住心态，一般前两题卡时间也不会卡得非常难</td></tr><tr><td>1150</td><td>🕊</td><td>先鸽了哈，之前做过了~</td></tr><tr><td>1151</td><td>🐸🐸</td><td>二叉树+数组（时间复杂度优化）</td></tr></tbody></table><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2. 分题题解"></a>2. 分题题解</h1><h2 id="2-1-第一题"><a href="#2-1-第一题" class="headerlink" title="2.1 第一题"></a>2.1 第一题</h2><blockquote><p>这题……不难😅但是卡了45min(目前第一道卡的时间最久的一次)，<strong>没有时间卡分的测试点</strong>，<strong>暴力模拟</strong>即可，需要注意的是思维的全面性，假定i与j分别为假话狼和真话狼，则-v[i]与v[j]是两个正确事实，若为负数，则绝对值必须是i或j,若为正数，则必须是i,j之外的其他数字；其他的“人”讲真话的话，若为负则绝对值为i,j若为正则其他数字，需要注意的是有一个人讲谎话，所以必须有一个编号为“人”的不满足上述约束</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v<span class="token punctuation">;</span> <span class="token keyword">bool</span> <span class="token function">isok</span><span class="token punctuation">(</span><span class="token keyword">int</span> wolf1<span class="token punctuation">,</span><span class="token keyword">int</span> wolf2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//wolf1假话，wolf2真话 </span><span class="token comment">//-v[wolf1] v[wolf2]</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>wolf1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">abs</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>wolf2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>v<span class="token punctuation">[</span>wolf1<span class="token punctuation">]</span><span class="token operator">==</span>v<span class="token punctuation">[</span>wolf2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//一定是相互矛盾的话 </span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>wolf2<span class="token punctuation">]</span><span class="token operator">==</span>wolf1<span class="token operator">||</span>v<span class="token punctuation">[</span>wolf2<span class="token punctuation">]</span><span class="token operator">==</span>wolf2<span class="token operator">||</span><span class="token operator">-</span>v<span class="token punctuation">[</span>wolf1<span class="token punctuation">]</span><span class="token operator">==</span>wolf2<span class="token operator">||</span><span class="token operator">-</span>v<span class="token punctuation">[</span>wolf1<span class="token punctuation">]</span><span class="token operator">==</span>wolf1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//这是两句真话 </span><span class="token keyword">int</span> t1<span class="token operator">=</span> <span class="token operator">-</span>v<span class="token punctuation">[</span>wolf1<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> t2<span class="token operator">=</span> v<span class="token punctuation">[</span>wolf2<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t1<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>t1<span class="token operator">!=</span><span class="token operator">-</span>wolf1<span class="token operator">&amp;&amp;</span>t1<span class="token operator">!=</span><span class="token operator">-</span>wolf2<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t2<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>t2<span class="token operator">!=</span><span class="token operator">-</span>wolf1<span class="token operator">&amp;&amp;</span>t2<span class="token operator">!=</span><span class="token operator">-</span>wolf2<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录说假话的次数 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>wolf1<span class="token operator">||</span>i<span class="token operator">==</span>wolf2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span>t1<span class="token operator">||</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span>t2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//printf("isok:1假话%d\n",i);</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span>wolf1<span class="token operator">&amp;&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span>wolf2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//printf("isok:2假话%d\n",i);</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>wolf1<span class="token operator">||</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>wolf2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//printf("isok:3假话%d\n",i);</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//两个狼人，一个狼人说假话，一个人说假话</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> ans1<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ans2<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans1<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isok</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans2<span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token comment">//printf("真话：%d 假话:%d\n",j,i);</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isok</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans2<span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token comment">//printf("真话：%d 假话:%d\n",i,j);</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ans2<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ans1<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>ans2<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span>ans1<span class="token punctuation">,</span>ans2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No Solution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-第二题"><a href="#2-2-第二题" class="headerlink" title="2.2 第二题"></a>2.2 第二题</h2><blockquote><p>图论的一道题目，会卡时间、卡内存，简单优化一下即可</p><ul><li>首先对于所有存在冲突的编号进行存储，之后遍历的时候遇到非冲突编号直接跳过，降低时间复杂度</li><li>其次，不可以用二阶矩阵存储，内存会爆，这里用<code>map&lt;int,vector&lt;int&gt; &gt;</code>邻接列表降低内存</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span>mp<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span>exist<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isADJ</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//printf("x=%d,map[%d]临边%d\n",mp[x][i]);</span><span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>exist<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>exist<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>exist<span class="token punctuation">[</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>exist<span class="token punctuation">[</span>v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isADJ</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-第三题"><a href="#2-3-第三题" class="headerlink" title="2.3 第三题"></a>2.3 第三题</h2><h2 id="2-4-第四题"><a href="#2-4-第四题" class="headerlink" title="2.4 第四题"></a>2.4 第四题</h2><blockquote><p>这题和之前做得一道很相似见<a href="https://blog.csdn.net/qq_45751990/article/details/122717570">1143题解</a>，属于变式了😜</p><p>exam1：18/30建立树，然后搜索，为了简化时间复杂度用了temp存储中间建立树的时候的父节点们，但是……内存超限了😅😅</p><p>exam2：AC借鉴了之前的做法，直接数组开刷,不需要建立树，只需要根据in中序遍历的数组求得每个结点的优先顺序，然后遍历pre数组，当遍历到的数组结点temp在a,b中间（这里的中间是指temp在in数组的相对位置在a,b之间）时候即可跳出循环，为LCA</p></blockquote><p>exam1:18/30</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>in<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>pre<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span>father<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span>exist<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> val<span class="token punctuation">;</span>Node<span class="token operator">*</span> left<span class="token punctuation">;</span>Node<span class="token operator">*</span>right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>temp<span class="token punctuation">;</span>Node <span class="token operator">*</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> inL<span class="token punctuation">,</span><span class="token keyword">int</span> inR<span class="token punctuation">,</span><span class="token keyword">int</span> preL<span class="token punctuation">,</span><span class="token keyword">int</span> preR<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>inR<span class="token operator">&lt;</span>inL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> val<span class="token operator">=</span>pre<span class="token punctuation">[</span>preL<span class="token punctuation">]</span><span class="token punctuation">;</span>Node <span class="token operator">*</span>root<span class="token operator">=</span><span class="token keyword">new</span> Node<span class="token punctuation">;</span>root<span class="token operator">-></span>val<span class="token operator">=</span>val<span class="token punctuation">;</span><span class="token comment">//给每个结点添加父节点的 </span>temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>father<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>inL<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>inR<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> left_num<span class="token operator">=</span>k<span class="token operator">-</span>inL<span class="token punctuation">;</span><span class="token comment">//左边的数量</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>ctemp<span class="token punctuation">;</span>ctemp<span class="token operator">=</span>temp<span class="token punctuation">;</span>root<span class="token operator">-></span>left<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>inL<span class="token punctuation">,</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>preL<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>preL<span class="token operator">+</span>left_num<span class="token punctuation">)</span><span class="token punctuation">;</span>temp<span class="token operator">=</span>ctemp<span class="token punctuation">;</span>root<span class="token operator">-></span>right<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>inR<span class="token punctuation">,</span>preL<span class="token operator">+</span>left_num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>preR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> root<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>in<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>pre<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exist<span class="token punctuation">[</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//出现了某个结点 </span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Node <span class="token operator">*</span>root<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>root<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//检验</span><span class="token comment">//for(int i=0;i&lt;n;i++)&#123;</span><span class="token comment">//printf("子节点%d:",in[i]);</span><span class="token comment">//for(int j=0;j&lt;father[in[i]].size();j++)&#123;</span><span class="token comment">//printf("%d ",father[in[i]][j]);</span><span class="token comment">//&#125;</span><span class="token comment">//printf("\n");</span><span class="token comment">//&#125; </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>exist<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>exist<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d is not found.\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d and %d are not found.\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>exist<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//搜索 </span><span class="token keyword">int</span> an<span class="token punctuation">;</span><span class="token keyword">int</span> lena<span class="token operator">=</span>father<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> lenb<span class="token operator">=</span>father<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>lena<span class="token punctuation">,</span>lenb<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>father<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>father<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>an<span class="token operator">=</span>father<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>an<span class="token operator">==</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is an ancestor of %d.\n"</span><span class="token punctuation">,</span>an<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>an<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is an ancestor of %d.\n"</span><span class="token punctuation">,</span>an<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"LCA of %d and %d is %d.\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>an<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d is not found.\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exam2:30/30</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>in<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>pre<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>order<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span>exist<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>in<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>pre<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>order<span class="token punctuation">[</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>exist<span class="token punctuation">[</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>exist<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>exist<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d is not found.\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d and %d are not found.\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>exist<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//搜索 </span><span class="token keyword">int</span> an<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp<span class="token operator">=</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">&lt;</span>order<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>order<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">></span>order<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">||</span>order<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">&lt;</span>order<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>order<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">></span>order<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>an<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span>a<span class="token operator">||</span>temp<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>an<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>an<span class="token operator">==</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is an ancestor of %d.\n"</span><span class="token punctuation">,</span>an<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>an<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is an ancestor of %d.\n"</span><span class="token punctuation">,</span>an<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"LCA of %d and %d is %d.\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>an<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d is not found.\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h1><ol><li><a href="https://blog.csdn.net/qq_45751990/article/details/122717570">菜菜子的1143题解订正</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程练习 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习第一弹</title>
      <link href="/2022/01/30/ji-qi-xue-xi-di-yi-dan/"/>
      <url>/2022/01/30/ji-qi-xue-xi-di-yi-dan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是某菜在李沐老师2021机器学习过程中一丢丢的课程笔记😃</p></blockquote><h1 id="1-数据的获取"><a href="#1-数据的获取" class="headerlink" title="1. 数据的获取"></a>1. 数据的获取</h1><ol><li>根据具体应用搜索现有的数据</li><li>搜集、采集数据（爬取、采集）</li><li>生成数据（GAN）、数据增强</li></ol><p><strong>A).一些开源数据集网站：</strong></p><p>paperwithcode（常见的论文数据集可以在这里找到）</p><p>Kaggle Datasets（竞赛数据，包含的数据集会比前者更多，质量的话参差不齐，总体还是比较好的~）</p><p>Google Dataset search</p><p>Open Data on AWS</p><p><strong>B).一些自带数据集的python包：</strong></p><p>（带的都是经典的老数据）</p><p>tensorflow</p><p>huggingface</p><h1 id="2-简单介绍一下网页爬取"><a href="#2-简单介绍一下网页爬取" class="headerlink" title="2.简单介绍一下网页爬取"></a>2.简单介绍一下网页爬取</h1><h2 id="2-1-基本网页爬取实例"><a href="#2-1-基本网页爬取实例" class="headerlink" title="2.1 基本网页爬取实例"></a>2.1 基本网页爬取实例</h2><p>需要的包：</p><ul><li>requests</li></ul><p>爬取特定的网页，输出网页的html文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 生成一个request对象</span>response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://ghy0202.github.io"</span><span class="token punctuation">)</span><span class="token comment"># 设置编码格式</span>response<span class="token punctuation">.</span>encoding<span class="token operator">=</span>t<span class="token operator">=</span>response<span class="token punctuation">.</span>apparent_encoding<span class="token comment"># 打印状态码</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"状态码："</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 打印爬取的信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常见的方法有：</p><ul><li>get</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>post</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/post"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>put</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/put"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>传参数的方式，get与post类似，这里以post为例子</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">""" Part05:传参数get,post类似"""</span><span class="token comment"># 第一种写法</span>response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/post?name=hezhi&amp;age=20"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment"># 第二种写法</span>data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"hezhi"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span>response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/post"</span><span class="token punctuation">,</span>params<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>关于绕过反爬机制</strong>：因为一些网页涉及到的数据比较敏感或者是出于对网站数据的维护，所以直接爬取是会被……“403”的，这时候一种解决方式是用python伪装成浏览器，也就是设置头部信息</p><p>下面的例子是对于知乎反爬机制的一个小“叛逆”解决方式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 第一次，没有头部信息，输出状态码为403，表示远程服务器拒绝访问</span>response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.zhihu.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"first time , state code="</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token comment"># 设置头部信息，伪装成浏览器，可以正常输出200</span>headers<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36"</span><span class="token punctuation">&#125;</span>response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.zhihu.com"</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>关于如何保存信息到本地</strong>：</p><ol><li><p>网页信息保存到本地：</p><p>这个就比较基础了，保存一下即可~</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""Part06:绕过反爬机制"""</span><span class="token comment"># 第一次，没有头部信息，输出状态码为403，表示远程服务器拒绝访问</span>response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.zhihu.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"first time , state code="</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token comment"># 设置头部信息，伪装成浏览器，可以正常输出200</span>headers<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36"</span><span class="token punctuation">&#125;</span>response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.zhihu.com"</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Part07:爬取信息并且保存到本地"""</span><span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./Data1/test01.html'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf'</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>图片信息保存到本地：</p><p>emmm,这个demo比较基础，需要给定图片的url😅,没有实现自动批量抓取……</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#保存百度图片到本地</span><span class="token keyword">import</span> requests <span class="token comment">#先导入爬虫的库，不然调用不了爬虫的函数</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/img/baidu_jgylogo3.gif"</span><span class="token punctuation">)</span> <span class="token comment">#get方法的到图片响应</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./Data1/baidu_logo.gif"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token comment">#打开一个文件,wb表示以二进制格式打开一个文件只用于写入</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token comment">#写入文件</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#关闭操作，运行完毕后去你的目录看一眼有没有保存成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一个简单实战的Demo(天猫商品评论)：</p><p>主要的难点在于url的获取：具体代码和讲解<a href="https://blog.csdn.net/qq_46614154/article/details/105682101">【传送门】</a></p></li></ol><h2 id="2-2-课程中提到的网页爬取实例"><a href="#2-2-课程中提到的网页爬取实例" class="headerlink" title="2.2 课程中提到的网页爬取实例"></a>2.2 课程中提到的网页爬取实例</h2><p>需要的包：</p><ul><li>selenium</li><li>BeautifulSoup</li></ul><h2 id="2-3-注意事项"><a href="#2-3-注意事项" class="headerlink" title="2.3 注意事项"></a>2.3 注意事项</h2><ul><li><p>只是学习</p></li><li><p>注意法律问题，😂不要爬取敏感数据哈~</p></li></ul><h1 id="3-数据标注"><a href="#3-数据标注" class="headerlink" title="3.数据标注"></a>3.数据标注</h1><p>等待更新……</p><h1 id="4-数据处理"><a href="#4-数据处理" class="headerlink" title="4. 数据处理"></a>4. 数据处理</h1><p>等待更新……</p><h1 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h1><ol><li><a href="https://blog.csdn.net/qq_46614154/article/details/105682101">基于requests的爬虫实例</a>（爬取天猫商品评论）</li><li><a href="https://zhuanlan.zhihu.com/p/355797583">基于requests的爬虫基础</a></li><li>……</li></ol>]]></content>
      
      
      <categories>
          
          <category> AI入门理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA甲级模拟1144-1147</title>
      <link href="/2022/01/29/pta-jia-ji-mo-ni-1144-1147/"/>
      <url>/2022/01/29/pta-jia-ji-mo-ni-1144-1147/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识点总结"><a href="#1-知识点总结" class="headerlink" title="1 知识点总结"></a>1 知识点总结</h1><p>本次作业涉及到的知识点有：</p><table><thead><tr><th>题号</th><th>难度</th><th>知识点</th></tr></thead><tbody><tr><td>1144</td><td>🐸</td><td>数组+基本排序</td></tr><tr><td>1145</td><td>🐸🐸</td><td>hash+二次探测<strong>（temp+k*k）%tsize</strong></td></tr><tr><td>1146</td><td></td><td></td></tr><tr><td>1147</td><td></td><td></td></tr></tbody></table><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2 分题题解"></a>2 分题题解</h1><h2 id="2-1-第一题"><a href="#2-1-第一题" class="headerlink" title="2.1 第一题"></a>2.1 第一题</h2><blockquote><p>这一题基本上考察的是细心，易错点：</p><ul><li>如果给定序列类似：……1，2，3……n-1,n那么缺失的最小正整数为n+1</li><li>如果给定序列为……0，2，3……n-1,n那缺失的最小为1</li><li>其余情况只需要判断为正数的时候，与下一个的差值是否为1</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">bool</span> one<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>one<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token operator">&amp;&amp;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>v<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token operator">&amp;&amp;</span>one<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span>v<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>one<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-第二题"><a href="#2-2-第二题" class="headerlink" title="2.2 第二题"></a>2.2 第二题</h2><blockquote><p>这题难倒是不难，关键是二次探测的公式不能写错</p></blockquote><p><strong>学一个英文：</strong></p><p>Quadratic probing (with positive increments only)<mark>二次探测（仅限正增量）</mark><br>$$<br>(temp+k*k)mod(tsize)<br>$$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> MSize<span class="token punctuation">,</span>N<span class="token punctuation">,</span>M<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">2</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">3</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">5</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>hasht<span class="token punctuation">;</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>MSize<span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPrime</span><span class="token punctuation">(</span>MSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>MSize<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>hasht<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>MSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fill</span><span class="token punctuation">(</span>hasht<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hasht<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>MSize<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token punctuation">(</span>temp<span class="token operator">+</span>k<span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token operator">%</span>MSize<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hasht<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>hasht<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d cannot be inserted.\n"</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> pre<span class="token operator">=</span>sum<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>MSize<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token punctuation">(</span>temp<span class="token operator">+</span>k<span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token operator">%</span>MSize<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hasht<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">==</span>temp<span class="token operator">||</span>hasht<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f"</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token operator">/</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-第三题"><a href="#2-3-第三题" class="headerlink" title="2.3 第三题"></a>2.3 第三题</h2><h2 id="2-4-第四题"><a href="#2-4-第四题" class="headerlink" title="2.4 第四题"></a>2.4 第四题</h2><h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3 参考资料"></a>3 参考资料</h1>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程练习 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA甲级模拟1140-1143</title>
      <link href="/2022/01/28/pta-jia-ji-mo-ni-1140-1143/"/>
      <url>/2022/01/28/pta-jia-ji-mo-ni-1140-1143/</url>
      
        <content type="html"><![CDATA[<h1 id="1-知识点总结"><a href="#1-知识点总结" class="headerlink" title="1 知识点总结"></a>1 知识点总结</h1><p>本次作业涉及到的知识点有：</p><ul><li>字符串处理</li><li>STL+排序</li><li>图论</li><li>BST树（时间复杂度）</li></ul><table><thead><tr><th>题号</th><th>难度</th><th>知识点</th></tr></thead><tbody><tr><td>1140</td><td>🐸</td><td>字符串和数字的转化+英语阅读理解</td></tr><tr><td>1141</td><td>🐸</td><td>STL+排序（涉及基础的字符串处理）</td></tr><tr><td>1142</td><td>🐸</td><td>图论（图基础的基础的基础😅，没啥知识点几乎）</td></tr><tr><td><strong>1143</strong></td><td>🐸🐸🐸</td><td>BST树的搜索与建立+时间复杂度优化😅最怕有思路但是<strong>卡时间</strong>的题目了(这题如果没有背过模板，考场上找规律应该更容易过一点😂)</td></tr></tbody></table><h1 id="2-分题题解"><a href="#2-分题题解" class="headerlink" title="2 分题题解"></a>2 分题题解</h1><h2 id="2-1-第一题"><a href="#2-1-第一题" class="headerlink" title="2.1 第一题"></a>2.1 第一题</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805344490864640"><strong>1140 Look-and-say Sequence (20 分)</strong></a></p><blockquote><p><strong>思路</strong>：</p><ul><li>找规律：出现的数字+该数字连续出现的次数……依次类推</li><li>字符串处理：string与int之间的相互转化</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token comment">//1 2 3 4 5 6 7 8</span><span class="token comment">//D D1 D111 D113 D11231</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Count</span><span class="token punctuation">(</span>string str<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string <span class="token function">getAns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//计算出d的第n个</span>string nth<span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>string n1th<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//初始化</span><span class="token comment">//for(int k=0;k&lt;10;k++)vis[k]=false;</span>n1th<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nth<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>n1th<span class="token operator">+=</span>nth<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>nth<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nth<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>nth<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>j<span class="token operator">++</span><span class="token punctuation">;</span>temp<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>n1th<span class="token operator">+=</span><span class="token function">to_string</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>nth<span class="token operator">=</span>n1th<span class="token punctuation">;</span><span class="token comment">//cout&lt;&lt; nth&lt;&lt;endl;</span><span class="token punctuation">&#125;</span> <span class="token keyword">return</span> nth<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token function">getAns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-第二题"><a href="#2-2-第二题" class="headerlink" title="2.2 第二题"></a>2.2 第二题</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805344222429184"><strong>1141 PAT Ranking of Institutions (25 分)</strong></a></p><blockquote><p><strong>思路</strong>：</p><p>基本的字符串处理+排序，没有坑</p></blockquote><p>学习到的一个新的string用法：</p><p>因为tolower()只支持一个字符一个字符修改，下面可以快速转化一个string（其实自己写转化函数也不费劲😏）</p><p><font color='red'>transform(iid.begin(),iid.end(),iid.begin(),::tolower);</font></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Institution</span><span class="token punctuation">&#123;</span>string name<span class="token punctuation">;</span><span class="token keyword">int</span> TWS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> Ns<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> scoreA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> scoreB<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> scoreT<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>Institution<span class="token operator">></span>mp<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>string id<span class="token punctuation">;</span><span class="token keyword">int</span> score<span class="token punctuation">;</span>string iid<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Institution<span class="token operator">></span>v<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Institution a<span class="token punctuation">,</span>Institution b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>TWS<span class="token operator">!=</span>b<span class="token punctuation">.</span>TWS<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>TWS<span class="token operator">></span>b<span class="token punctuation">.</span>TWS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>Ns<span class="token operator">!=</span>b<span class="token punctuation">.</span>Ns<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>Ns<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>Ns<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>name<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>id<span class="token operator">>></span>score<span class="token operator">>></span>iid<span class="token punctuation">;</span><span class="token comment">//注意写法 </span><span class="token function">transform</span><span class="token punctuation">(</span>iid<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>iid<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>iid<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token double-colon punctuation">::</span>tolower<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mp<span class="token punctuation">[</span>iid<span class="token punctuation">]</span><span class="token punctuation">.</span>scoreA<span class="token operator">+=</span>score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'B'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mp<span class="token punctuation">[</span>iid<span class="token punctuation">]</span><span class="token punctuation">.</span>scoreB<span class="token operator">+=</span>score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'T'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mp<span class="token punctuation">[</span>iid<span class="token punctuation">]</span><span class="token punctuation">.</span>scoreT<span class="token operator">+=</span>score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>mp<span class="token punctuation">[</span>iid<span class="token punctuation">]</span><span class="token punctuation">.</span>Ns<span class="token operator">++</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span>iid<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token operator">=</span>iid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>mp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>Institution<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>mp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>mp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Institution temp<span class="token operator">=</span>it<span class="token operator">-></span>second<span class="token punctuation">;</span><span class="token comment">//temp</span>temp<span class="token punctuation">.</span>TWS<span class="token operator">=</span>temp<span class="token punctuation">.</span>scoreA<span class="token operator">+</span>temp<span class="token punctuation">.</span>scoreB<span class="token operator">/</span><span class="token number">1.5</span><span class="token operator">+</span>temp<span class="token punctuation">.</span>scoreT<span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">;</span> v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> rank<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&amp;&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>TWS<span class="token operator">!=</span>v<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>TWS<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>rank<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>rank<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>TWS<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Ns<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-第三题"><a href="#2-3-第三题" class="headerlink" title="2.3 第三题"></a>2.3 第三题</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805343979159552"><strong>1142 Maximal Clique (25 分)</strong></a></p><blockquote><p><strong>思路</strong>：</p><p>基础图论</p><ul><li>首先判断给定点集是否两两相连（并在此时给点集中的点标记）</li><li>其次判断是否有一个点不属于点集但是和点集中的所有点相连</li><li>因为没怎么卡时间，所以暴力也基本可以</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">206</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">bool</span> graph<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isADJ</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>graph<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">canADD</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">int</span> sign<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>id<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>id<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">!=</span>sign<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>graph<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>graph<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>graph<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//任意两个顶点都是有邻接的边的 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isADJ</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Not a Clique\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">canADD</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Not Maximal\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//没有办法再加任何一个邻接边 </span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-第四题"><a href="#2-4-第四题" class="headerlink" title="2.4 第四题"></a>2.4 第四题</h2><p>[**1143 Lowest Common Ancestor (30 分)**](<a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805343727501312">题目详情 - 1143 Lowest Common Ancestor (30 分) (pintia.cn)</a>)</p><p><strong>狠狠订正嗷嗷嗷嗷</strong></p><blockquote><p>一开始的思路：</p><ul><li>建立一棵树（模板，建议熟悉）</li><li>对于给定两个结点，首先Find看是否存在，并在寻找的过程中保存父节点（即经过的结点）</li><li>比较沿路经过的父节点，是否有出现在同一层同一大小的结点，若有，即为公共父节点（具体情况还需要特判，若两个结点相等并且等于父节点，属于：<code>X is an ancestor of Y</code>情况）</li></ul></blockquote><p>第一版：18/30</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//最低的祖先</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> val<span class="token punctuation">;</span>Node <span class="token operator">*</span>right<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>Node <span class="token operator">*</span>left<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Node <span class="token operator">*</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span>Node<span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>root<span class="token operator">=</span><span class="token keyword">new</span> Node<span class="token punctuation">;</span>root<span class="token operator">-></span>val<span class="token operator">=</span>val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token operator">&lt;</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>root<span class="token operator">-></span>left<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>root<span class="token operator">-></span>right<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//找到最年轻的父节点</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v1<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v2<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span>Node<span class="token operator">*</span>root<span class="token punctuation">,</span><span class="token keyword">int</span> sign<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val<span class="token operator">==</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sign<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>v2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//保存路径上的值 </span><span class="token keyword">if</span><span class="token punctuation">(</span>sign<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>v2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token operator">&lt;</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">Find</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">Find</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span>mp<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>Node <span class="token operator">*</span>root<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>root<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v2<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">||</span><span class="token operator">!</span><span class="token function">Find</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>root<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">||</span><span class="token operator">!</span><span class="token function">Find</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>root<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d and %d are not found.\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d is not found.\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">||</span><span class="token operator">!</span><span class="token function">Find</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>root<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d is not found.\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//找到路径上公共点</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">min</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span>a<span class="token operator">&amp;&amp;</span>ans<span class="token operator">!=</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is an ancestor of %d.\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span>b<span class="token operator">&amp;&amp;</span>ans<span class="token operator">!=</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is an ancestor of %d.\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span>a<span class="token operator">&amp;&amp;</span>ans<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is an ancestor of %d.\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"LCA of %d and %d is %d.\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二版：试着将Find优化在build部分就储存父节点，还是不行18/30</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//最低的祖先</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> val<span class="token punctuation">;</span>Node <span class="token operator">*</span>right<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>Node <span class="token operator">*</span>left<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span>mp<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span>path<span class="token punctuation">;</span>Node <span class="token operator">*</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span>Node<span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>root<span class="token operator">=</span><span class="token keyword">new</span> Node<span class="token punctuation">;</span>root<span class="token operator">-></span>val<span class="token operator">=</span>val<span class="token punctuation">;</span>path<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token operator">&lt;</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>path<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token operator">-></span>left<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>path<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token operator">-></span>right<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//找到最年轻的父节点</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>Node <span class="token operator">*</span>root<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>root<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d and %d are not found.\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d is not found.\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d is not found.\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//找到路径上公共点</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>path<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>path<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span>path<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span>a<span class="token operator">&amp;&amp;</span>ans<span class="token operator">!=</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is an ancestor of %d.\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span>b<span class="token operator">&amp;&amp;</span>ans<span class="token operator">!=</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is an ancestor of %d.\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span>a<span class="token operator">&amp;&amp;</span>ans<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is an ancestor of %d.\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"LCA of %d and %d is %d.\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看了柳神的思路才知道不需要建立树😅，考察的是对于BST树<code>数组结构</code></p><blockquote><p><strong>订正思路</strong>：</p><p><em>分析：map&lt;int, bool&gt; mp用来标记树中所有出现过的结点，遍历一遍pre数组，将当前结点标记为a，如果u和v分别在a的左、右，或者u、v其中一个就是当前a，说明找到了这个共同最低祖先a，退出当前循环～最后根据要求输出结果即可～</em></p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>pre<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span>mp<span class="token punctuation">;</span><span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>pre<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d and %d are not found.\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d is not found.\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d is not found.\n"</span><span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//找到了</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span>pre<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">&lt;</span>u<span class="token operator">&amp;&amp;</span>temp<span class="token operator">></span>v<span class="token operator">||</span>temp<span class="token operator">&lt;</span>v<span class="token operator">&amp;&amp;</span>temp<span class="token operator">></span>u<span class="token operator">||</span>temp<span class="token operator">==</span>u<span class="token operator">||</span>temp<span class="token operator">==</span>v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">!=</span>v<span class="token operator">&amp;&amp;</span>temp<span class="token operator">!=</span>u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"LCA of %d and %d is %d.\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">,</span>u<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is an ancestor of %d.\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">,</span>ans<span class="token operator">==</span>v<span class="token operator">?</span>u<span class="token operator">:</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3 参考资料"></a>3 参考资料</h1><ol><li><a href="https://blog.csdn.net/qq_37941471/article/details/81988702">STL中tolower()对于string的使用</a></li><li><a href="https://blog.csdn.net/liuchuo/article/details/79618849">柳神——1143的数据结构解法</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 编程练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA甲级练习</title>
      <link href="/2022/01/28/pta-jia-ji-lian-xi/"/>
      <url>/2022/01/28/pta-jia-ji-lian-xi/</url>
      
        <content type="html"><![CDATA[<p><strong>测试中文名是否正常</strong></p><blockquote><p>作为备战机考的算法笔记~💖</p></blockquote><h2 id="TODO-List"><a href="#TODO-List" class="headerlink" title="TODO List"></a>TODO List</h2><table><thead><tr><th>题号</th><th>难度</th><th>考察点</th></tr></thead><tbody><tr><td><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805359372255232">PTA1110</a></td><td>🎈🎈</td><td>二叉树（其实也不难，但是确实忘得差不多了~）</td></tr><tr><td><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805368847187968">PTA1098</a></td><td>🎈</td><td>插入排序&amp;堆排序</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>[TOC]</p><h2 id="一、字符串处理"><a href="#一、字符串处理" class="headerlink" title="一、字符串处理"></a>一、字符串处理</h2><h3 id="1-1知识点（C-库函数）"><a href="#1-1知识点（C-库函数）" class="headerlink" title="1.1知识点（C++库函数）"></a>1.1知识点（C++库函数）</h3><ul><li><p>string子串：</p><p><font color='#9ACD32'>string str</font></p><p><font color='#9ACD32'>string str1=str.substr(pos,len);</font></p>默认不加len返回的是从pos位置开始一直到字符串末尾的子串</li><li><p>string 的find函数：</p><p><font color='#9ACD32'>int pos=str.find("s")</font></p><p>返回的是字符”s”所在下标，如果没有，则返回</p><p><font color='#9ACD32'>str.npos;</font></p></li><li><p>string转int</p><ul><li>补充：<a href="https://blog.csdn.net/Vic___/article/details/9324897">int-&gt;float   int-&gt;long long 等</a>，万能的stream<ul><li>stoi:转int</li><li>stof:转float</li><li>stol:转long</li></ul></li><li></li></ul></li><li><p>int转string</p><p><font color='#9ACD32'>int a=10;<p><font color='#9ACD32'>to_string(a)//返回一个字符串“10”</font></p></li></ul><ul><li><p>string的子串</p><p><font color='#9ACD00'>string a="AS YO SD"  <p><font color='#9ACD32'>a.substr(2);//返回从下标2到最后的一串字符<p><font color='#9ACD32'>a.substr(2,3);//返回从下标2开始长度为3的一串字符，前者超界限报错，后者长度超过字符串长度，则自动截断</li></ul><ul><li><p>string定位某个字符</p><p><font color='#9ACD32'>string a="ASDEF"<p><font color='#9ACD32'>a.find('A');//返回A的位置编号0</font></p></li></ul><ul><li><p>char型字符判断类型</p><ul><li><p>**isalnum()**判断一个字符是否为字母或者数字</p></li><li><p>**isalpha()**判断一个字符是否为字母(A – Z or a – z)</p></li><li><p>**isdigit()**判断一个字符是否为数字</p></li></ul></li><li><p>**isxdigit()**判断一个字符是否为十六进制数字(A – F, a – f, or 0 – 9)</p><ul><li>**islower()**判断一个字符是否小写</li><li>**isupper()**判断一个字符是否为大写</li></ul></li><li><p>string字符串的逆转</p><p><strong>reverse(str.begin(),str.end())</strong>:将string类型直接reverse掉</p></li><li><p>转大写、小写——只限于char型</p><p>char ch;</p><p>toupper(ch);</p><p>tolower(ch);</p></li><li><p>字符串的输入输出</p><ul><li><p>sscanf(original_str  ,格式,  需要保存的字符串、数字等)</p><p><a href="https://blog.csdn.net/lxzh12345/article/details/24122969">【参考链接】</a></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">sscanf(&quot;123456 &quot;, &quot;%s&quot;, str);&#x2F;&#x2F;将字符串“123456”输入给str sscanf(&quot;123456 &quot;, &quot;%4s&quot;, str);&#x2F;&#x2F;取最大长度为4字节的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>sprintf(需要保存的字符串，格式，原本的字符串或者数字)</p><p><a href="https://blog.csdn.net/u012406177/article/details/70243062">【参考链接】</a></p></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vlog日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
